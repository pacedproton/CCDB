/* A Bison parser, made by GNU Bison 2.7.12-4996.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.7.12-4996"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs

/* Copy the first part of user declarations.  */
/* Line 371 of yacc.c  */
#line 25 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)
#define YYCSCL  YYTHD->variables.character_set_client

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)

#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, EMPTY_STR, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, EMPTY_STR, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->one_shot_set= 0;
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}



/* Line 371 of yacc.c  */
#line 950 "/opt/mariadb.git/trunk/sql/sql_yacc.cc"

# ifndef YY_NULL
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULL nullptr
#  else
#   define YY_NULL 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_OPT_MARIADB_GIT_TRUNK_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_OPT_MARIADB_GIT_TRUNK_SQL_SQL_YACC_H_INCLUDED
/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     CCDB_OPENDB_SYM = 258,
     CCDB_CLOSEDB_SYM = 259,
     CCDB_PORT_SYM = 260,
     CCDB_OPENTABLE_SYM = 261,
     CCDB_SHOW_CCTABLES_SYM = 262,
     CCDB_PUBLISH_STATUS_SYM = 263,
     CCDB_SHOW_STATUS_SYM = 264,
     CCDB_PUBLISH_SYM = 265,
     CCDB_LOCK_CCTABLE_SYM = 266,
     CCDB_UNLOCK_CCTABLE_SYM = 267,
     ABORT_SYM = 268,
     ACCESSIBLE_SYM = 269,
     ACTION = 270,
     ADD = 271,
     ADDDATE_SYM = 272,
     AFTER_SYM = 273,
     AGAINST = 274,
     AGGREGATE_SYM = 275,
     ALGORITHM_SYM = 276,
     ALL = 277,
     ALTER = 278,
     ALWAYS_SYM = 279,
     ANALYZE_SYM = 280,
     AND_AND_SYM = 281,
     AND_SYM = 282,
     ANY_SYM = 283,
     AS = 284,
     ASC = 285,
     ASCII_SYM = 286,
     ASENSITIVE_SYM = 287,
     AT_SYM = 288,
     AUTHORS_SYM = 289,
     AUTOEXTEND_SIZE_SYM = 290,
     AUTO_INC = 291,
     AUTO_SYM = 292,
     AVG_ROW_LENGTH = 293,
     AVG_SYM = 294,
     BACKUP_SYM = 295,
     BEFORE_SYM = 296,
     BEGIN_SYM = 297,
     BETWEEN_SYM = 298,
     BIGINT = 299,
     BINARY = 300,
     BINLOG_SYM = 301,
     BIN_NUM = 302,
     BIT_AND = 303,
     BIT_OR = 304,
     BIT_SYM = 305,
     BIT_XOR = 306,
     BLOB_SYM = 307,
     BLOCK_SYM = 308,
     BOOLEAN_SYM = 309,
     BOOL_SYM = 310,
     BOTH = 311,
     BTREE_SYM = 312,
     BY = 313,
     BYTE_SYM = 314,
     CACHE_SYM = 315,
     CALL_SYM = 316,
     CASCADE = 317,
     CASCADED = 318,
     CASE_SYM = 319,
     CAST_SYM = 320,
     CATALOG_NAME_SYM = 321,
     CHAIN_SYM = 322,
     CHANGE = 323,
     CHANGED = 324,
     CHARSET = 325,
     CHAR_SYM = 326,
     CHECKPOINT_SYM = 327,
     CHECKSUM_SYM = 328,
     CHECK_SYM = 329,
     CIPHER_SYM = 330,
     CLASS_ORIGIN_SYM = 331,
     CLIENT_SYM = 332,
     CLIENT_STATS_SYM = 333,
     CLOSE_SYM = 334,
     COALESCE = 335,
     CODE_SYM = 336,
     COLLATE_SYM = 337,
     COLLATION_SYM = 338,
     COLUMNS = 339,
     COLUMN_ADD_SYM = 340,
     COLUMN_CHECK_SYM = 341,
     COLUMN_CREATE_SYM = 342,
     COLUMN_DELETE_SYM = 343,
     COLUMN_GET_SYM = 344,
     COLUMN_SYM = 345,
     COLUMN_NAME_SYM = 346,
     COMMENT_SYM = 347,
     COMMITTED_SYM = 348,
     COMMIT_SYM = 349,
     COMPACT_SYM = 350,
     COMPLETION_SYM = 351,
     COMPRESSED_SYM = 352,
     CONCURRENT = 353,
     CONDITION_SYM = 354,
     CONNECTION_SYM = 355,
     CONSISTENT_SYM = 356,
     CONSTRAINT = 357,
     CONSTRAINT_CATALOG_SYM = 358,
     CONSTRAINT_NAME_SYM = 359,
     CONSTRAINT_SCHEMA_SYM = 360,
     CONTAINS_SYM = 361,
     CONTEXT_SYM = 362,
     CONTINUE_SYM = 363,
     CONTRIBUTORS_SYM = 364,
     CONVERT_SYM = 365,
     COUNT_SYM = 366,
     CPU_SYM = 367,
     CREATE = 368,
     CROSS = 369,
     CUBE_SYM = 370,
     CURDATE = 371,
     CURRENT_SYM = 372,
     CURRENT_USER = 373,
     CURRENT_POS_SYM = 374,
     CURSOR_SYM = 375,
     CURSOR_NAME_SYM = 376,
     CURTIME = 377,
     DATABASE = 378,
     DATABASES = 379,
     DATAFILE_SYM = 380,
     DATA_SYM = 381,
     DATETIME = 382,
     DATE_ADD_INTERVAL = 383,
     DATE_SUB_INTERVAL = 384,
     DATE_SYM = 385,
     DAY_HOUR_SYM = 386,
     DAY_MICROSECOND_SYM = 387,
     DAY_MINUTE_SYM = 388,
     DAY_SECOND_SYM = 389,
     DAY_SYM = 390,
     DEALLOCATE_SYM = 391,
     DECIMAL_NUM = 392,
     DECIMAL_SYM = 393,
     DECLARE_SYM = 394,
     DEFAULT = 395,
     DEFINER_SYM = 396,
     DELAYED_SYM = 397,
     DELAY_KEY_WRITE_SYM = 398,
     DELETE_SYM = 399,
     DESC = 400,
     DESCRIBE = 401,
     DES_KEY_FILE = 402,
     DETERMINISTIC_SYM = 403,
     DIAGNOSTICS_SYM = 404,
     DIRECTORY_SYM = 405,
     DISABLE_SYM = 406,
     DISCARD = 407,
     DISK_SYM = 408,
     DISTINCT = 409,
     DIV_SYM = 410,
     DOUBLE_SYM = 411,
     DO_SYM = 412,
     DROP = 413,
     DUAL_SYM = 414,
     DUMPFILE = 415,
     DUPLICATE_SYM = 416,
     DYNAMIC_SYM = 417,
     EACH_SYM = 418,
     ELSE = 419,
     ELSEIF_SYM = 420,
     ENABLE_SYM = 421,
     ENCLOSED = 422,
     END = 423,
     ENDS_SYM = 424,
     END_OF_INPUT = 425,
     ENGINES_SYM = 426,
     ENGINE_SYM = 427,
     ENUM = 428,
     EQ = 429,
     EQUAL_SYM = 430,
     ERROR_SYM = 431,
     ERRORS = 432,
     ESCAPED = 433,
     ESCAPE_SYM = 434,
     EVENTS_SYM = 435,
     EVENT_SYM = 436,
     EVERY_SYM = 437,
     EXCHANGE_SYM = 438,
     EXAMINED_SYM = 439,
     EXECUTE_SYM = 440,
     EXISTS = 441,
     EXIT_SYM = 442,
     EXPANSION_SYM = 443,
     EXTENDED_SYM = 444,
     EXTENT_SIZE_SYM = 445,
     EXTRACT_SYM = 446,
     FALSE_SYM = 447,
     FAST_SYM = 448,
     FAULTS_SYM = 449,
     FETCH_SYM = 450,
     FILE_SYM = 451,
     FIRST_SYM = 452,
     FIXED_SYM = 453,
     FLOAT_NUM = 454,
     FLOAT_SYM = 455,
     FLUSH_SYM = 456,
     FORCE_SYM = 457,
     FOREIGN = 458,
     FOR_SYM = 459,
     FOUND_SYM = 460,
     FROM = 461,
     FULL = 462,
     FULLTEXT_SYM = 463,
     FUNCTION_SYM = 464,
     GE = 465,
     GENERAL = 466,
     GENERATED_SYM = 467,
     GEOMETRYCOLLECTION = 468,
     GEOMETRY_SYM = 469,
     GET_FORMAT = 470,
     GET_SYM = 471,
     GLOBAL_SYM = 472,
     GRANT = 473,
     GRANTS = 474,
     GROUP_SYM = 475,
     GROUP_CONCAT_SYM = 476,
     GT_SYM = 477,
     HANDLER_SYM = 478,
     HARD_SYM = 479,
     HASH_SYM = 480,
     HAVING = 481,
     HELP_SYM = 482,
     HEX_NUM = 483,
     HEX_STRING = 484,
     HIGH_PRIORITY = 485,
     HOST_SYM = 486,
     HOSTS_SYM = 487,
     HOUR_MICROSECOND_SYM = 488,
     HOUR_MINUTE_SYM = 489,
     HOUR_SECOND_SYM = 490,
     HOUR_SYM = 491,
     IDENT = 492,
     IDENTIFIED_SYM = 493,
     IDENT_QUOTED = 494,
     IF = 495,
     IGNORE_SYM = 496,
     IGNORE_SERVER_IDS_SYM = 497,
     IMPORT = 498,
     INDEXES = 499,
     INDEX_SYM = 500,
     INDEX_STATS_SYM = 501,
     INFILE = 502,
     INITIAL_SIZE_SYM = 503,
     INNER_SYM = 504,
     INOUT_SYM = 505,
     INSENSITIVE_SYM = 506,
     INSERT = 507,
     INSERT_METHOD = 508,
     INSTALL_SYM = 509,
     INTERVAL_SYM = 510,
     INTO = 511,
     INT_SYM = 512,
     INVOKER_SYM = 513,
     IN_SYM = 514,
     IO_SYM = 515,
     IPC_SYM = 516,
     IS = 517,
     ISOLATION = 518,
     ISSUER_SYM = 519,
     ITERATE_SYM = 520,
     JOIN_SYM = 521,
     KEYS = 522,
     KEY_BLOCK_SIZE = 523,
     KEY_SYM = 524,
     KILL_SYM = 525,
     LANGUAGE_SYM = 526,
     LAST_SYM = 527,
     LAST_VALUE = 528,
     LE = 529,
     LEADING = 530,
     LEAVES = 531,
     LEAVE_SYM = 532,
     LEFT = 533,
     LESS_SYM = 534,
     LEVEL_SYM = 535,
     LEX_HOSTNAME = 536,
     LIKE = 537,
     LIMIT = 538,
     LINEAR_SYM = 539,
     LINES = 540,
     LINESTRING = 541,
     LIST_SYM = 542,
     LOAD = 543,
     LOCAL_SYM = 544,
     LOCATOR_SYM = 545,
     LOCKS_SYM = 546,
     LOCK_SYM = 547,
     LOGFILE_SYM = 548,
     LOGS_SYM = 549,
     LONGBLOB = 550,
     LONGTEXT = 551,
     LONG_NUM = 552,
     LONG_SYM = 553,
     LOOP_SYM = 554,
     LOW_PRIORITY = 555,
     LT = 556,
     MASTER_CONNECT_RETRY_SYM = 557,
     MASTER_GTID_POS_SYM = 558,
     MASTER_HOST_SYM = 559,
     MASTER_LOG_FILE_SYM = 560,
     MASTER_LOG_POS_SYM = 561,
     MASTER_PASSWORD_SYM = 562,
     MASTER_PORT_SYM = 563,
     MASTER_SERVER_ID_SYM = 564,
     MASTER_SSL_CAPATH_SYM = 565,
     MASTER_SSL_CA_SYM = 566,
     MASTER_SSL_CERT_SYM = 567,
     MASTER_SSL_CIPHER_SYM = 568,
     MASTER_SSL_CRL_SYM = 569,
     MASTER_SSL_CRLPATH_SYM = 570,
     MASTER_SSL_KEY_SYM = 571,
     MASTER_SSL_SYM = 572,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 573,
     MASTER_SYM = 574,
     MASTER_USER_SYM = 575,
     MASTER_USE_GTID_SYM = 576,
     MASTER_HEARTBEAT_PERIOD_SYM = 577,
     MATCH = 578,
     MAX_CONNECTIONS_PER_HOUR = 579,
     MAX_QUERIES_PER_HOUR = 580,
     MAX_ROWS = 581,
     MAX_SIZE_SYM = 582,
     MAX_SYM = 583,
     MAX_UPDATES_PER_HOUR = 584,
     MAX_USER_CONNECTIONS_SYM = 585,
     MAX_VALUE_SYM = 586,
     MEDIUMBLOB = 587,
     MEDIUMINT = 588,
     MEDIUMTEXT = 589,
     MEDIUM_SYM = 590,
     MEMORY_SYM = 591,
     MERGE_SYM = 592,
     MESSAGE_TEXT_SYM = 593,
     MICROSECOND_SYM = 594,
     MIGRATE_SYM = 595,
     MINUTE_MICROSECOND_SYM = 596,
     MINUTE_SECOND_SYM = 597,
     MINUTE_SYM = 598,
     MIN_ROWS = 599,
     MIN_SYM = 600,
     MODE_SYM = 601,
     MODIFIES_SYM = 602,
     MODIFY_SYM = 603,
     MOD_SYM = 604,
     MONTH_SYM = 605,
     MULTILINESTRING = 606,
     MULTIPOINT = 607,
     MULTIPOLYGON = 608,
     MUTEX_SYM = 609,
     MYSQL_ERRNO_SYM = 610,
     NAMES_SYM = 611,
     NAME_SYM = 612,
     NATIONAL_SYM = 613,
     NATURAL = 614,
     NCHAR_STRING = 615,
     NCHAR_SYM = 616,
     NDBCLUSTER_SYM = 617,
     NE = 618,
     NEG = 619,
     NEW_SYM = 620,
     NEXT_SYM = 621,
     NODEGROUP_SYM = 622,
     NONE_SYM = 623,
     NOT2_SYM = 624,
     NOT_SYM = 625,
     NOW_SYM = 626,
     NO_SYM = 627,
     NO_WAIT_SYM = 628,
     NO_WRITE_TO_BINLOG = 629,
     NULL_SYM = 630,
     NUM = 631,
     NUMBER_SYM = 632,
     NUMERIC_SYM = 633,
     NVARCHAR_SYM = 634,
     OFFSET_SYM = 635,
     OLD_PASSWORD = 636,
     ON = 637,
     ONE_SYM = 638,
     ONLY_SYM = 639,
     ONLINE_SYM = 640,
     OPEN_SYM = 641,
     OPTIMIZE = 642,
     OPTIONS_SYM = 643,
     OPTION = 644,
     OPTIONALLY = 645,
     OR2_SYM = 646,
     ORDER_SYM = 647,
     OR_OR_SYM = 648,
     OR_SYM = 649,
     OUTER = 650,
     OUTFILE = 651,
     OUT_SYM = 652,
     OWNER_SYM = 653,
     PACK_KEYS_SYM = 654,
     PAGE_SYM = 655,
     PAGE_CHECKSUM_SYM = 656,
     PARAM_MARKER = 657,
     PARSER_SYM = 658,
     PARSE_VCOL_EXPR_SYM = 659,
     PARTIAL = 660,
     PARTITION_SYM = 661,
     PARTITIONS_SYM = 662,
     PARTITIONING_SYM = 663,
     PASSWORD = 664,
     PERSISTENT_SYM = 665,
     PHASE_SYM = 666,
     PLUGINS_SYM = 667,
     PLUGIN_SYM = 668,
     POINT_SYM = 669,
     POLYGON = 670,
     PORT_SYM = 671,
     POSITION_SYM = 672,
     PRECISION = 673,
     PREPARE_SYM = 674,
     PRESERVE_SYM = 675,
     PREV_SYM = 676,
     PRIMARY_SYM = 677,
     PRIVILEGES = 678,
     PROCEDURE_SYM = 679,
     PROCESS = 680,
     PROCESSLIST_SYM = 681,
     PROFILE_SYM = 682,
     PROFILES_SYM = 683,
     PROXY_SYM = 684,
     PURGE = 685,
     QUARTER_SYM = 686,
     QUERY_SYM = 687,
     QUICK = 688,
     RANGE_SYM = 689,
     READS_SYM = 690,
     READ_ONLY_SYM = 691,
     READ_SYM = 692,
     READ_WRITE_SYM = 693,
     REAL = 694,
     REBUILD_SYM = 695,
     RECOVER_SYM = 696,
     REDOFILE_SYM = 697,
     REDO_BUFFER_SIZE_SYM = 698,
     REDUNDANT_SYM = 699,
     REFERENCES = 700,
     REGEXP = 701,
     RELAY = 702,
     RELAYLOG_SYM = 703,
     RELAY_LOG_FILE_SYM = 704,
     RELAY_LOG_POS_SYM = 705,
     RELAY_THREAD = 706,
     RELEASE_SYM = 707,
     RELOAD = 708,
     REMOVE_SYM = 709,
     RENAME = 710,
     REORGANIZE_SYM = 711,
     REPAIR = 712,
     REPEATABLE_SYM = 713,
     REPEAT_SYM = 714,
     REPLACE = 715,
     REPLICATION = 716,
     REQUIRE_SYM = 717,
     RESET_SYM = 718,
     RESIGNAL_SYM = 719,
     RESOURCES = 720,
     RESTORE_SYM = 721,
     RESTRICT = 722,
     RESUME_SYM = 723,
     RETURNED_SQLSTATE_SYM = 724,
     RETURNS_SYM = 725,
     RETURN_SYM = 726,
     REVOKE = 727,
     RIGHT = 728,
     ROLLBACK_SYM = 729,
     ROLLUP_SYM = 730,
     ROUTINE_SYM = 731,
     ROWS_SYM = 732,
     ROW_FORMAT_SYM = 733,
     ROW_SYM = 734,
     ROW_COUNT_SYM = 735,
     RTREE_SYM = 736,
     SAVEPOINT_SYM = 737,
     SCHEDULE_SYM = 738,
     SCHEMA_NAME_SYM = 739,
     SECOND_MICROSECOND_SYM = 740,
     SECOND_SYM = 741,
     SECURITY_SYM = 742,
     SELECT_SYM = 743,
     SENSITIVE_SYM = 744,
     SEPARATOR_SYM = 745,
     SERIALIZABLE_SYM = 746,
     SERIAL_SYM = 747,
     SESSION_SYM = 748,
     SERVER_SYM = 749,
     SERVER_OPTIONS = 750,
     SET = 751,
     SET_VAR = 752,
     SHARE_SYM = 753,
     SHIFT_LEFT = 754,
     SHIFT_RIGHT = 755,
     SHOW = 756,
     SHUTDOWN = 757,
     SIGNAL_SYM = 758,
     SIGNED_SYM = 759,
     SIMPLE_SYM = 760,
     SLAVE = 761,
     SLAVES = 762,
     SLAVE_POS_SYM = 763,
     SLOW = 764,
     SMALLINT = 765,
     SNAPSHOT_SYM = 766,
     SOCKET_SYM = 767,
     SOFT_SYM = 768,
     SONAME_SYM = 769,
     SOUNDS_SYM = 770,
     SOURCE_SYM = 771,
     SPATIAL_SYM = 772,
     SPECIFIC_SYM = 773,
     SQLEXCEPTION_SYM = 774,
     SQLSTATE_SYM = 775,
     SQLWARNING_SYM = 776,
     SQL_BIG_RESULT = 777,
     SQL_BUFFER_RESULT = 778,
     SQL_CACHE_SYM = 779,
     SQL_CALC_FOUND_ROWS = 780,
     SQL_NO_CACHE_SYM = 781,
     SQL_SMALL_RESULT = 782,
     SQL_SYM = 783,
     SQL_THREAD = 784,
     SSL_SYM = 785,
     STARTING = 786,
     STARTS_SYM = 787,
     START_SYM = 788,
     STATS_AUTO_RECALC_SYM = 789,
     STATS_PERSISTENT_SYM = 790,
     STATS_SAMPLE_PAGES_SYM = 791,
     STATUS_SYM = 792,
     STDDEV_SAMP_SYM = 793,
     STD_SYM = 794,
     STOP_SYM = 795,
     STORAGE_SYM = 796,
     STRAIGHT_JOIN = 797,
     STRING_SYM = 798,
     SUBCLASS_ORIGIN_SYM = 799,
     SUBDATE_SYM = 800,
     SUBJECT_SYM = 801,
     SUBPARTITIONS_SYM = 802,
     SUBPARTITION_SYM = 803,
     SUBSTRING = 804,
     SUM_SYM = 805,
     SUPER_SYM = 806,
     SUSPEND_SYM = 807,
     SWAPS_SYM = 808,
     SWITCHES_SYM = 809,
     SYSDATE = 810,
     TABLES = 811,
     TABLESPACE = 812,
     TABLE_REF_PRIORITY = 813,
     TABLE_STATS_SYM = 814,
     TABLE_SYM = 815,
     TABLE_CHECKSUM_SYM = 816,
     TABLE_NAME_SYM = 817,
     TEMPORARY = 818,
     TEMPTABLE_SYM = 819,
     TERMINATED = 820,
     TEXT_STRING = 821,
     TEXT_SYM = 822,
     THAN_SYM = 823,
     THEN_SYM = 824,
     TIMESTAMP = 825,
     TIMESTAMP_ADD = 826,
     TIMESTAMP_DIFF = 827,
     TIME_SYM = 828,
     TINYBLOB = 829,
     TINYINT = 830,
     TINYTEXT = 831,
     TO_SYM = 832,
     TRAILING = 833,
     TRANSACTION_SYM = 834,
     TRANSACTIONAL_SYM = 835,
     TRIGGERS_SYM = 836,
     TRIGGER_SYM = 837,
     TRIM = 838,
     TRUE_SYM = 839,
     TRUNCATE_SYM = 840,
     TYPES_SYM = 841,
     TYPE_SYM = 842,
     UDF_RETURNS_SYM = 843,
     ULONGLONG_NUM = 844,
     UNCOMMITTED_SYM = 845,
     UNDEFINED_SYM = 846,
     UNDERSCORE_CHARSET = 847,
     UNDOFILE_SYM = 848,
     UNDO_BUFFER_SIZE_SYM = 849,
     UNDO_SYM = 850,
     UNICODE_SYM = 851,
     UNINSTALL_SYM = 852,
     UNION_SYM = 853,
     UNIQUE_SYM = 854,
     UNKNOWN_SYM = 855,
     UNLOCK_SYM = 856,
     UNSIGNED = 857,
     UNTIL_SYM = 858,
     UPDATE_SYM = 859,
     UPGRADE_SYM = 860,
     USAGE = 861,
     USER = 862,
     USER_STATS_SYM = 863,
     USE_FRM = 864,
     USE_SYM = 865,
     USING = 866,
     UTC_DATE_SYM = 867,
     UTC_TIMESTAMP_SYM = 868,
     UTC_TIME_SYM = 869,
     VALUES = 870,
     VALUE_SYM = 871,
     VARBINARY = 872,
     VARCHAR = 873,
     VARIABLES = 874,
     VARIANCE_SYM = 875,
     VARYING = 876,
     VAR_SAMP_SYM = 877,
     VIA_SYM = 878,
     VIEW_SYM = 879,
     VIRTUAL_SYM = 880,
     WAIT_SYM = 881,
     WARNINGS = 882,
     WEEK_SYM = 883,
     WHEN_SYM = 884,
     WHERE = 885,
     WHILE_SYM = 886,
     WITH = 887,
     WITH_CUBE_SYM = 888,
     WITH_ROLLUP_SYM = 889,
     WORK_SYM = 890,
     WRAPPER_SYM = 891,
     WRITE_SYM = 892,
     X509_SYM = 893,
     XA_SYM = 894,
     XML_SYM = 895,
     XOR = 896,
     YEAR_MONTH_SYM = 897,
     YEAR_SYM = 898,
     ZEROFILL = 899,
     IMPOSSIBLE_ACTION = 900
   };
#endif
/* Tokens.  */
#define CCDB_OPENDB_SYM 258
#define CCDB_CLOSEDB_SYM 259
#define CCDB_PORT_SYM 260
#define CCDB_OPENTABLE_SYM 261
#define CCDB_SHOW_CCTABLES_SYM 262
#define CCDB_PUBLISH_STATUS_SYM 263
#define CCDB_SHOW_STATUS_SYM 264
#define CCDB_PUBLISH_SYM 265
#define CCDB_LOCK_CCTABLE_SYM 266
#define CCDB_UNLOCK_CCTABLE_SYM 267
#define ABORT_SYM 268
#define ACCESSIBLE_SYM 269
#define ACTION 270
#define ADD 271
#define ADDDATE_SYM 272
#define AFTER_SYM 273
#define AGAINST 274
#define AGGREGATE_SYM 275
#define ALGORITHM_SYM 276
#define ALL 277
#define ALTER 278
#define ALWAYS_SYM 279
#define ANALYZE_SYM 280
#define AND_AND_SYM 281
#define AND_SYM 282
#define ANY_SYM 283
#define AS 284
#define ASC 285
#define ASCII_SYM 286
#define ASENSITIVE_SYM 287
#define AT_SYM 288
#define AUTHORS_SYM 289
#define AUTOEXTEND_SIZE_SYM 290
#define AUTO_INC 291
#define AUTO_SYM 292
#define AVG_ROW_LENGTH 293
#define AVG_SYM 294
#define BACKUP_SYM 295
#define BEFORE_SYM 296
#define BEGIN_SYM 297
#define BETWEEN_SYM 298
#define BIGINT 299
#define BINARY 300
#define BINLOG_SYM 301
#define BIN_NUM 302
#define BIT_AND 303
#define BIT_OR 304
#define BIT_SYM 305
#define BIT_XOR 306
#define BLOB_SYM 307
#define BLOCK_SYM 308
#define BOOLEAN_SYM 309
#define BOOL_SYM 310
#define BOTH 311
#define BTREE_SYM 312
#define BY 313
#define BYTE_SYM 314
#define CACHE_SYM 315
#define CALL_SYM 316
#define CASCADE 317
#define CASCADED 318
#define CASE_SYM 319
#define CAST_SYM 320
#define CATALOG_NAME_SYM 321
#define CHAIN_SYM 322
#define CHANGE 323
#define CHANGED 324
#define CHARSET 325
#define CHAR_SYM 326
#define CHECKPOINT_SYM 327
#define CHECKSUM_SYM 328
#define CHECK_SYM 329
#define CIPHER_SYM 330
#define CLASS_ORIGIN_SYM 331
#define CLIENT_SYM 332
#define CLIENT_STATS_SYM 333
#define CLOSE_SYM 334
#define COALESCE 335
#define CODE_SYM 336
#define COLLATE_SYM 337
#define COLLATION_SYM 338
#define COLUMNS 339
#define COLUMN_ADD_SYM 340
#define COLUMN_CHECK_SYM 341
#define COLUMN_CREATE_SYM 342
#define COLUMN_DELETE_SYM 343
#define COLUMN_GET_SYM 344
#define COLUMN_SYM 345
#define COLUMN_NAME_SYM 346
#define COMMENT_SYM 347
#define COMMITTED_SYM 348
#define COMMIT_SYM 349
#define COMPACT_SYM 350
#define COMPLETION_SYM 351
#define COMPRESSED_SYM 352
#define CONCURRENT 353
#define CONDITION_SYM 354
#define CONNECTION_SYM 355
#define CONSISTENT_SYM 356
#define CONSTRAINT 357
#define CONSTRAINT_CATALOG_SYM 358
#define CONSTRAINT_NAME_SYM 359
#define CONSTRAINT_SCHEMA_SYM 360
#define CONTAINS_SYM 361
#define CONTEXT_SYM 362
#define CONTINUE_SYM 363
#define CONTRIBUTORS_SYM 364
#define CONVERT_SYM 365
#define COUNT_SYM 366
#define CPU_SYM 367
#define CREATE 368
#define CROSS 369
#define CUBE_SYM 370
#define CURDATE 371
#define CURRENT_SYM 372
#define CURRENT_USER 373
#define CURRENT_POS_SYM 374
#define CURSOR_SYM 375
#define CURSOR_NAME_SYM 376
#define CURTIME 377
#define DATABASE 378
#define DATABASES 379
#define DATAFILE_SYM 380
#define DATA_SYM 381
#define DATETIME 382
#define DATE_ADD_INTERVAL 383
#define DATE_SUB_INTERVAL 384
#define DATE_SYM 385
#define DAY_HOUR_SYM 386
#define DAY_MICROSECOND_SYM 387
#define DAY_MINUTE_SYM 388
#define DAY_SECOND_SYM 389
#define DAY_SYM 390
#define DEALLOCATE_SYM 391
#define DECIMAL_NUM 392
#define DECIMAL_SYM 393
#define DECLARE_SYM 394
#define DEFAULT 395
#define DEFINER_SYM 396
#define DELAYED_SYM 397
#define DELAY_KEY_WRITE_SYM 398
#define DELETE_SYM 399
#define DESC 400
#define DESCRIBE 401
#define DES_KEY_FILE 402
#define DETERMINISTIC_SYM 403
#define DIAGNOSTICS_SYM 404
#define DIRECTORY_SYM 405
#define DISABLE_SYM 406
#define DISCARD 407
#define DISK_SYM 408
#define DISTINCT 409
#define DIV_SYM 410
#define DOUBLE_SYM 411
#define DO_SYM 412
#define DROP 413
#define DUAL_SYM 414
#define DUMPFILE 415
#define DUPLICATE_SYM 416
#define DYNAMIC_SYM 417
#define EACH_SYM 418
#define ELSE 419
#define ELSEIF_SYM 420
#define ENABLE_SYM 421
#define ENCLOSED 422
#define END 423
#define ENDS_SYM 424
#define END_OF_INPUT 425
#define ENGINES_SYM 426
#define ENGINE_SYM 427
#define ENUM 428
#define EQ 429
#define EQUAL_SYM 430
#define ERROR_SYM 431
#define ERRORS 432
#define ESCAPED 433
#define ESCAPE_SYM 434
#define EVENTS_SYM 435
#define EVENT_SYM 436
#define EVERY_SYM 437
#define EXCHANGE_SYM 438
#define EXAMINED_SYM 439
#define EXECUTE_SYM 440
#define EXISTS 441
#define EXIT_SYM 442
#define EXPANSION_SYM 443
#define EXTENDED_SYM 444
#define EXTENT_SIZE_SYM 445
#define EXTRACT_SYM 446
#define FALSE_SYM 447
#define FAST_SYM 448
#define FAULTS_SYM 449
#define FETCH_SYM 450
#define FILE_SYM 451
#define FIRST_SYM 452
#define FIXED_SYM 453
#define FLOAT_NUM 454
#define FLOAT_SYM 455
#define FLUSH_SYM 456
#define FORCE_SYM 457
#define FOREIGN 458
#define FOR_SYM 459
#define FOUND_SYM 460
#define FROM 461
#define FULL 462
#define FULLTEXT_SYM 463
#define FUNCTION_SYM 464
#define GE 465
#define GENERAL 466
#define GENERATED_SYM 467
#define GEOMETRYCOLLECTION 468
#define GEOMETRY_SYM 469
#define GET_FORMAT 470
#define GET_SYM 471
#define GLOBAL_SYM 472
#define GRANT 473
#define GRANTS 474
#define GROUP_SYM 475
#define GROUP_CONCAT_SYM 476
#define GT_SYM 477
#define HANDLER_SYM 478
#define HARD_SYM 479
#define HASH_SYM 480
#define HAVING 481
#define HELP_SYM 482
#define HEX_NUM 483
#define HEX_STRING 484
#define HIGH_PRIORITY 485
#define HOST_SYM 486
#define HOSTS_SYM 487
#define HOUR_MICROSECOND_SYM 488
#define HOUR_MINUTE_SYM 489
#define HOUR_SECOND_SYM 490
#define HOUR_SYM 491
#define IDENT 492
#define IDENTIFIED_SYM 493
#define IDENT_QUOTED 494
#define IF 495
#define IGNORE_SYM 496
#define IGNORE_SERVER_IDS_SYM 497
#define IMPORT 498
#define INDEXES 499
#define INDEX_SYM 500
#define INDEX_STATS_SYM 501
#define INFILE 502
#define INITIAL_SIZE_SYM 503
#define INNER_SYM 504
#define INOUT_SYM 505
#define INSENSITIVE_SYM 506
#define INSERT 507
#define INSERT_METHOD 508
#define INSTALL_SYM 509
#define INTERVAL_SYM 510
#define INTO 511
#define INT_SYM 512
#define INVOKER_SYM 513
#define IN_SYM 514
#define IO_SYM 515
#define IPC_SYM 516
#define IS 517
#define ISOLATION 518
#define ISSUER_SYM 519
#define ITERATE_SYM 520
#define JOIN_SYM 521
#define KEYS 522
#define KEY_BLOCK_SIZE 523
#define KEY_SYM 524
#define KILL_SYM 525
#define LANGUAGE_SYM 526
#define LAST_SYM 527
#define LAST_VALUE 528
#define LE 529
#define LEADING 530
#define LEAVES 531
#define LEAVE_SYM 532
#define LEFT 533
#define LESS_SYM 534
#define LEVEL_SYM 535
#define LEX_HOSTNAME 536
#define LIKE 537
#define LIMIT 538
#define LINEAR_SYM 539
#define LINES 540
#define LINESTRING 541
#define LIST_SYM 542
#define LOAD 543
#define LOCAL_SYM 544
#define LOCATOR_SYM 545
#define LOCKS_SYM 546
#define LOCK_SYM 547
#define LOGFILE_SYM 548
#define LOGS_SYM 549
#define LONGBLOB 550
#define LONGTEXT 551
#define LONG_NUM 552
#define LONG_SYM 553
#define LOOP_SYM 554
#define LOW_PRIORITY 555
#define LT 556
#define MASTER_CONNECT_RETRY_SYM 557
#define MASTER_GTID_POS_SYM 558
#define MASTER_HOST_SYM 559
#define MASTER_LOG_FILE_SYM 560
#define MASTER_LOG_POS_SYM 561
#define MASTER_PASSWORD_SYM 562
#define MASTER_PORT_SYM 563
#define MASTER_SERVER_ID_SYM 564
#define MASTER_SSL_CAPATH_SYM 565
#define MASTER_SSL_CA_SYM 566
#define MASTER_SSL_CERT_SYM 567
#define MASTER_SSL_CIPHER_SYM 568
#define MASTER_SSL_CRL_SYM 569
#define MASTER_SSL_CRLPATH_SYM 570
#define MASTER_SSL_KEY_SYM 571
#define MASTER_SSL_SYM 572
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 573
#define MASTER_SYM 574
#define MASTER_USER_SYM 575
#define MASTER_USE_GTID_SYM 576
#define MASTER_HEARTBEAT_PERIOD_SYM 577
#define MATCH 578
#define MAX_CONNECTIONS_PER_HOUR 579
#define MAX_QUERIES_PER_HOUR 580
#define MAX_ROWS 581
#define MAX_SIZE_SYM 582
#define MAX_SYM 583
#define MAX_UPDATES_PER_HOUR 584
#define MAX_USER_CONNECTIONS_SYM 585
#define MAX_VALUE_SYM 586
#define MEDIUMBLOB 587
#define MEDIUMINT 588
#define MEDIUMTEXT 589
#define MEDIUM_SYM 590
#define MEMORY_SYM 591
#define MERGE_SYM 592
#define MESSAGE_TEXT_SYM 593
#define MICROSECOND_SYM 594
#define MIGRATE_SYM 595
#define MINUTE_MICROSECOND_SYM 596
#define MINUTE_SECOND_SYM 597
#define MINUTE_SYM 598
#define MIN_ROWS 599
#define MIN_SYM 600
#define MODE_SYM 601
#define MODIFIES_SYM 602
#define MODIFY_SYM 603
#define MOD_SYM 604
#define MONTH_SYM 605
#define MULTILINESTRING 606
#define MULTIPOINT 607
#define MULTIPOLYGON 608
#define MUTEX_SYM 609
#define MYSQL_ERRNO_SYM 610
#define NAMES_SYM 611
#define NAME_SYM 612
#define NATIONAL_SYM 613
#define NATURAL 614
#define NCHAR_STRING 615
#define NCHAR_SYM 616
#define NDBCLUSTER_SYM 617
#define NE 618
#define NEG 619
#define NEW_SYM 620
#define NEXT_SYM 621
#define NODEGROUP_SYM 622
#define NONE_SYM 623
#define NOT2_SYM 624
#define NOT_SYM 625
#define NOW_SYM 626
#define NO_SYM 627
#define NO_WAIT_SYM 628
#define NO_WRITE_TO_BINLOG 629
#define NULL_SYM 630
#define NUM 631
#define NUMBER_SYM 632
#define NUMERIC_SYM 633
#define NVARCHAR_SYM 634
#define OFFSET_SYM 635
#define OLD_PASSWORD 636
#define ON 637
#define ONE_SYM 638
#define ONLY_SYM 639
#define ONLINE_SYM 640
#define OPEN_SYM 641
#define OPTIMIZE 642
#define OPTIONS_SYM 643
#define OPTION 644
#define OPTIONALLY 645
#define OR2_SYM 646
#define ORDER_SYM 647
#define OR_OR_SYM 648
#define OR_SYM 649
#define OUTER 650
#define OUTFILE 651
#define OUT_SYM 652
#define OWNER_SYM 653
#define PACK_KEYS_SYM 654
#define PAGE_SYM 655
#define PAGE_CHECKSUM_SYM 656
#define PARAM_MARKER 657
#define PARSER_SYM 658
#define PARSE_VCOL_EXPR_SYM 659
#define PARTIAL 660
#define PARTITION_SYM 661
#define PARTITIONS_SYM 662
#define PARTITIONING_SYM 663
#define PASSWORD 664
#define PERSISTENT_SYM 665
#define PHASE_SYM 666
#define PLUGINS_SYM 667
#define PLUGIN_SYM 668
#define POINT_SYM 669
#define POLYGON 670
#define PORT_SYM 671
#define POSITION_SYM 672
#define PRECISION 673
#define PREPARE_SYM 674
#define PRESERVE_SYM 675
#define PREV_SYM 676
#define PRIMARY_SYM 677
#define PRIVILEGES 678
#define PROCEDURE_SYM 679
#define PROCESS 680
#define PROCESSLIST_SYM 681
#define PROFILE_SYM 682
#define PROFILES_SYM 683
#define PROXY_SYM 684
#define PURGE 685
#define QUARTER_SYM 686
#define QUERY_SYM 687
#define QUICK 688
#define RANGE_SYM 689
#define READS_SYM 690
#define READ_ONLY_SYM 691
#define READ_SYM 692
#define READ_WRITE_SYM 693
#define REAL 694
#define REBUILD_SYM 695
#define RECOVER_SYM 696
#define REDOFILE_SYM 697
#define REDO_BUFFER_SIZE_SYM 698
#define REDUNDANT_SYM 699
#define REFERENCES 700
#define REGEXP 701
#define RELAY 702
#define RELAYLOG_SYM 703
#define RELAY_LOG_FILE_SYM 704
#define RELAY_LOG_POS_SYM 705
#define RELAY_THREAD 706
#define RELEASE_SYM 707
#define RELOAD 708
#define REMOVE_SYM 709
#define RENAME 710
#define REORGANIZE_SYM 711
#define REPAIR 712
#define REPEATABLE_SYM 713
#define REPEAT_SYM 714
#define REPLACE 715
#define REPLICATION 716
#define REQUIRE_SYM 717
#define RESET_SYM 718
#define RESIGNAL_SYM 719
#define RESOURCES 720
#define RESTORE_SYM 721
#define RESTRICT 722
#define RESUME_SYM 723
#define RETURNED_SQLSTATE_SYM 724
#define RETURNS_SYM 725
#define RETURN_SYM 726
#define REVOKE 727
#define RIGHT 728
#define ROLLBACK_SYM 729
#define ROLLUP_SYM 730
#define ROUTINE_SYM 731
#define ROWS_SYM 732
#define ROW_FORMAT_SYM 733
#define ROW_SYM 734
#define ROW_COUNT_SYM 735
#define RTREE_SYM 736
#define SAVEPOINT_SYM 737
#define SCHEDULE_SYM 738
#define SCHEMA_NAME_SYM 739
#define SECOND_MICROSECOND_SYM 740
#define SECOND_SYM 741
#define SECURITY_SYM 742
#define SELECT_SYM 743
#define SENSITIVE_SYM 744
#define SEPARATOR_SYM 745
#define SERIALIZABLE_SYM 746
#define SERIAL_SYM 747
#define SESSION_SYM 748
#define SERVER_SYM 749
#define SERVER_OPTIONS 750
#define SET 751
#define SET_VAR 752
#define SHARE_SYM 753
#define SHIFT_LEFT 754
#define SHIFT_RIGHT 755
#define SHOW 756
#define SHUTDOWN 757
#define SIGNAL_SYM 758
#define SIGNED_SYM 759
#define SIMPLE_SYM 760
#define SLAVE 761
#define SLAVES 762
#define SLAVE_POS_SYM 763
#define SLOW 764
#define SMALLINT 765
#define SNAPSHOT_SYM 766
#define SOCKET_SYM 767
#define SOFT_SYM 768
#define SONAME_SYM 769
#define SOUNDS_SYM 770
#define SOURCE_SYM 771
#define SPATIAL_SYM 772
#define SPECIFIC_SYM 773
#define SQLEXCEPTION_SYM 774
#define SQLSTATE_SYM 775
#define SQLWARNING_SYM 776
#define SQL_BIG_RESULT 777
#define SQL_BUFFER_RESULT 778
#define SQL_CACHE_SYM 779
#define SQL_CALC_FOUND_ROWS 780
#define SQL_NO_CACHE_SYM 781
#define SQL_SMALL_RESULT 782
#define SQL_SYM 783
#define SQL_THREAD 784
#define SSL_SYM 785
#define STARTING 786
#define STARTS_SYM 787
#define START_SYM 788
#define STATS_AUTO_RECALC_SYM 789
#define STATS_PERSISTENT_SYM 790
#define STATS_SAMPLE_PAGES_SYM 791
#define STATUS_SYM 792
#define STDDEV_SAMP_SYM 793
#define STD_SYM 794
#define STOP_SYM 795
#define STORAGE_SYM 796
#define STRAIGHT_JOIN 797
#define STRING_SYM 798
#define SUBCLASS_ORIGIN_SYM 799
#define SUBDATE_SYM 800
#define SUBJECT_SYM 801
#define SUBPARTITIONS_SYM 802
#define SUBPARTITION_SYM 803
#define SUBSTRING 804
#define SUM_SYM 805
#define SUPER_SYM 806
#define SUSPEND_SYM 807
#define SWAPS_SYM 808
#define SWITCHES_SYM 809
#define SYSDATE 810
#define TABLES 811
#define TABLESPACE 812
#define TABLE_REF_PRIORITY 813
#define TABLE_STATS_SYM 814
#define TABLE_SYM 815
#define TABLE_CHECKSUM_SYM 816
#define TABLE_NAME_SYM 817
#define TEMPORARY 818
#define TEMPTABLE_SYM 819
#define TERMINATED 820
#define TEXT_STRING 821
#define TEXT_SYM 822
#define THAN_SYM 823
#define THEN_SYM 824
#define TIMESTAMP 825
#define TIMESTAMP_ADD 826
#define TIMESTAMP_DIFF 827
#define TIME_SYM 828
#define TINYBLOB 829
#define TINYINT 830
#define TINYTEXT 831
#define TO_SYM 832
#define TRAILING 833
#define TRANSACTION_SYM 834
#define TRANSACTIONAL_SYM 835
#define TRIGGERS_SYM 836
#define TRIGGER_SYM 837
#define TRIM 838
#define TRUE_SYM 839
#define TRUNCATE_SYM 840
#define TYPES_SYM 841
#define TYPE_SYM 842
#define UDF_RETURNS_SYM 843
#define ULONGLONG_NUM 844
#define UNCOMMITTED_SYM 845
#define UNDEFINED_SYM 846
#define UNDERSCORE_CHARSET 847
#define UNDOFILE_SYM 848
#define UNDO_BUFFER_SIZE_SYM 849
#define UNDO_SYM 850
#define UNICODE_SYM 851
#define UNINSTALL_SYM 852
#define UNION_SYM 853
#define UNIQUE_SYM 854
#define UNKNOWN_SYM 855
#define UNLOCK_SYM 856
#define UNSIGNED 857
#define UNTIL_SYM 858
#define UPDATE_SYM 859
#define UPGRADE_SYM 860
#define USAGE 861
#define USER 862
#define USER_STATS_SYM 863
#define USE_FRM 864
#define USE_SYM 865
#define USING 866
#define UTC_DATE_SYM 867
#define UTC_TIMESTAMP_SYM 868
#define UTC_TIME_SYM 869
#define VALUES 870
#define VALUE_SYM 871
#define VARBINARY 872
#define VARCHAR 873
#define VARIABLES 874
#define VARIANCE_SYM 875
#define VARYING 876
#define VAR_SAMP_SYM 877
#define VIA_SYM 878
#define VIEW_SYM 879
#define VIRTUAL_SYM 880
#define WAIT_SYM 881
#define WARNINGS 882
#define WEEK_SYM 883
#define WHEN_SYM 884
#define WHERE 885
#define WHILE_SYM 886
#define WITH 887
#define WITH_CUBE_SYM 888
#define WITH_ROLLUP_SYM 889
#define WORK_SYM 890
#define WRAPPER_SYM 891
#define WRITE_SYM 892
#define X509_SYM 893
#define XA_SYM 894
#define XML_SYM 895
#define XOR 896
#define YEAR_MONTH_SYM 897
#define YEAR_SYM 898
#define ZEROFILL 899
#define IMPOSSIBLE_ACTION 900



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{
/* Line 387 of yacc.c  */
#line 899 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;


/* Line 387 of yacc.c  */
#line 2344 "/opt/mariadb.git/trunk/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int MYSQLparse (void *YYPARSE_PARAM);
#else
int MYSQLparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int MYSQLparse (void);
#else
int MYSQLparse ();
#endif
#endif /* ! YYPARSE_PARAM */

#endif /* !YY_MYSQL_OPT_MARIADB_GIT_TRUNK_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
/* Line 390 of yacc.c  */
#line 959 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

/* Line 390 of yacc.c  */
#line 2375 "/opt/mariadb.git/trunk/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef __attribute__
/* This feature is available in gcc versions 2.5 and later.  */
# if (! defined __GNUC__ || __GNUC__ < 2 \
      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
#  define __attribute__(Spec) /* empty */
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif


/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(N) (N)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  639
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   62200

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  665
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  979
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2774
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4690

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   900

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   658,     2,     2,     2,   652,   647,     2,
     655,   656,   650,   649,   657,   648,   663,   651,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   664,   661,
       2,     2,     2,     2,   662,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   653,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   659,   646,   660,   654,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   125,   127,   129,   131,   133,   135,   137,   139,
     141,   143,   145,   149,   151,   153,   158,   160,   163,   164,
     169,   170,   173,   177,   179,   182,   183,   187,   188,   195,
     197,   201,   205,   209,   213,   217,   221,   225,   229,   233,
     237,   241,   245,   249,   253,   257,   261,   267,   269,   270,
     272,   276,   278,   282,   286,   290,   294,   298,   302,   306,
     307,   309,   311,   312,   320,   321,   322,   338,   339,   340,
     356,   357,   358,   374,   375,   382,   383,   387,   392,   397,
     401,   404,   415,   417,   421,   424,   427,   430,   433,   436,
     439,   442,   443,   457,   458,   465,   468,   469,   471,   475,
     477,   478,   481,   482,   485,   486,   488,   492,   497,   498,
     501,   502,   505,   507,   509,   511,   513,   515,   517,   519,
     521,   523,   525,   527,   529,   531,   532,   536,   538,   539,
     542,   543,   546,   549,   552,   555,   558,   562,   566,   568,
     570,   572,   575,   579,   583,   584,   589,   590,   594,   595,
     597,   601,   603,   604,   606,   610,   612,   613,   617,   618,
     620,   624,   626,   631,   632,   634,   636,   638,   639,   643,
     646,   650,   651,   655,   656,   662,   668,   669,   677,   683,
     684,   687,   689,   691,   693,   697,   699,   701,   703,   707,
     708,   710,   712,   714,   716,   719,   721,   725,   727,   729,
     730,   732,   733,   736,   740,   746,   748,   750,   752,   754,
     756,   758,   760,   762,   764,   766,   768,   770,   772,   774,
     776,   780,   785,   786,   788,   790,   794,   796,   800,   804,
     806,   809,   811,   813,   815,   817,   821,   825,   827,   829,
     831,   833,   835,   837,   839,   841,   843,   845,   847,   849,
     851,   853,   857,   858,   861,   863,   865,   867,   869,   871,
     873,   875,   877,   879,   881,   883,   885,   887,   888,   894,
     895,   898,   899,   903,   904,   907,   910,   913,   916,   917,
     924,   927,   928,   931,   933,   935,   939,   940,   941,   942,
     950,   951,   954,   957,   959,   961,   962,   963,   972,   973,
     980,   982,   985,   987,   990,   991,   992,   999,  1000,  1001,
    1008,  1009,  1012,  1013,  1019,  1020,  1022,  1023,  1029,  1030,
    1033,  1034,  1040,  1045,  1046,  1047,  1056,  1057,  1065,  1067,
    1069,  1071,  1073,  1075,  1078,  1083,  1089,  1090,  1095,  1100,
    1105,  1109,  1113,  1116,  1119,  1120,  1123,  1125,  1128,  1132,
    1134,  1136,  1138,  1140,  1142,  1145,  1149,  1151,  1153,  1155,
    1157,  1159,  1161,  1163,  1165,  1167,  1169,  1172,  1176,  1178,
    1180,  1182,  1184,  1186,  1188,  1190,  1193,  1197,  1199,  1201,
    1203,  1205,  1207,  1209,  1211,  1213,  1215,  1218,  1222,  1224,
    1226,  1228,  1231,  1234,  1237,  1239,  1241,  1243,  1245,  1248,
    1252,  1256,  1260,  1264,  1268,  1272,  1276,  1280,  1285,  1286,
    1288,  1290,  1292,  1294,  1296,  1297,  1305,  1309,  1310,  1316,
    1318,  1321,  1326,  1327,  1328,  1334,  1335,  1343,  1345,  1346,
    1348,  1349,  1354,  1355,  1356,  1360,  1366,  1372,  1373,  1378,
    1381,  1384,  1387,  1390,  1391,  1393,  1394,  1396,  1398,  1402,
    1404,  1409,  1415,  1421,  1422,  1425,  1426,  1427,  1435,  1436,
    1446,  1448,  1452,  1454,  1456,  1457,  1460,  1461,  1465,  1467,
    1471,  1472,  1479,  1481,  1482,  1483,  1489,  1490,  1495,  1497,
    1499,  1501,  1505,  1507,  1511,  1512,  1513,  1519,  1521,  1525,
    1527,  1529,  1530,  1534,  1536,  1540,  1541,  1546,  1548,  1549,
    1551,  1554,  1556,  1560,  1565,  1569,  1573,  1577,  1581,  1586,
    1591,  1595,  1596,  1597,  1604,  1605,  1607,  1608,  1610,  1612,
    1615,  1617,  1619,  1620,  1622,  1624,  1627,  1629,  1630,  1634,
    1635,  1637,  1639,  1642,  1644,  1647,  1651,  1655,  1659,  1663,
    1667,  1671,  1675,  1679,  1683,  1687,  1691,  1695,  1699,  1703,
    1707,  1711,  1715,  1719,  1723,  1727,  1731,  1732,  1739,  1741,
    1743,  1747,  1752,  1757,  1760,  1763,  1766,  1770,  1774,  1778,
    1782,  1786,  1790,  1794,  1799,  1804,  1806,  1808,  1810,  1812,
    1814,  1816,  1818,  1820,  1822,  1824,  1826,  1828,  1830,  1833,
    1835,  1837,  1839,  1841,  1843,  1845,  1849,  1851,  1853,  1856,
    1859,  1860,  1869,  1870,  1880,  1881,  1891,  1892,  1902,  1911,
    1914,  1915,  1917,  1922,  1923,  1925,  1928,  1929,  1933,  1936,
    1945,  1946,  1949,  1950,  1952,  1954,  1955,  1957,  1960,  1962,
    1964,  1967,  1970,  1975,  1979,  1983,  1987,  1991,  1993,  1996,
    1998,  2000,  2004,  2007,  2011,  2014,  2017,  2019,  2023,  2027,
    2030,  2034,  2036,  2039,  2042,  2045,  2047,  2050,  2052,  2054,
    2056,  2059,  2063,  2066,  2070,  2073,  2076,  2080,  2084,  2088,
    2089,  2096,  2097,  2104,  2107,  2109,  2111,  2113,  2115,  2117,
    2119,  2121,  2123,  2125,  2127,  2129,  2132,  2135,  2137,  2140,
    2142,  2145,  2149,  2152,  2154,  2156,  2158,  2160,  2162,  2164,
    2166,  2169,  2170,  2172,  2174,  2180,  2181,  2183,  2186,  2188,
    2190,  2192,  2194,  2198,  2202,  2206,  2210,  2211,  2213,  2214,
    2216,  2217,  2219,  2222,  2224,  2226,  2229,  2232,  2237,  2239,
    2243,  2246,  2248,  2251,  2254,  2257,  2261,  2265,  2269,  2273,
    2276,  2279,  2281,  2283,  2285,  2288,  2290,  2292,  2294,  2296,
    2298,  2299,  2302,  2304,  2306,  2308,  2310,  2312,  2313,  2316,
    2318,  2320,  2321,  2323,  2325,  2328,  2331,  2333,  2336,  2339,
    2340,  2342,  2344,  2346,  2350,  2352,  2356,  2357,  2359,  2360,
    2362,  2368,  2369,  2373,  2377,  2379,  2380,  2383,  2386,  2389,
    2390,  2394,  2398,  2405,  2412,  2414,  2416,  2419,  2422,  2425,
    2427,  2430,  2433,  2435,  2437,  2438,  2440,  2442,  2444,  2446,
    2447,  2449,  2451,  2453,  2454,  2456,  2459,  2460,  2462,  2463,
    2465,  2466,  2468,  2470,  2473,  2475,  2478,  2480,  2483,  2486,
    2489,  2493,  2496,  2500,  2504,  2508,  2512,  2514,  2516,  2518,
    2520,  2524,  2526,  2528,  2530,  2535,  2538,  2540,  2545,  2546,
    2548,  2551,  2552,  2555,  2557,  2561,  2562,  2563,  2571,  2572,
    2578,  2586,  2587,  2593,  2594,  2600,  2601,  2607,  2608,  2613,
    2614,  2625,  2629,  2634,  2638,  2642,  2650,  2651,  2655,  2657,
    2662,  2663,  2667,  2668,  2671,  2672,  2674,  2675,  2678,  2681,
    2684,  2687,  2689,  2691,  2693,  2698,  2703,  2704,  2711,  2716,
    2717,  2723,  2724,  2731,  2736,  2740,  2742,  2750,  2753,  2755,
    2757,  2758,  2765,  2766,  2770,  2773,  2774,  2780,  2781,  2782,
    2789,  2791,  2795,  2797,  2799,  2803,  2807,  2811,  2814,  2819,
    2820,  2828,  2829,  2830,  2839,  2845,  2851,  2855,  2860,  2863,
    2866,  2873,  2879,  2883,  2889,  2891,  2893,  2895,  2897,  2899,
    2900,  2902,  2904,  2907,  2910,  2914,  2918,  2922,  2926,  2927,
    2929,  2930,  2932,  2933,  2936,  2937,  2939,  2942,  2944,  2946,
    2948,  2949,  2951,  2953,  2954,  2957,  2959,  2960,  2962,  2964,
    2966,  2967,  2974,  2975,  2981,  2986,  2991,  2995,  2996,  2998,
    3000,  3004,  3008,  3011,  3014,  3015,  3018,  3020,  3024,  3025,
    3027,  3029,  3030,  3033,  3038,  3040,  3044,  3045,  3051,  3052,
    3054,  3056,  3057,  3064,  3065,  3067,  3069,  3072,  3074,  3076,
    3078,  3079,  3085,  3087,  3091,  3094,  3095,  3099,  3101,  3106,
    3108,  3109,  3114,  3116,  3117,  3122,  3123,  3125,  3129,  3130,
    3132,  3136,  3138,  3140,  3143,  3144,  3150,  3151,  3153,  3155,
    3158,  3160,  3162,  3164,  3166,  3168,  3171,  3172,  3178,  3179,
    3181,  3183,  3184,  3189,  3194,  3198,  3204,  3206,  3210,  3214,
    3215,  3222,  3224,  3226,  3228,  3232,  3235,  3239,  3241,  3243,
    3244,  3251,  3253,  3255,  3257,  3261,  3265,  3270,  3271,  3278,
    3279,  3282,  3283,  3288,  3289,  3292,  3294,  3297,  3302,  3305,
    3309,  3312,  3316,  3317,  3321,  3322,  3323,  3330,  3333,  3335,
    3337,  3340,  3343,  3352,  3357,  3358,  3360,  3363,  3365,  3367,
    3369,  3371,  3372,  3375,  3380,  3384,  3386,  3388,  3392,  3397,
    3398,  3399,  3400,  3403,  3406,  3408,  3410,  3411,  3414,  3418,
    3419,  3422,  3426,  3427,  3430,  3434,  3438,  3442,  3445,  3449,
    3454,  3458,  3463,  3467,  3472,  3474,  3478,  3483,  3487,  3491,
    3498,  3500,  3506,  3513,  3519,  3527,  3534,  3543,  3549,  3556,
    3561,  3566,  3572,  3576,  3581,  3583,  3587,  3591,  3595,  3599,
    3603,  3607,  3613,  3619,  3623,  3627,  3631,  3635,  3639,  3643,
    3645,  3647,  3649,  3651,  3653,  3655,  3657,  3659,  3661,  3663,
    3665,  3667,  3669,  3671,  3673,  3675,  3677,  3678,  3681,  3683,
    3686,  3688,  3690,  3692,  3695,  3698,  3700,  3702,  3705,  3708,
    3713,  3715,  3719,  3721,  3723,  3725,  3727,  3729,  3733,  3735,
    3737,  3739,  3741,  3745,  3748,  3751,  3754,  3757,  3761,  3765,
    3771,  3778,  3783,  3788,  3796,  3799,  3806,  3812,  3819,  3826,
    3831,  3836,  3842,  3847,  3854,  3857,  3862,  3867,  3872,  3883,
    3890,  3899,  3906,  3911,  3916,  3923,  3928,  3933,  3938,  3945,
    3950,  3958,  3966,  3974,  3981,  3988,  3995,  4002,  4006,  4011,
    4018,  4027,  4030,  4033,  4042,  4051,  4058,  4065,  4068,  4075,
    4082,  4091,  4100,  4107,  4116,  4123,  4126,  4135,  4144,  4147,
    4150,  4153,  4160,  4167,  4172,  4177,  4186,  4191,  4196,  4201,
    4206,  4210,  4219,  4224,  4229,  4236,  4241,  4246,  4251,  4258,
    4267,  4271,  4278,  4283,  4290,  4292,  4299,  4304,  4309,  4314,
    4319,  4324,  4331,  4336,  4337,  4343,  4350,  4353,  4357,  4358,
    4363,  4364,  4368,  4369,  4371,  4373,  4377,  4382,  4387,  4393,
    4398,  4403,  4408,  4414,  4419,  4420,  4421,  4429,  4434,  4440,
    4445,  4451,  4456,  4461,  4466,  4471,  4476,  4482,  4483,  4492,
    4493,  4497,  4501,  4503,  4508,  4509,  4511,  4512,  4515,  4516,
    4517,  4522,  4527,  4530,  4531,  4535,  4538,  4542,  4545,  4547,
    4549,  4552,  4554,  4557,  4559,  4562,  4565,  4568,  4569,  4573,
    4574,  4576,  4578,  4582,  4584,  4588,  4590,  4594,  4595,  4597,
    4598,  4601,  4606,  4612,  4614,  4616,  4618,  4620,  4625,  4627,
    4631,  4635,  4636,  4643,  4644,  4653,  4658,  4659,  4668,  4669,
    4680,  4687,  4688,  4697,  4698,  4709,  4716,  4718,  4721,  4723,
    4725,  4728,  4729,  4731,  4737,  4738,  4744,  4748,  4754,  4757,
    4758,  4759,  4767,  4769,  4770,  4771,  4778,  4779,  4783,  4784,
    4785,  4791,  4792,  4794,  4795,  4797,  4798,  4801,  4805,  4809,
    4811,  4813,  4814,  4822,  4823,  4831,  4833,  4836,  4837,  4838,
    4841,  4842,  4845,  4846,  4848,  4850,  4852,  4854,  4858,  4860,
    4864,  4866,  4868,  4870,  4872,  4874,  4876,  4878,  4880,  4882,
    4884,  4886,  4888,  4890,  4892,  4894,  4896,  4898,  4900,  4902,
    4904,  4906,  4908,  4910,  4912,  4914,  4915,  4917,  4919,  4920,
    4923,  4924,  4926,  4927,  4928,  4932,  4933,  4934,  4938,  4941,
    4942,  4943,  4948,  4953,  4956,  4957,  4959,  4961,  4965,  4969,
    4971,  4974,  4975,  4977,  4978,  4983,  4988,  4991,  4992,  4994,
    4996,  4997,  4999,  5000,  5002,  5005,  5011,  5016,  5018,  5022,
    5026,  5028,  5030,  5032,  5034,  5036,  5038,  5039,  5042,  5046,
    5051,  5053,  5056,  5059,  5061,  5063,  5065,  5067,  5069,  5071,
    5073,  5075,  5077,  5079,  5081,  5083,  5085,  5087,  5089,  5091,
    5093,  5095,  5097,  5099,  5101,  5103,  5105,  5107,  5109,  5111,
    5112,  5113,  5120,  5121,  5123,  5127,  5129,  5133,  5134,  5137,
    5141,  5143,  5146,  5148,  5149,  5153,  5154,  5155,  5163,  5166,
    5168,  5169,  5173,  5174,  5182,  5183,  5191,  5196,  5203,  5208,
    5213,  5218,  5219,  5226,  5231,  5236,  5242,  5249,  5254,  5256,
    5260,  5262,  5265,  5267,  5271,  5273,  5274,  5277,  5278,  5280,
    5281,  5282,  5291,  5292,  5293,  5300,  5301,  5303,  5305,  5307,
    5309,  5311,  5314,  5316,  5318,  5320,  5324,  5329,  5330,  5334,
    5338,  5340,  5343,  5346,  5347,  5351,  5352,  5358,  5362,  5364,
    5368,  5370,  5374,  5376,  5378,  5379,  5381,  5382,  5387,  5388,
    5390,  5394,  5396,  5398,  5400,  5401,  5402,  5409,  5410,  5411,
    5423,  5427,  5429,  5433,  5437,  5439,  5443,  5444,  5446,  5447,
    5452,  5453,  5461,  5462,  5468,  5469,  5476,  5478,  5482,  5485,
    5490,  5491,  5494,  5495,  5498,  5500,  5502,  5504,  5505,  5510,
    5511,  5513,  5514,  5516,  5518,  5522,  5524,  5526,  5529,  5532,
    5535,  5537,  5539,  5541,  5543,  5544,  5548,  5551,  5554,  5555,
    5559,  5562,  5567,  5572,  5576,  5581,  5586,  5588,  5592,  5596,
    5600,  5604,  5611,  5614,  5617,  5618,  5625,  5626,  5634,  5640,
    5643,  5645,  5647,  5649,  5655,  5661,  5664,  5667,  5669,  5674,
    5678,  5681,  5685,  5688,  5691,  5693,  5697,  5702,  5706,  5710,
    5713,  5717,  5720,  5724,  5726,  5728,  5730,  5732,  5736,  5740,
    5744,  5748,  5752,  5756,  5760,  5764,  5768,  5770,  5772,  5774,
    5776,  5778,  5779,  5781,  5782,  5785,  5786,  5788,  5790,  5792,
    5793,  5796,  5797,  5800,  5801,  5804,  5807,  5808,  5813,  5814,
    5819,  5821,  5823,  5824,  5826,  5828,  5829,  5831,  5833,  5836,
    5839,  5842,  5845,  5848,  5851,  5854,  5855,  5860,  5861,  5862,
    5868,  5870,  5871,  5876,  5880,  5882,  5885,  5888,  5891,  5894,
    5897,  5901,  5904,  5906,  5908,  5910,  5912,  5915,  5917,  5919,
    5921,  5923,  5925,  5927,  5929,  5930,  5932,  5933,  5937,  5938,
    5942,  5946,  5948,  5949,  5954,  5956,  5959,  5960,  5962,  5963,
    5967,  5971,  5974,  5977,  5978,  5984,  5985,  5987,  5989,  5990,
    5992,  5994,  5996,  5999,  6001,  6004,  6005,  6006,  6007,  6008,
    6031,  6033,  6035,  6036,  6038,  6039,  6041,  6043,  6044,  6046,
    6048,  6049,  6052,  6055,  6057,  6061,  6066,  6070,  6074,  6075,
    6078,  6081,  6083,  6087,  6091,  6092,  6097,  6098,  6102,  6104,
    6106,  6107,  6111,  6114,  6118,  6120,  6122,  6125,  6126,  6129,
    6133,  6135,  6141,  6143,  6145,  6148,  6151,  6153,  6155,  6157,
    6159,  6161,  6163,  6166,  6169,  6171,  6173,  6175,  6177,  6179,
    6181,  6183,  6185,  6187,  6190,  6193,  6195,  6197,  6199,  6201,
    6203,  6206,  6209,  6212,  6214,  6216,  6220,  6226,  6228,  6230,
    6232,  6234,  6236,  6240,  6245,  6251,  6253,  6259,  6263,  6266,
    6268,  6272,  6275,  6278,  6283,  6285,  6287,  6289,  6291,  6293,
    6295,  6297,  6299,  6301,  6303,  6305,  6307,  6309,  6311,  6315,
    6318,  6320,  6322,  6324,  6326,  6328,  6330,  6332,  6334,  6336,
    6338,  6340,  6342,  6344,  6346,  6348,  6350,  6352,  6354,  6356,
    6358,  6360,  6362,  6364,  6366,  6368,  6370,  6372,  6374,  6376,
    6378,  6380,  6382,  6384,  6386,  6388,  6390,  6392,  6394,  6396,
    6398,  6400,  6402,  6404,  6406,  6408,  6410,  6412,  6414,  6416,
    6418,  6420,  6422,  6424,  6426,  6428,  6430,  6432,  6434,  6436,
    6438,  6440,  6442,  6444,  6446,  6448,  6450,  6452,  6454,  6456,
    6458,  6460,  6462,  6464,  6466,  6468,  6470,  6472,  6474,  6476,
    6478,  6480,  6482,  6484,  6486,  6488,  6490,  6492,  6494,  6496,
    6498,  6500,  6502,  6504,  6506,  6508,  6510,  6512,  6514,  6516,
    6518,  6520,  6522,  6524,  6526,  6528,  6530,  6532,  6534,  6536,
    6538,  6540,  6542,  6544,  6546,  6548,  6550,  6552,  6554,  6556,
    6558,  6560,  6562,  6564,  6566,  6568,  6570,  6572,  6574,  6576,
    6578,  6580,  6582,  6584,  6586,  6588,  6590,  6592,  6594,  6596,
    6598,  6600,  6602,  6604,  6606,  6608,  6610,  6612,  6614,  6616,
    6618,  6620,  6622,  6624,  6626,  6628,  6630,  6632,  6634,  6636,
    6638,  6640,  6642,  6644,  6646,  6648,  6650,  6652,  6654,  6656,
    6658,  6660,  6662,  6664,  6666,  6668,  6670,  6672,  6674,  6676,
    6678,  6680,  6682,  6684,  6686,  6688,  6690,  6692,  6694,  6696,
    6698,  6700,  6702,  6704,  6706,  6708,  6710,  6712,  6714,  6716,
    6718,  6720,  6722,  6724,  6726,  6728,  6730,  6732,  6734,  6736,
    6738,  6740,  6742,  6744,  6746,  6748,  6750,  6752,  6754,  6756,
    6758,  6760,  6762,  6764,  6766,  6768,  6770,  6772,  6774,  6776,
    6778,  6780,  6782,  6784,  6786,  6788,  6790,  6792,  6794,  6796,
    6798,  6800,  6802,  6804,  6806,  6808,  6810,  6812,  6814,  6816,
    6818,  6820,  6822,  6824,  6826,  6828,  6830,  6832,  6834,  6836,
    6838,  6840,  6842,  6844,  6846,  6848,  6850,  6852,  6854,  6856,
    6858,  6860,  6862,  6864,  6866,  6868,  6870,  6872,  6874,  6876,
    6878,  6880,  6882,  6884,  6886,  6888,  6890,  6892,  6894,  6896,
    6898,  6900,  6902,  6904,  6906,  6908,  6910,  6912,  6914,  6916,
    6918,  6920,  6922,  6924,  6926,  6928,  6930,  6932,  6934,  6936,
    6938,  6940,  6942,  6944,  6946,  6948,  6950,  6952,  6954,  6956,
    6958,  6960,  6962,  6964,  6966,  6968,  6970,  6972,  6974,  6976,
    6978,  6980,  6982,  6984,  6986,  6988,  6990,  6992,  6994,  6996,
    6998,  7000,  7002,  7004,  7006,  7008,  7010,  7012,  7014,  7016,
    7018,  7020,  7022,  7024,  7026,  7028,  7030,  7032,  7034,  7036,
    7038,  7040,  7042,  7044,  7045,  7049,  7050,  7054,  7055,  7059,
    7060,  7064,  7065,  7069,  7072,  7073,  7076,  7077,  7080,  7081,
    7086,  7087,  7091,  7093,  7095,  7097,  7099,  7100,  7102,  7104,
    7106,  7107,  7110,  7113,  7116,  7120,  7124,  7129,  7136,  7139,
    7143,  7147,  7151,  7157,  7159,  7163,  7167,  7169,  7171,  7175,
    7179,  7181,  7185,  7188,  7191,  7194,  7197,  7200,  7202,  7204,
    7209,  7214,  7216,  7218,  7220,  7222,  7224,  7225,  7230,  7232,
    7234,  7236,  7240,  7244,  7246,  7248,  7251,  7254,  7257,  7258,
    7262,  7267,  7271,  7272,  7280,  7282,  7285,  7287,  7289,  7291,
    7293,  7295,  7297,  7298,  7304,  7306,  7308,  7310,  7312,  7314,
    7318,  7325,  7332,  7339,  7347,  7353,  7357,  7366,  7375,  7384,
    7391,  7392,  7394,  7396,  7399,  7400,  7402,  7404,  7408,  7409,
    7413,  7414,  7418,  7419,  7423,  7424,  7428,  7430,  7432,  7434,
    7436,  7438,  7440,  7442,  7444,  7446,  7448,  7450,  7453,  7456,
    7458,  7462,  7465,  7468,  7471,  7474,  7477,  7480,  7483,  7486,
    7488,  7490,  7493,  7494,  7496,  7500,  7502,  7505,  7508,  7511,
    7513,  7517,  7521,  7523,  7525,  7529,  7531,  7535,  7537,  7539,
    7541,  7543,  7548,  7554,  7559,  7566,  7568,  7569,  7573,  7577,
    7579,  7581,  7582,  7585,  7588,  7591,  7594,  7595,  7598,  7599,
    7603,  7606,  7608,  7611,  7614,  7617,  7620,  7623,  7624,  7628,
    7629,  7631,  7632,  7636,  7639,  7640,  7642,  7645,  7646,  7648,
    7653,  7658,  7664,  7667,  7671,  7672,  7674,  7675,  7680,  7681,
    7683,  7685,  7686,  7688,  7689,  7692,  7695,  7697,  7698,  7700,
    7702,  7705,  7709,  7712,  7713,  7720,  7724,  7725,  7726,  7727,
    7729,  7732,  7734,  7736,  7738,  7740,  7742,  7744,  7746,  7748,
    7750,  7753,  7756,  7760,  7762,  7764,  7766,  7768,  7770,  7772,
    7774,  7776,  7778,  7780,  7782,  7784,  7786,  7787,  7791,  7793,
    7796,  7798,  7801,  7805,  7809,  7813,  7814,  7818,  7822,  7823,
    7831,  7832,  7836,  7838,  7842,  7843,  7847,  7850,  7855,  7856,
    7860,  7865,  7870,  7871,  7872,  7873,  7890,  7899,  7907,  7908,
    7909,  7910,  7911,  7912,  7928,  7929,  7930,  7931,  7932,  7945,
    7950,  7955,  7959,  7964,  7968,  7971,  7973,  7977,  7983,  7985,
    7987,  7988,  7990,  7992,  7993,  7996,  7997,  7998,  8002,  8003,
    8006,  8012,  8016,  8020,  8024
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     666,     0,    -1,   170,    -1,    -1,   669,   667,   661,   668,
      -1,   669,   170,    -1,    -1,   170,    -1,   670,    -1,  1571,
      -1,  1043,    -1,  1111,    -1,  1124,    -1,   724,    -1,   682,
      -1,  1125,    -1,  1103,    -1,  1577,    -1,   691,    -1,   671,
      -1,  1376,    -1,  1408,    -1,  1327,    -1,  1329,    -1,   675,
      -1,  1421,    -1,   760,    -1,  1543,    -1,  1534,    -1,   680,
      -1,  1340,    -1,  1641,    -1,  1643,    -1,  1138,    -1,  1441,
      -1,  1448,    -1,  1526,    -1,  1130,    -1,   968,    -1,   879,
      -1,  1145,    -1,   673,    -1,  1437,    -1,  1580,    -1,  1133,
      -1,  1106,    -1,  1343,    -1,  1431,    -1,   759,    -1,  1541,
      -1,  1578,    -1,  1579,    -1,  1157,    -1,  1499,    -1,   752,
      -1,  1394,    -1,  1446,    -1,  1090,    -1,  1093,    -1,  1387,
      -1,  1642,    -1,  1532,    -1,  1368,    -1,  1447,    -1,  1633,
      -1,  1418,    -1,  1417,    -1,  1416,    -1,  1419,    -1,  1414,
      -1,  1415,    -1,  1420,    -1,   672,   419,  1493,    -1,   136,
      -1,   158,    -1,   419,  1493,   206,   674,    -1,  1490,    -1,
     662,  1495,    -1,    -1,   185,  1493,   676,   677,    -1,    -1,
     611,   678,    -1,   678,   657,   679,    -1,   679,    -1,   662,
    1495,    -1,    -1,   227,   681,  1495,    -1,    -1,    68,   319,
     689,   577,   683,   684,    -1,   685,    -1,   684,   657,   685,
      -1,   304,   174,  1490,    -1,   320,   174,  1490,    -1,   307,
     174,  1490,    -1,   308,   174,  1306,    -1,   302,   174,  1306,
      -1,   317,   174,  1306,    -1,   311,   174,  1490,    -1,   310,
     174,  1490,    -1,   312,   174,  1490,    -1,   313,   174,  1490,
      -1,   316,   174,  1490,    -1,   318,   174,  1306,    -1,   314,
     174,  1490,    -1,   315,   174,  1490,    -1,   322,   174,  1477,
      -1,   242,   174,   655,   686,   656,    -1,   688,    -1,    -1,
     687,    -1,   686,   657,   687,    -1,  1306,    -1,   305,   174,
    1490,    -1,   306,   174,  1308,    -1,   449,   174,  1490,    -1,
     450,   174,  1306,    -1,   321,   174,   119,    -1,   321,   174,
     508,    -1,   321,   174,   372,    -1,    -1,   690,    -1,  1490,
      -1,    -1,   113,   930,   560,   933,  1486,   692,   867,    -1,
      -1,    -1,   113,  1020,   245,   933,  1493,  1024,   382,  1486,
     693,   655,  1037,   656,  1025,   694,  1077,    -1,    -1,    -1,
     113,  1021,   245,   933,  1493,  1023,   382,  1486,   695,   655,
    1037,   656,  1026,   696,  1077,    -1,    -1,    -1,   113,  1022,
     245,   933,  1493,  1023,   382,  1486,   697,   655,  1037,   656,
    1027,   698,  1077,    -1,    -1,   113,   123,   933,  1493,   699,
     927,    -1,    -1,   113,   700,  1599,    -1,   113,   607,   717,
    1559,    -1,   113,   293,   220,   830,    -1,   113,   557,   827,
      -1,   113,   701,    -1,   494,  1495,   203,   126,   636,  1495,
     388,   655,   702,   656,    -1,   703,    -1,   702,   657,   703,
      -1,   607,  1490,    -1,   231,  1490,    -1,   123,  1490,    -1,
     398,  1490,    -1,   409,  1490,    -1,   512,  1490,    -1,   416,
    1306,    -1,    -1,  1174,   181,   933,   718,   705,   382,   483,
     706,   711,   708,   713,   157,   714,    -1,    -1,   182,  1180,
    1276,   707,   709,   710,    -1,    33,  1180,    -1,    -1,   166,
      -1,   151,   382,   506,    -1,   151,    -1,    -1,   532,  1180,
      -1,    -1,   169,  1180,    -1,    -1,   712,    -1,   382,    96,
     420,    -1,   382,    96,   370,   420,    -1,    -1,    92,  1490,
      -1,    -1,   715,   716,    -1,   776,    -1,   778,    -1,   774,
      -1,   795,    -1,   813,    -1,   815,    -1,   810,    -1,   780,
      -1,   782,    -1,   783,    -1,   784,    -1,   785,    -1,   787,
      -1,    -1,  1493,   663,  1493,    -1,  1493,    -1,    -1,   719,
     721,    -1,    -1,   720,   722,    -1,    92,  1490,    -1,   271,
     528,    -1,   372,   528,    -1,   106,   528,    -1,   435,   528,
     126,    -1,   347,   528,   126,    -1,   723,    -1,   721,    -1,
     148,    -1,  1186,   148,    -1,   528,   487,   141,    -1,   528,
     487,   258,    -1,    -1,    61,   718,   725,   726,    -1,    -1,
     655,   727,   656,    -1,    -1,   728,    -1,   728,   657,  1180,
      -1,  1180,    -1,    -1,   730,    -1,   730,   657,   732,    -1,
     732,    -1,    -1,  1493,   731,   991,    -1,    -1,   734,    -1,
     734,   657,   735,    -1,   735,    -1,   736,   731,  1493,   991,
      -1,    -1,   259,    -1,   397,    -1,   250,    -1,    -1,   737,
     773,   661,    -1,   773,   661,    -1,   738,   773,   661,    -1,
      -1,   739,   740,   661,    -1,    -1,   139,   771,   741,   991,
     772,    -1,   139,  1493,    99,   204,   748,    -1,    -1,   139,
     745,   223,   204,   742,   746,   773,    -1,   139,  1493,   120,
     204,   743,    -1,    -1,   744,  1157,    -1,   187,    -1,   108,
      -1,   747,    -1,   746,   657,   747,    -1,   751,    -1,  1306,
      -1,   749,    -1,   520,   750,  1491,    -1,    -1,   616,    -1,
     748,    -1,  1493,    -1,   521,    -1,  1186,   205,    -1,   519,
      -1,   503,   753,   755,    -1,  1493,    -1,   749,    -1,    -1,
     753,    -1,    -1,   496,   756,    -1,   758,   174,   757,    -1,
     756,   657,   758,   174,   757,    -1,  1476,    -1,  1211,    -1,
    1482,    -1,    76,    -1,   544,    -1,   103,    -1,   105,    -1,
     104,    -1,    66,    -1,   484,    -1,   562,    -1,    91,    -1,
     121,    -1,   338,    -1,   355,    -1,   464,   754,   755,    -1,
     216,   761,   149,   762,    -1,    -1,   117,    -1,   763,    -1,
      99,   767,   768,    -1,   764,    -1,   763,   657,   764,    -1,
     765,   174,   766,    -1,  1493,    -1,   662,  1495,    -1,   377,
      -1,   480,    -1,   757,    -1,   769,    -1,   768,   657,   769,
      -1,   765,   174,   770,    -1,    76,    -1,   544,    -1,   103,
      -1,   105,    -1,   104,    -1,    66,    -1,   484,    -1,   562,
      -1,    91,    -1,   121,    -1,   338,    -1,   355,    -1,   469,
      -1,  1493,    -1,   771,   657,  1493,    -1,    -1,   140,  1180,
      -1,   776,    -1,   778,    -1,   774,    -1,   795,    -1,   813,
      -1,   815,    -1,   810,    -1,   780,    -1,   782,    -1,   783,
      -1,   784,    -1,   785,    -1,   787,    -1,    -1,   240,   775,
     790,   168,   240,    -1,    -1,   777,   670,    -1,    -1,   471,
     779,  1180,    -1,    -1,   781,   819,    -1,   277,  1494,    -1,
     265,  1494,    -1,   386,  1493,    -1,    -1,   195,   788,  1493,
     256,   786,   789,    -1,    79,  1493,    -1,    -1,   366,   206,
      -1,   206,    -1,  1493,    -1,   789,   657,  1493,    -1,    -1,
      -1,    -1,   791,  1180,   569,   792,   738,   793,   794,    -1,
      -1,   165,   790,    -1,   164,   738,    -1,   796,    -1,   799,
      -1,    -1,    -1,    64,   797,  1180,   798,   801,   809,   168,
      64,    -1,    -1,    64,   800,   802,   809,   168,    64,    -1,
     803,    -1,   801,   803,    -1,   806,    -1,   802,   806,    -1,
      -1,    -1,   629,   804,  1180,   805,   569,   738,    -1,    -1,
      -1,   629,   807,  1180,   808,   569,   738,    -1,    -1,   164,
     738,    -1,    -1,  1494,   664,   811,   819,   812,    -1,    -1,
    1494,    -1,    -1,  1494,   664,   814,   817,   812,    -1,    -1,
     816,   817,    -1,    -1,    42,   818,   739,   737,   168,    -1,
     299,   738,   168,   299,    -1,    -1,    -1,   631,   820,  1180,
     157,   821,   738,   168,   631,    -1,    -1,   459,   738,   603,
     822,  1180,   168,   459,    -1,    41,    -1,    18,    -1,   252,
      -1,   604,    -1,   144,    -1,   852,   854,    -1,   852,    68,
     849,   833,    -1,   852,    16,   849,   828,   837,    -1,    -1,
     610,   293,   220,  1493,    -1,   852,    16,   849,   840,    -1,
     852,   158,   849,   840,    -1,   853,   832,   843,    -1,   853,
     832,   846,    -1,    16,   850,    -1,    16,   851,    -1,    -1,
     834,   835,    -1,   836,    -1,   835,   836,    -1,   835,   657,
     836,    -1,   855,    -1,   856,    -1,   857,    -1,   838,    -1,
     839,    -1,   838,   839,    -1,   838,   657,   839,    -1,   855,
      -1,   856,    -1,   857,    -1,   858,    -1,   861,    -1,   863,
      -1,   865,    -1,   862,    -1,   841,    -1,   842,    -1,   841,
     842,    -1,   841,   657,   842,    -1,   855,    -1,   856,    -1,
     857,    -1,   863,    -1,   865,    -1,   844,    -1,   845,    -1,
     844,   845,    -1,   844,   657,   845,    -1,   855,    -1,   859,
      -1,   860,    -1,   861,    -1,   863,    -1,   865,    -1,   862,
      -1,   847,    -1,   848,    -1,   847,   848,    -1,   847,   657,
     848,    -1,   855,    -1,   863,    -1,   865,    -1,   125,  1490,
      -1,   593,  1490,    -1,   442,  1490,    -1,  1493,    -1,  1493,
      -1,   436,    -1,   438,    -1,   370,    14,    -1,   248,  1360,
     866,    -1,    35,  1360,   866,    -1,   327,  1360,   866,    -1,
     190,  1360,   866,    -1,   594,  1360,   866,    -1,   443,  1360,
     866,    -1,   367,  1360,  1307,    -1,    92,  1360,  1490,    -1,
    1401,   172,  1360,   941,    -1,    -1,   865,    -1,   626,    -1,
     373,    -1,  1307,    -1,   237,    -1,    -1,   655,   947,   656,
     868,   934,   874,   871,    -1,   934,   874,   871,    -1,    -1,
     655,   923,   656,   869,  1584,    -1,   870,    -1,   282,  1486,
      -1,   655,   282,  1486,   656,    -1,    -1,    -1,  1456,   926,
     923,   872,  1581,    -1,    -1,  1456,   926,   655,   923,   656,
     873,  1584,    -1,   875,    -1,    -1,   876,    -1,    -1,   406,
     878,   877,   881,    -1,    -1,    -1,   406,   880,   881,    -1,
      58,   882,   891,   892,   899,    -1,   884,   269,   655,   885,
     656,    -1,    -1,   884,   225,   883,   889,    -1,   434,   889,
      -1,   434,   888,    -1,   287,   889,    -1,   287,   888,    -1,
      -1,   284,    -1,    -1,   886,    -1,   887,    -1,   886,   657,
     887,    -1,  1493,    -1,    84,   655,   885,   656,    -1,   655,
    1174,   897,  1175,   656,    -1,   655,  1174,   897,  1175,   656,
      -1,    -1,   407,  1307,    -1,    -1,    -1,   548,    58,   884,
     225,   890,   893,   898,    -1,    -1,   548,    58,   884,   269,
     655,   895,   656,   894,   898,    -1,   896,    -1,   895,   657,
     896,    -1,  1493,    -1,  1183,    -1,    -1,   547,  1307,    -1,
      -1,   655,   900,   656,    -1,   901,    -1,   900,   657,   901,
      -1,    -1,   406,   902,   903,   904,   920,   915,    -1,  1493,
      -1,    -1,    -1,   615,   279,   568,   905,   907,    -1,    -1,
     615,   259,   906,   908,    -1,   331,    -1,   910,    -1,   910,
      -1,   655,   909,   656,    -1,   910,    -1,   909,   657,   910,
      -1,    -1,    -1,   655,   911,   913,   912,   656,    -1,   914,
      -1,   913,   657,   914,    -1,   331,    -1,  1183,    -1,    -1,
     655,   916,   656,    -1,   917,    -1,   916,   657,   917,    -1,
      -1,   548,   918,   919,   920,    -1,  1495,    -1,    -1,   921,
      -1,   921,   922,    -1,   922,    -1,   557,  1360,  1495,    -1,
    1401,   172,  1360,   941,    -1,   100,  1360,  1490,    -1,   367,
    1360,  1307,    -1,   326,  1360,  1309,    -1,   344,  1360,  1309,
      -1,   126,   150,  1360,  1490,    -1,   245,   150,  1360,  1490,
      -1,    92,  1360,  1490,    -1,    -1,    -1,   488,   924,  1168,
    1172,   925,   945,    -1,    -1,    29,    -1,    -1,   928,    -1,
     929,    -1,   928,   929,    -1,   940,    -1,   939,    -1,    -1,
     931,    -1,   932,    -1,   932,   931,    -1,   563,    -1,    -1,
     240,  1186,   186,    -1,    -1,   936,    -1,   937,    -1,   937,
     935,    -1,   937,    -1,   937,   936,    -1,   937,   657,   936,
      -1,   172,  1360,   941,    -1,   326,  1360,  1308,    -1,   344,
    1360,  1308,    -1,    38,  1360,  1306,    -1,   409,  1360,  1490,
      -1,    92,  1360,  1490,    -1,    36,  1360,  1308,    -1,   399,
    1360,  1306,    -1,   399,  1360,   140,    -1,   534,  1360,  1306,
      -1,   534,  1360,   140,    -1,   535,  1360,  1306,    -1,   535,
    1360,   140,    -1,   536,  1360,  1306,    -1,   536,  1360,   140,
      -1,    73,  1360,  1306,    -1,   561,  1360,  1306,    -1,   401,
    1360,  1312,    -1,   143,  1360,  1306,    -1,   478,  1360,   943,
      -1,    -1,   598,  1360,   938,   655,  1429,   656,    -1,   939,
      -1,   940,    -1,   253,  1360,   944,    -1,   126,   150,  1360,
    1490,    -1,   245,   150,  1360,  1490,    -1,   557,  1493,    -1,
     541,   153,    -1,   541,   336,    -1,   100,  1360,  1490,    -1,
     268,  1360,  1306,    -1,   580,  1360,  1312,    -1,  1489,  1359,
    1490,    -1,  1489,  1359,  1493,    -1,  1489,  1359,  1309,    -1,
    1489,  1359,   140,    -1,  1003,   994,  1360,   996,    -1,  1003,
      82,  1360,  1002,    -1,  1495,    -1,  1495,    -1,   140,    -1,
     198,    -1,   162,    -1,    97,    -1,   444,    -1,    95,    -1,
     400,    -1,   372,    -1,   197,    -1,   272,    -1,  1299,    -1,
    1167,  1171,    -1,   543,    -1,   439,    -1,   138,    -1,   257,
      -1,   948,    -1,   949,    -1,   948,   657,   949,    -1,   950,
      -1,   951,    -1,   960,   956,    -1,   960,  1009,    -1,    -1,
    1015,  1040,  1024,   655,  1037,   656,   952,  1025,    -1,    -1,
    1021,  1018,  1040,  1023,   655,  1037,   656,   953,  1026,    -1,
      -1,  1022,  1018,  1040,  1023,   655,  1037,   656,   954,  1027,
      -1,    -1,   958,  1016,  1039,  1024,   655,  1037,   656,   955,
    1025,    -1,   958,   203,   269,  1040,   655,  1037,   656,  1009,
      -1,   958,   957,    -1,    -1,   957,    -1,    74,   655,  1180,
     656,    -1,    -1,   959,    -1,   102,  1039,    -1,    -1,  1485,
     961,   962,    -1,   970,   988,    -1,   970,   963,    29,   655,
     969,   656,   964,   965,    -1,    -1,   212,    24,    -1,    -1,
     625,    -1,   410,    -1,    -1,   966,    -1,   966,   967,    -1,
     967,    -1,   599,    -1,   599,   269,    -1,    92,  1490,    -1,
     404,   655,   969,   656,    -1,  1174,  1180,  1175,    -1,   978,
     986,   982,    -1,   979,   987,   982,    -1,   200,   980,   982,
      -1,    50,    -1,    50,   985,    -1,    55,    -1,    54,    -1,
     974,   985,  1006,    -1,   974,  1006,    -1,   975,   985,  1007,
      -1,   975,  1007,    -1,    45,   985,    -1,    45,    -1,   976,
     985,  1006,    -1,   977,   985,  1007,    -1,   617,   985,    -1,
     643,   986,   982,    -1,   130,    -1,   573,   986,    -1,   570,
     986,    -1,   127,   986,    -1,   574,    -1,    52,   986,    -1,
     973,    -1,   332,    -1,   295,    -1,   298,   617,    -1,   298,
     976,  1006,    -1,   576,  1006,    -1,   567,   986,  1006,    -1,
     334,  1006,    -1,   296,  1006,    -1,   138,   980,   982,    -1,
     378,   980,   982,    -1,   198,   980,   982,    -1,    -1,   173,
     971,   655,  1042,   656,  1006,    -1,    -1,   496,   972,   655,
    1042,   656,  1006,    -1,   298,  1006,    -1,   492,    -1,   214,
      -1,   213,    -1,   414,    -1,   352,    -1,   286,    -1,   351,
      -1,   415,    -1,   353,    -1,    71,    -1,   361,    -1,   358,
      71,    -1,   974,   621,    -1,   618,    -1,   358,   618,    -1,
     379,    -1,   361,   618,    -1,   358,    71,   621,    -1,   361,
     621,    -1,   257,    -1,   575,    -1,   510,    -1,   333,    -1,
      44,    -1,   439,    -1,   156,    -1,   156,   418,    -1,    -1,
     985,    -1,   981,    -1,   655,   376,   657,   376,   656,    -1,
      -1,   983,    -1,   983,   984,    -1,   984,    -1,   504,    -1,
     602,    -1,   644,    -1,   655,   297,   656,    -1,   655,   589,
     656,    -1,   655,   137,   656,    -1,   655,   376,   656,    -1,
      -1,   985,    -1,    -1,   981,    -1,    -1,   989,    -1,   989,
     990,    -1,   990,    -1,   375,    -1,  1186,   375,    -1,   140,
     992,    -1,   382,   604,   371,  1177,    -1,    36,    -1,   492,
     140,   616,    -1,  1008,   269,    -1,   599,    -1,   599,   269,
      -1,    92,  1490,    -1,    82,  1000,    -1,  1489,  1359,  1490,
      -1,  1489,  1359,  1493,    -1,  1489,  1359,  1309,    -1,  1489,
    1359,   140,    -1,   970,  1001,    -1,   371,  1177,    -1,  1475,
      -1,   228,    -1,   229,    -1,    71,   496,    -1,    70,    -1,
    1495,    -1,    45,    -1,   995,    -1,   140,    -1,    -1,   994,
     996,    -1,  1495,    -1,    45,    -1,   998,    -1,   140,    -1,
    1495,    -1,    -1,    82,  1002,    -1,  1000,    -1,   140,    -1,
      -1,   140,    -1,    31,    -1,    45,    31,    -1,    31,    45,
      -1,   596,    -1,   596,    45,    -1,    45,   596,    -1,    -1,
    1004,    -1,  1005,    -1,    59,    -1,   994,   995,  1007,    -1,
      45,    -1,    45,   994,   995,    -1,    -1,    45,    -1,    -1,
     422,    -1,   445,  1486,  1010,  1012,  1013,    -1,    -1,   655,
    1011,   656,    -1,  1011,   657,  1493,    -1,  1493,    -1,    -1,
     323,   207,    -1,   323,   405,    -1,   323,   505,    -1,    -1,
     382,   604,  1014,    -1,   382,   144,  1014,    -1,   382,   604,
    1014,   382,   144,  1014,    -1,   382,   144,  1014,   382,   604,
    1014,    -1,   467,    -1,    62,    -1,   496,   375,    -1,   372,
      15,    -1,   496,   140,    -1,  1017,    -1,   422,   269,    -1,
     599,  1018,    -1,   269,    -1,   245,    -1,    -1,  1017,    -1,
     267,    -1,   245,    -1,   244,    -1,    -1,   599,    -1,   208,
      -1,   517,    -1,    -1,  1023,    -1,  1023,  1031,    -1,    -1,
    1028,    -1,    -1,  1030,    -1,    -1,  1029,    -1,  1033,    -1,
    1028,  1033,    -1,  1034,    -1,  1029,  1034,    -1,  1035,    -1,
    1030,  1035,    -1,   611,  1036,    -1,   587,  1036,    -1,   268,
    1360,  1306,    -1,    92,  1490,    -1,  1489,  1359,  1490,    -1,
    1489,  1359,  1493,    -1,  1489,  1359,  1309,    -1,  1489,  1359,
     140,    -1,  1032,    -1,  1031,    -1,  1032,    -1,  1032,    -1,
     632,   403,  1489,    -1,    57,    -1,   481,    -1,   225,    -1,
    1037,   657,  1038,  1297,    -1,  1038,  1297,    -1,  1493,    -1,
    1493,   655,   376,   656,    -1,    -1,  1485,    -1,   933,  1039,
      -1,    -1,   663,  1493,    -1,  1473,    -1,  1042,   657,  1473,
      -1,    -1,    -1,    23,  1044,  1082,   560,  1486,  1045,  1056,
      -1,    -1,    23,   123,  1055,  1046,   928,    -1,    23,   123,
    1493,   605,   126,   150,   357,    -1,    -1,    23,   424,   718,
    1047,   719,    -1,    -1,    23,   209,   718,  1048,   719,    -1,
      -1,    23,  1607,  1602,  1049,  1609,    -1,    -1,    23,  1602,
    1050,  1609,    -1,    -1,    23,  1602,   181,   718,  1051,  1052,
    1053,   708,   713,  1054,    -1,    23,   557,   829,    -1,    23,
     293,   220,   831,    -1,    23,   557,   826,    -1,    23,   557,
     825,    -1,    23,   494,  1495,   388,   655,   702,   656,    -1,
      -1,   382,   483,   706,    -1,   712,    -1,   382,   483,   706,
     712,    -1,    -1,   455,   577,   718,    -1,    -1,   157,   714,
      -1,    -1,  1493,    -1,    -1,   152,   557,    -1,   243,   557,
      -1,  1071,   875,    -1,  1071,  1060,    -1,  1060,    -1,   876,
      -1,  1062,    -1,   158,   406,  1338,  1069,    -1,   440,   406,
    1132,  1061,    -1,    -1,   387,   406,  1132,  1061,  1057,  1132,
      -1,    25,   406,  1132,  1061,    -1,    -1,    74,   406,  1061,
    1058,  1127,    -1,    -1,   457,   406,  1132,  1061,  1059,  1108,
      -1,    80,   406,  1132,  1307,    -1,   585,   406,  1061,    -1,
    1065,    -1,   183,   406,  1070,   632,   560,  1486,   878,    -1,
     454,   408,    -1,    22,    -1,  1069,    -1,    -1,    16,   406,
     933,  1132,  1063,  1064,    -1,    -1,   655,   900,   656,    -1,
     407,  1307,    -1,    -1,   456,   406,  1132,  1066,  1067,    -1,
      -1,    -1,  1069,  1068,   256,   655,   900,   656,    -1,  1070,
      -1,  1069,   657,  1070,    -1,  1493,    -1,  1073,    -1,  1071,
     657,  1073,    -1,    16,  1080,   933,    -1,  1072,   950,  1088,
      -1,    16,   951,    -1,  1072,   655,   947,   656,    -1,    -1,
      68,  1080,  1338,  1485,  1074,   960,  1088,    -1,    -1,    -1,
     348,  1080,  1338,  1485,  1075,   962,  1076,  1088,    -1,   158,
    1080,  1338,  1485,  1087,    -1,   158,   203,   269,  1338,  1485,
      -1,   158,   422,   269,    -1,   158,  1017,  1338,  1485,    -1,
     151,   267,    -1,   166,   267,    -1,    23,  1080,  1485,   496,
     140,  1475,    -1,    23,  1080,  1485,   158,   140,    -1,   455,
    1089,  1486,    -1,   110,   577,   994,   996,  1001,    -1,   935,
      -1,   202,    -1,  1290,    -1,  1078,    -1,  1079,    -1,    -1,
    1079,    -1,  1078,    -1,  1079,  1078,    -1,  1078,  1079,    -1,
      21,  1360,   140,    -1,    21,  1360,  1493,    -1,   292,  1360,
     140,    -1,   292,  1360,  1493,    -1,    -1,    90,    -1,    -1,
     241,    -1,    -1,  1083,  1084,    -1,    -1,  1085,    -1,  1085,
    1086,    -1,  1086,    -1,   241,    -1,   385,    -1,    -1,   467,
      -1,    62,    -1,    -1,    18,  1493,    -1,   197,    -1,    -1,
     577,    -1,   174,    -1,    29,    -1,    -1,   533,   506,   689,
    1097,  1091,  1101,    -1,    -1,   533,    22,   507,  1097,  1092,
      -1,   540,   506,   689,  1097,    -1,   540,    22,   507,  1097,
      -1,   533,   579,  1094,    -1,    -1,  1095,    -1,  1096,    -1,
    1095,   657,  1096,    -1,   632,   101,   511,    -1,   437,   384,
      -1,   437,   637,    -1,    -1,  1098,  1099,    -1,  1100,    -1,
    1099,   657,  1100,    -1,    -1,   529,    -1,   451,    -1,    -1,
     603,  1102,    -1,   603,   303,   174,  1490,    -1,   688,    -1,
    1102,   657,   688,    -1,    -1,    73,  1528,  1104,  1333,  1105,
      -1,    -1,   433,    -1,   189,    -1,    -1,   457,  1132,  1528,
    1107,  1333,  1108,    -1,    -1,  1109,    -1,  1110,    -1,  1110,
    1109,    -1,   433,    -1,   189,    -1,   609,    -1,    -1,    25,
    1132,  1528,  1112,  1113,    -1,  1114,    -1,  1113,   657,  1114,
      -1,  1334,  1115,    -1,    -1,   410,   204,  1116,    -1,    22,
      -1,    84,  1117,   244,  1119,    -1,    22,    -1,    -1,   655,
    1118,  1121,   656,    -1,    22,    -1,    -1,   655,  1120,  1122,
     656,    -1,    -1,  1493,    -1,  1121,   657,  1493,    -1,    -1,
    1123,    -1,  1122,   657,  1123,    -1,  1493,    -1,   422,    -1,
      46,  1490,    -1,    -1,    74,  1528,  1126,  1333,  1127,    -1,
      -1,  1128,    -1,  1129,    -1,  1129,  1128,    -1,   433,    -1,
     193,    -1,   335,    -1,   189,    -1,    69,    -1,   204,   605,
      -1,    -1,   387,  1132,  1528,  1131,  1333,    -1,    -1,   374,
      -1,   289,    -1,    -1,   455,  1528,  1134,  1136,    -1,   455,
     607,   717,  1135,    -1,  1496,   577,  1496,    -1,  1135,   657,
    1496,   577,  1496,    -1,  1137,    -1,  1136,   657,  1137,    -1,
    1486,   577,  1486,    -1,    -1,    60,   245,  1139,  1140,   259,
    1144,    -1,  1141,    -1,  1143,    -1,  1142,    -1,  1141,   657,
    1142,    -1,  1486,  1153,    -1,  1486,  1151,  1153,    -1,  1493,
      -1,   140,    -1,    -1,   288,   245,   256,    60,  1146,  1147,
      -1,  1150,    -1,  1148,    -1,  1149,    -1,  1148,   657,  1149,
      -1,  1486,  1153,  1156,    -1,  1486,  1151,  1153,  1156,    -1,
      -1,   406,   878,  1152,   655,  1061,   656,    -1,    -1,  1154,
    1155,    -1,    -1,  1017,   655,  1272,   656,    -1,    -1,   241,
     276,    -1,  1158,    -1,   488,  1161,    -1,   655,  1159,   656,
    1584,    -1,   488,  1163,    -1,   655,  1159,   656,    -1,   488,
    1251,    -1,   655,  1160,   656,    -1,    -1,  1163,  1162,  1581,
      -1,    -1,    -1,  1164,  1168,  1172,  1165,  1166,  1171,    -1,
    1293,  1299,    -1,  1322,    -1,  1167,    -1,  1322,  1167,    -1,
    1167,  1322,    -1,   206,  1231,  1282,  1287,  1284,  1293,  1299,
    1313,    -1,   206,   159,  1282,  1299,    -1,    -1,  1169,    -1,
    1169,  1170,    -1,  1170,    -1,  1598,    -1,   526,    -1,   524,
      -1,    -1,   204,   604,    -1,   292,   259,   498,   346,    -1,
    1172,   657,  1173,    -1,  1173,    -1,   650,    -1,  1174,  1480,
    1175,    -1,  1174,  1180,  1175,  1176,    -1,    -1,    -1,    -1,
      29,  1493,    -1,    29,  1490,    -1,  1493,    -1,  1490,    -1,
      -1,   655,   656,    -1,   655,  1307,   656,    -1,    -1,   655,
     656,    -1,   655,  1307,   656,    -1,    -1,   655,   656,    -1,
    1180,  1184,  1180,    -1,  1180,   641,  1180,    -1,  1180,  1185,
    1180,    -1,   370,  1180,    -1,  1181,   262,   584,    -1,  1181,
     262,  1186,   584,    -1,  1181,   262,   192,    -1,  1181,   262,
    1186,   192,    -1,  1181,   262,   600,    -1,  1181,   262,  1186,
     600,    -1,  1181,    -1,  1181,   262,   375,    -1,  1181,   262,
    1186,   375,    -1,  1181,   175,  1182,    -1,  1181,  1188,  1182,
      -1,  1181,  1188,  1189,   655,  1593,   656,    -1,  1182,    -1,
    1183,   259,   655,  1593,   656,    -1,  1183,  1186,   259,   655,
    1593,   656,    -1,  1183,   259,   655,  1180,   656,    -1,  1183,
     259,   655,  1180,   657,  1224,   656,    -1,  1183,  1186,   259,
     655,  1180,   656,    -1,  1183,  1186,   259,   655,  1180,   657,
    1224,   656,    -1,  1183,    43,  1183,    27,  1182,    -1,  1183,
    1186,    43,  1183,    27,  1182,    -1,  1183,   515,   282,  1183,
      -1,  1183,   282,  1194,  1286,    -1,  1183,  1186,   282,  1194,
    1286,    -1,  1183,   446,  1183,    -1,  1183,  1186,   446,  1183,
      -1,  1183,    -1,  1183,   646,  1183,    -1,  1183,   647,  1183,
      -1,  1183,   499,  1183,    -1,  1183,   500,  1183,    -1,  1183,
     649,  1183,    -1,  1183,   648,  1183,    -1,  1183,   649,   255,
    1180,  1276,    -1,  1183,   648,   255,  1180,  1276,    -1,  1183,
     650,  1183,    -1,  1183,   651,  1183,    -1,  1183,   652,  1183,
      -1,  1183,   155,  1183,    -1,  1183,   349,  1183,    -1,  1183,
     653,  1183,    -1,  1194,    -1,   394,    -1,   391,    -1,    27,
      -1,    26,    -1,   370,    -1,   369,    -1,   658,    -1,   369,
      -1,   174,    -1,   210,    -1,   222,    -1,   274,    -1,   301,
      -1,   363,    -1,    22,    -1,    28,    -1,    -1,    29,  1191,
      -1,   257,    -1,   602,   257,    -1,   156,    -1,   439,    -1,
     200,    -1,   138,   980,    -1,   974,  1006,    -1,   975,    -1,
     130,    -1,   573,   986,    -1,   127,   986,    -1,  1180,   657,
    1180,  1190,    -1,  1192,    -1,  1193,   657,  1192,    -1,  1482,
      -1,  1195,    -1,  1196,    -1,  1199,    -1,  1197,    -1,  1194,
      82,  1495,    -1,  1476,    -1,  1474,    -1,  1211,    -1,  1207,
      -1,  1194,   393,  1194,    -1,   649,  1194,    -1,   648,  1194,
      -1,   654,  1194,    -1,  1187,  1194,    -1,   655,  1593,   656,
      -1,   655,  1180,   656,    -1,   655,  1180,   657,  1224,   656,
      -1,   479,   655,  1180,   657,  1224,   656,    -1,   186,   655,
    1593,   656,    -1,   659,  1493,  1180,   660,    -1,   323,  1225,
      19,   655,  1183,  1201,   656,    -1,    45,  1194,    -1,    65,
     655,  1180,    29,  1221,   656,    -1,    64,  1227,  1229,  1228,
     168,    -1,   110,   655,  1180,   657,  1221,   656,    -1,   110,
     655,  1180,   611,   995,   656,    -1,   140,   655,  1482,   656,
      -1,   615,   655,  1483,   656,    -1,   255,  1180,  1276,   649,
    1180,    -1,    71,   655,  1224,   656,    -1,    71,   655,  1224,
     611,   995,   656,    -1,   118,  1179,    -1,   130,   655,  1180,
     656,    -1,   135,   655,  1180,   656,    -1,   236,   655,  1180,
     656,    -1,   252,   655,  1180,   657,  1180,   657,  1180,   657,
    1180,   656,    -1,   255,   655,  1180,   657,  1180,   656,    -1,
     255,   655,  1180,   657,  1180,   657,  1224,   656,    -1,   278,
     655,  1180,   657,  1180,   656,    -1,   343,   655,  1180,   656,
      -1,   350,   655,  1180,   656,    -1,   473,   655,  1180,   657,
    1180,   656,    -1,   486,   655,  1180,   656,    -1,   573,   655,
    1180,   656,    -1,   570,   655,  1180,   656,    -1,   570,   655,
    1180,   657,  1180,   656,    -1,   583,   655,  1180,   656,    -1,
     583,   655,   275,  1180,   206,  1180,   656,    -1,   583,   655,
     578,  1180,   206,  1180,   656,    -1,   583,   655,    56,  1180,
     206,  1180,   656,    -1,   583,   655,   275,   206,  1180,   656,
      -1,   583,   655,   578,   206,  1180,   656,    -1,   583,   655,
      56,   206,  1180,   656,    -1,   583,   655,  1180,   206,  1180,
     656,    -1,   607,   655,   656,    -1,   643,   655,  1180,   656,
      -1,    17,   655,  1180,   657,  1180,   656,    -1,    17,   655,
    1180,   657,   255,  1180,  1276,   656,    -1,   116,  1179,    -1,
     122,  1178,    -1,   128,   655,  1180,   657,   255,  1180,  1276,
     656,    -1,   129,   655,  1180,   657,   255,  1180,  1276,   656,
      -1,   191,   655,  1276,   206,  1180,   656,    -1,   215,   655,
    1278,   657,  1180,   656,    -1,   371,  1178,    -1,   417,   655,
    1183,   259,  1180,   656,    -1,   545,   655,  1180,   657,  1180,
     656,    -1,   545,   655,  1180,   657,   255,  1180,  1276,   656,
      -1,   549,   655,  1180,   657,  1180,   657,  1180,   656,    -1,
     549,   655,  1180,   657,  1180,   656,    -1,   549,   655,  1180,
     206,  1180,   204,  1180,   656,    -1,   549,   655,  1180,   206,
    1180,   656,    -1,   555,  1178,    -1,   571,   655,  1277,   657,
    1180,   657,  1180,   656,    -1,   572,   655,  1277,   657,  1180,
     657,  1180,   656,    -1,   612,  1179,    -1,   614,  1178,    -1,
     613,  1178,    -1,    85,   655,  1180,   657,  1193,   656,    -1,
      88,   655,  1180,   657,  1224,   656,    -1,    86,   655,  1180,
     656,    -1,    87,   655,  1193,   656,    -1,    89,   655,  1180,
     657,  1180,    29,  1221,   656,    -1,    31,   655,  1180,   656,
      -1,    70,   655,  1180,   656,    -1,    80,   655,  1224,   656,
      -1,    83,   655,  1180,   656,    -1,   123,   655,   656,    -1,
     240,   655,  1180,   657,  1180,   657,  1180,   656,    -1,   273,
     655,  1224,   656,    -1,   339,   655,  1180,   656,    -1,   349,
     655,  1180,   657,  1180,   656,    -1,   381,   655,  1180,   656,
      -1,   409,   655,  1180,   656,    -1,   431,   655,  1180,   656,
      -1,   459,   655,  1180,   657,  1180,   656,    -1,   460,   655,
    1180,   657,  1180,   657,  1180,   656,    -1,   480,   655,   656,
      -1,   585,   655,  1180,   657,  1180,   656,    -1,   628,   655,
    1180,   656,    -1,   628,   655,  1180,   657,  1180,   656,    -1,
    1198,    -1,   106,   655,  1180,   657,  1180,   656,    -1,   213,
     655,  1224,   656,    -1,   286,   655,  1224,   656,    -1,   351,
     655,  1224,   656,    -1,   352,   655,  1224,   656,    -1,   353,
     655,  1224,   656,    -1,   414,   655,  1180,   657,  1180,   656,
      -1,   415,   655,  1224,   656,    -1,    -1,  1489,   655,  1200,
    1204,   656,    -1,  1493,   663,  1493,   655,  1223,   656,    -1,
    1202,  1203,    -1,   259,    54,   346,    -1,    -1,   259,   359,
     271,   346,    -1,    -1,   632,   432,   188,    -1,    -1,  1205,
      -1,  1206,    -1,  1205,   657,  1206,    -1,  1174,  1180,  1175,
    1176,    -1,    39,   655,  1219,   656,    -1,    39,   655,   154,
    1219,   656,    -1,    48,   655,  1219,   656,    -1,    49,   655,
    1219,   656,    -1,    51,   655,  1219,   656,    -1,   111,   655,
    1281,   650,   656,    -1,   111,   655,  1219,   656,    -1,    -1,
      -1,   111,   655,   154,  1208,  1224,  1209,   656,    -1,   345,
     655,  1219,   656,    -1,   345,   655,   154,  1219,   656,    -1,
     328,   655,  1219,   656,    -1,   328,   655,   154,  1219,   656,
      -1,   539,   655,  1219,   656,    -1,   620,   655,  1219,   656,
      -1,   538,   655,  1219,   656,    -1,   622,   655,  1219,   656,
      -1,   550,   655,  1219,   656,    -1,   550,   655,   154,  1219,
     656,    -1,    -1,   221,   655,  1214,  1210,  1224,  1216,  1215,
     656,    -1,    -1,   662,  1212,  1213,    -1,  1495,   497,  1180,
      -1,  1495,    -1,   662,  1515,  1495,  1041,    -1,    -1,   154,
      -1,    -1,   490,  1473,    -1,    -1,    -1,   392,    58,  1217,
    1218,    -1,  1218,   657,  1481,  1297,    -1,  1481,  1297,    -1,
      -1,  1281,  1220,  1180,    -1,    45,   986,    -1,    71,   986,
    1006,    -1,   361,   986,    -1,   257,    -1,   504,    -1,   504,
     257,    -1,   602,    -1,   602,   257,    -1,   130,    -1,   573,
     986,    -1,   127,   986,    -1,   138,   980,    -1,    -1,   156,
    1222,   987,    -1,    -1,  1224,    -1,  1180,    -1,  1224,   657,
    1180,    -1,  1226,    -1,   655,  1226,   656,    -1,  1482,    -1,
    1226,   657,  1482,    -1,    -1,  1180,    -1,    -1,   164,  1180,
      -1,   629,  1180,   569,  1180,    -1,  1229,   629,  1180,   569,
    1180,    -1,  1245,    -1,  1234,    -1,  1233,    -1,  1230,    -1,
     659,  1493,  1230,   660,    -1,  1232,    -1,  1233,   657,  1232,
      -1,  1230,  1242,  1230,    -1,    -1,  1230,  1242,  1230,   382,
    1235,  1180,    -1,    -1,  1230,  1242,  1230,   611,  1236,   655,
    1275,   656,    -1,  1230,   359,  1241,  1245,    -1,    -1,  1230,
     278,  1261,   266,  1230,   382,  1237,  1180,    -1,    -1,  1230,
     278,  1261,   266,  1245,  1238,   611,   655,  1275,   656,    -1,
    1230,   359,   278,  1261,   266,  1245,    -1,    -1,  1230,   473,
    1261,   266,  1230,   382,  1239,  1180,    -1,    -1,  1230,   473,
    1261,   266,  1245,  1240,   611,   655,  1275,   656,    -1,  1230,
     359,   473,  1261,   266,  1245,    -1,   266,    -1,   249,   266,
      -1,   542,    -1,  1241,    -1,   114,   266,    -1,    -1,  1244,
      -1,   406,   655,  1275,   656,   878,    -1,    -1,  1246,  1486,
    1243,  1280,  1270,    -1,  1260,  1259,  1256,    -1,   655,  1259,
    1247,   656,  1280,    -1,  1254,  1585,    -1,    -1,    -1,  1247,
     598,  1589,  1248,  1590,  1249,  1585,    -1,  1251,    -1,    -1,
      -1,  1252,  1596,  1172,  1253,   945,  1171,    -1,    -1,  1259,
    1255,  1233,    -1,    -1,    -1,  1257,  1168,  1172,  1258,   945,
      -1,    -1,   488,    -1,    -1,   395,    -1,    -1,   204,   266,
      -1,   204,   392,    58,    -1,   204,   220,    58,    -1,   202,
      -1,   241,    -1,    -1,  1263,  1017,  1262,  1265,   655,  1274,
     656,    -1,    -1,   610,  1017,  1262,  1266,   655,  1272,   656,
      -1,  1264,    -1,  1267,  1264,    -1,    -1,    -1,  1269,  1267,
      -1,    -1,  1271,  1268,    -1,    -1,  1274,    -1,  1493,    -1,
     422,    -1,  1273,    -1,  1274,   657,  1273,    -1,  1493,    -1,
    1275,   657,  1493,    -1,  1277,    -1,   131,    -1,   132,    -1,
     133,    -1,   134,    -1,   233,    -1,   234,    -1,   235,    -1,
     341,    -1,   342,    -1,   485,    -1,   642,    -1,   135,    -1,
     628,    -1,   236,    -1,   343,    -1,   350,    -1,   431,    -1,
     486,    -1,   339,    -1,   643,    -1,   130,    -1,   573,    -1,
     127,    -1,   570,    -1,    -1,    29,    -1,   174,    -1,    -1,
    1279,  1493,    -1,    -1,    22,    -1,    -1,    -1,   630,  1283,
    1180,    -1,    -1,    -1,   226,  1285,  1180,    -1,   179,  1194,
      -1,    -1,    -1,   220,    58,  1288,  1289,    -1,  1288,   657,
    1481,  1297,    -1,  1481,  1297,    -1,    -1,   633,    -1,   634,
      -1,   392,    58,  1291,    -1,  1291,   657,  1292,    -1,  1292,
      -1,  1483,  1297,    -1,    -1,  1294,    -1,    -1,   392,    58,
    1295,  1296,    -1,  1296,   657,  1481,  1297,    -1,  1481,  1297,
      -1,    -1,    30,    -1,   145,    -1,    -1,  1300,    -1,    -1,
    1300,    -1,   283,  1301,    -1,   283,  1301,   477,   184,  1303,
      -1,   283,   477,   184,  1303,    -1,  1302,    -1,  1302,   657,
    1302,    -1,  1302,   380,  1302,    -1,  1493,    -1,  1474,    -1,
     589,    -1,   297,    -1,   376,    -1,  1302,    -1,    -1,   283,
    1302,    -1,   283,   477,   184,    -1,   283,  1302,   477,   184,
      -1,   376,    -1,   648,   376,    -1,   648,   297,    -1,   376,
      -1,   228,    -1,   297,    -1,   589,    -1,   137,    -1,   199,
      -1,   376,    -1,   228,    -1,   297,    -1,   589,    -1,  1310,
      -1,   376,    -1,   589,    -1,   297,    -1,   137,    -1,   199,
      -1,   376,    -1,   589,    -1,   228,    -1,   297,    -1,  1310,
      -1,  1311,    -1,   137,    -1,   199,    -1,  1306,    -1,   140,
      -1,    -1,    -1,   424,  1493,  1314,   655,  1315,   656,    -1,
      -1,  1316,    -1,  1316,   657,  1317,    -1,  1317,    -1,  1174,
    1180,  1175,    -1,    -1,  1319,  1320,    -1,  1320,   657,  1321,
      -1,  1321,    -1,   662,  1495,    -1,  1495,    -1,    -1,   256,
    1323,  1324,    -1,    -1,    -1,   396,  1492,  1325,   997,  1326,
    1457,  1460,    -1,   160,  1492,    -1,  1318,    -1,    -1,   157,
    1328,  1224,    -1,    -1,   158,  1339,  1528,  1338,  1330,  1333,
    1087,    -1,    -1,   158,   245,  1338,  1493,   382,  1486,  1331,
      -1,   158,   123,  1338,  1493,    -1,   158,   209,  1338,  1493,
     663,  1493,    -1,   158,   209,  1338,  1493,    -1,   158,   424,
    1338,   718,    -1,   158,   607,   717,  1558,    -1,    -1,   158,
     624,  1338,  1332,  1333,  1087,    -1,   158,   181,  1338,   718,
      -1,   158,   582,  1338,   718,    -1,   158,   557,   852,   863,
     864,    -1,   158,   293,   220,   853,   863,   864,    -1,   158,
     494,  1338,  1495,    -1,  1334,    -1,  1333,   657,  1334,    -1,
    1486,    -1,  1486,  1243,    -1,  1337,    -1,  1336,   657,  1337,
      -1,  1487,    -1,    -1,   240,   186,    -1,    -1,   563,    -1,
      -1,    -1,   252,  1341,  1346,  1081,  1348,  1342,  1350,  1366,
      -1,    -1,    -1,   460,  1344,  1347,  1348,  1345,  1350,    -1,
      -1,   300,    -1,   142,    -1,   230,    -1,  1375,    -1,   142,
      -1,   256,  1349,    -1,  1349,    -1,  1335,    -1,  1353,    -1,
     655,   656,  1353,    -1,   655,  1352,   656,  1353,    -1,    -1,
     496,  1351,  1357,    -1,  1352,   657,  1479,    -1,  1479,    -1,
     615,  1356,    -1,   616,  1356,    -1,    -1,   923,  1354,  1581,
      -1,    -1,   655,   923,   656,  1355,  1584,    -1,  1356,   657,
    1361,    -1,  1361,    -1,  1357,   657,  1358,    -1,  1358,    -1,
    1483,  1359,  1365,    -1,   174,    -1,   497,    -1,    -1,  1359,
      -1,    -1,   655,  1362,  1363,   656,    -1,    -1,  1364,    -1,
    1364,   657,  1365,    -1,  1365,    -1,  1180,    -1,   140,    -1,
      -1,    -1,   382,   161,  1367,   269,   604,  1373,    -1,    -1,
      -1,   604,  1369,  1375,  1081,  1231,   496,  1371,  1370,  1282,
    1293,  1304,    -1,  1371,   657,  1372,    -1,  1372,    -1,  1483,
    1359,  1365,    -1,  1373,   657,  1374,    -1,  1374,    -1,  1483,
    1359,  1365,    -1,    -1,   300,    -1,    -1,   144,  1377,  1385,
    1378,    -1,    -1,   206,  1486,  1243,  1379,  1282,  1293,  1304,
      -1,    -1,  1382,  1380,   206,  1231,  1282,    -1,    -1,   206,
    1336,  1381,   611,  1231,  1282,    -1,  1383,    -1,  1382,   657,
    1383,    -1,  1493,  1384,    -1,  1493,   663,  1493,  1384,    -1,
      -1,   663,   650,    -1,    -1,  1386,  1385,    -1,   433,    -1,
     300,    -1,   241,    -1,    -1,   585,  1389,  1388,  1334,    -1,
      -1,   560,    -1,    -1,  1391,    -1,  1392,    -1,  1391,   657,
    1392,    -1,   112,    -1,   336,    -1,    53,   260,    -1,   107,
     554,    -1,   400,   194,    -1,   261,    -1,   553,    -1,   516,
      -1,    22,    -1,    -1,   204,   432,   376,    -1,   501,     7,
      -1,   501,     9,    -1,    -1,   501,  1395,  1396,    -1,   124,
    1407,    -1,  1403,   556,  1402,  1407,    -1,  1403,   581,  1402,
    1407,    -1,   180,  1402,  1407,    -1,   560,   537,  1402,  1407,
      -1,   386,   556,  1402,  1407,    -1,   412,    -1,   412,   514,
    1490,    -1,   412,   514,  1407,    -1,   172,   942,  1399,    -1,
     172,    22,  1399,    -1,  1403,    84,  1404,  1486,  1402,  1407,
      -1,  1400,   294,    -1,   506,   232,    -1,    -1,    46,   180,
    1405,  1406,  1397,  1298,    -1,    -1,   448,   689,   180,  1405,
    1406,  1398,  1298,    -1,  1019,  1404,  1486,  1402,  1282,    -1,
    1401,   171,    -1,    34,    -1,   109,    -1,   423,    -1,   111,
     655,   650,   656,   627,    -1,   111,   655,   650,   656,   177,
      -1,   627,  1298,    -1,   177,  1298,    -1,   428,    -1,   427,
    1390,  1393,  1298,    -1,  1514,   537,  1407,    -1,  1403,   426,
      -1,  1514,   619,  1407,    -1,   994,  1407,    -1,    83,  1407,
      -1,   219,    -1,   219,   204,  1496,    -1,   113,   123,   933,
    1493,    -1,   113,   560,  1486,    -1,   113,   624,  1486,    -1,
     319,   537,    -1,    22,   507,   537,    -1,   506,   537,    -1,
     506,   690,   537,    -1,    78,    -1,   608,    -1,   559,    -1,
     246,    -1,   113,   424,   718,    -1,   113,   209,   718,    -1,
     113,   582,   718,    -1,   424,   537,  1407,    -1,   209,   537,
    1407,    -1,   424,    81,   718,    -1,   209,    81,   718,    -1,
     113,   181,   718,    -1,  1411,   204,  1180,    -1,   537,    -1,
     354,    -1,   294,    -1,   319,    -1,    45,    -1,    -1,   541,
      -1,    -1,  1404,  1493,    -1,    -1,   207,    -1,   206,    -1,
     259,    -1,    -1,   259,  1490,    -1,    -1,   206,  1308,    -1,
      -1,   282,  1490,    -1,   630,  1180,    -1,    -1,  1411,  1486,
    1409,  1413,    -1,    -1,  1411,  1412,  1410,  1157,    -1,   145,
      -1,   146,    -1,    -1,   189,    -1,   407,    -1,    -1,  1473,
      -1,  1493,    -1,    11,  1493,    -1,    12,  1493,    -1,     6,
    1493,    -1,     4,  1493,    -1,     3,  1493,    -1,     8,  1493,
      -1,    10,  1493,    -1,    -1,   201,  1132,  1422,  1423,    -1,
      -1,    -1,  1528,  1424,  1429,  1425,  1426,    -1,  1427,    -1,
      -1,   632,   437,   292,  1430,    -1,  1427,   657,  1428,    -1,
    1428,    -1,   176,   294,    -1,   172,   294,    -1,   211,   294,
      -1,   509,   294,    -1,    45,   294,    -1,   447,   294,   689,
      -1,   432,    60,    -1,   232,    -1,   423,    -1,   294,    -1,
     537,    -1,   506,   689,    -1,    78,    -1,   608,    -1,   559,
      -1,   246,    -1,   319,    -1,   147,    -1,   465,    -1,    -1,
    1333,    -1,    -1,    27,   151,    72,    -1,    -1,   463,  1432,
    1433,    -1,  1433,   657,  1434,    -1,  1434,    -1,    -1,   506,
    1435,   689,  1436,    -1,   319,    -1,   432,    60,    -1,    -1,
      22,    -1,    -1,   430,  1438,  1439,    -1,  1400,   294,  1440,
      -1,   577,  1490,    -1,    41,  1180,    -1,    -1,   270,  1442,
    1443,  1444,  1445,    -1,    -1,   224,    -1,   513,    -1,    -1,
     100,    -1,   432,    -1,  1180,    -1,   607,  1496,    -1,   502,
      -1,   610,  1493,    -1,    -1,    -1,    -1,    -1,   288,  1453,
    1449,  1455,  1454,   247,  1492,  1450,  1456,   256,   560,  1486,
    1243,  1451,   997,  1452,  1463,  1457,  1460,  1464,  1466,  1469,
      -1,   126,    -1,   640,    -1,    -1,   289,    -1,    -1,    98,
      -1,   300,    -1,    -1,   460,    -1,   241,    -1,    -1,    84,
    1458,    -1,  1458,  1459,    -1,  1459,    -1,   565,    58,  1473,
      -1,   390,   167,    58,  1473,    -1,   167,    58,  1473,    -1,
     178,    58,  1473,    -1,    -1,   285,  1461,    -1,  1461,  1462,
      -1,  1462,    -1,   565,    58,  1473,    -1,   531,    58,  1473,
      -1,    -1,   477,   238,    58,  1473,    -1,    -1,   241,   376,
    1465,    -1,   285,    -1,   477,    -1,    -1,   655,  1467,   656,
      -1,   655,   656,    -1,  1467,   657,  1468,    -1,  1468,    -1,
    1483,    -1,   662,  1495,    -1,    -1,   496,  1470,    -1,  1470,
     657,  1471,    -1,  1471,    -1,  1483,  1359,  1174,  1365,  1175,
      -1,   566,    -1,   360,    -1,   592,   566,    -1,  1472,  1491,
      -1,  1491,    -1,   228,    -1,   229,    -1,    47,    -1,   402,
      -1,  1476,    -1,   649,  1477,    -1,   648,  1477,    -1,  1472,
      -1,  1477,    -1,  1478,    -1,   375,    -1,   192,    -1,   584,
      -1,   228,    -1,   229,    -1,    47,    -1,   592,   993,    -1,
     592,    47,    -1,   376,    -1,   297,    -1,   589,    -1,   137,
      -1,   199,    -1,   130,   566,    -1,   573,   566,    -1,   570,
     566,    -1,  1483,    -1,  1480,    -1,  1493,   663,   650,    -1,
    1493,   663,  1493,   663,   650,    -1,  1180,    -1,  1493,    -1,
    1484,    -1,  1493,    -1,  1484,    -1,  1493,   663,  1493,    -1,
     663,  1493,   663,  1493,    -1,  1493,   663,  1493,   663,  1493,
      -1,  1493,    -1,  1493,   663,  1493,   663,  1493,    -1,  1493,
     663,  1493,    -1,   663,  1493,    -1,  1493,    -1,  1493,   663,
    1493,    -1,   663,  1493,    -1,  1493,  1384,    -1,  1493,   663,
    1493,  1384,    -1,  1493,    -1,   237,    -1,   239,    -1,   566,
      -1,   566,    -1,   566,    -1,  1489,    -1,  1497,    -1,  1489,
      -1,  1498,    -1,  1493,    -1,  1490,    -1,   281,    -1,  1495,
      -1,  1495,   662,  1495,    -1,   118,  1179,    -1,  1498,    -1,
      31,    -1,    40,    -1,    42,    -1,    59,    -1,    60,    -1,
      70,    -1,    73,    -1,    72,    -1,    79,    -1,    85,    -1,
      86,    -1,    87,    -1,    88,    -1,    89,    -1,    92,    -1,
      94,    -1,   106,    -1,   136,    -1,   157,    -1,   168,    -1,
     184,    -1,   185,    -1,   201,    -1,   223,    -1,   227,    -1,
     231,    -1,   254,    -1,   271,    -1,   372,    -1,   386,    -1,
     389,    -1,   388,    -1,   398,    -1,   403,    -1,   416,    -1,
     419,    -1,   454,    -1,   457,    -1,   463,    -1,   466,    -1,
     474,    -1,   482,    -1,   487,    -1,   494,    -1,   504,    -1,
     512,    -1,   506,    -1,   507,    -1,   514,    -1,   533,    -1,
     540,    -1,   585,    -1,   596,    -1,   597,    -1,   636,    -1,
     639,    -1,   605,    -1,    15,    -1,    17,    -1,    18,    -1,
      19,    -1,    20,    -1,    21,    -1,    24,    -1,    28,    -1,
      33,    -1,    34,    -1,    36,    -1,    35,    -1,    37,    -1,
      38,    -1,    39,    -1,    46,    -1,    50,    -1,    53,    -1,
      55,    -1,    54,    -1,    57,    -1,    63,    -1,    66,    -1,
      67,    -1,    69,    -1,    75,    -1,    78,    -1,    77,    -1,
      76,    -1,    80,    -1,    81,    -1,    83,    -1,    91,    -1,
      84,    -1,    93,    -1,    95,    -1,    96,    -1,    97,    -1,
      98,    -1,   100,    -1,   101,    -1,   103,    -1,   105,    -1,
     104,    -1,   107,    -1,   109,    -1,   119,    -1,   112,    -1,
     115,    -1,   117,    -1,   121,    -1,   126,    -1,   125,    -1,
     127,    -1,   130,    -1,   135,    -1,   141,    -1,   143,    -1,
     147,    -1,   149,    -1,   150,    -1,   151,    -1,   152,    -1,
     153,    -1,   160,    -1,   161,    -1,   162,    -1,   169,    -1,
     173,    -1,   172,    -1,   171,    -1,   176,    -1,   177,    -1,
     179,    -1,   181,    -1,   180,    -1,   182,    -1,   183,    -1,
     188,    -1,   189,    -1,   190,    -1,   194,    -1,   193,    -1,
     205,    -1,   166,    -1,   207,    -1,   196,    -1,   197,    -1,
     198,    -1,   211,    -1,   212,    -1,   214,    -1,   213,    -1,
     215,    -1,   219,    -1,   217,    -1,   225,    -1,   224,    -1,
     232,    -1,   236,    -1,   238,    -1,   242,    -1,   246,    -1,
     258,    -1,   243,    -1,   244,    -1,   248,    -1,   260,    -1,
     261,    -1,   263,    -1,   264,    -1,   253,    -1,   268,    -1,
     273,    -1,   272,    -1,   276,    -1,   279,    -1,   280,    -1,
     286,    -1,   287,    -1,   289,    -1,   291,    -1,   293,    -1,
     294,    -1,   326,    -1,   319,    -1,   322,    -1,   303,    -1,
     304,    -1,   308,    -1,   305,    -1,   306,    -1,   320,    -1,
     321,    -1,   307,    -1,   309,    -1,   302,    -1,   317,    -1,
     311,    -1,   310,    -1,   312,    -1,   313,    -1,   314,    -1,
     315,    -1,   316,    -1,   324,    -1,   325,    -1,   327,    -1,
     329,    -1,   330,    -1,   335,    -1,   336,    -1,   337,    -1,
     338,    -1,   339,    -1,   340,    -1,   343,    -1,   344,    -1,
     348,    -1,   346,    -1,   350,    -1,   351,    -1,   352,    -1,
     353,    -1,   354,    -1,   355,    -1,   357,    -1,   356,    -1,
     358,    -1,   361,    -1,   362,    -1,   366,    -1,   365,    -1,
     373,    -1,   367,    -1,   368,    -1,   377,    -1,   379,    -1,
     380,    -1,   381,    -1,   383,    -1,   385,    -1,   384,    -1,
     399,    -1,   400,    -1,   405,    -1,   408,    -1,   407,    -1,
     409,    -1,   410,    -1,   411,    -1,   413,    -1,   412,    -1,
     414,    -1,   415,    -1,   420,    -1,   421,    -1,   423,    -1,
     425,    -1,   426,    -1,   427,    -1,   428,    -1,   429,    -1,
     431,    -1,   432,    -1,   433,    -1,   436,    -1,   440,    -1,
     441,    -1,   443,    -1,   442,    -1,   444,    -1,   447,    -1,
     448,    -1,   449,    -1,   450,    -1,   451,    -1,   453,    -1,
     456,    -1,   458,    -1,   461,    -1,   465,    -1,   468,    -1,
     469,    -1,   470,    -1,   475,    -1,   476,    -1,   477,    -1,
     480,    -1,   478,    -1,   479,    -1,   481,    -1,   483,    -1,
     484,    -1,   486,    -1,   492,    -1,   491,    -1,   493,    -1,
     505,    -1,   498,    -1,   502,    -1,   508,    -1,   509,    -1,
     511,    -1,   513,    -1,   515,    -1,   516,    -1,   524,    -1,
     523,    -1,   526,    -1,   529,    -1,   532,    -1,   537,    -1,
     541,    -1,   543,    -1,   544,    -1,   545,    -1,   546,    -1,
     548,    -1,   547,    -1,   551,    -1,   552,    -1,   553,    -1,
     554,    -1,   562,    -1,   559,    -1,   556,    -1,   561,    -1,
     557,    -1,   563,    -1,   564,    -1,   567,    -1,   568,    -1,
     579,    -1,   580,    -1,   581,    -1,   570,    -1,   571,    -1,
     572,    -1,   573,    -1,   586,    -1,   587,    -1,   588,    -1,
     209,    -1,   590,    -1,   591,    -1,   594,    -1,   593,    -1,
     600,    -1,   603,    -1,   607,    -1,   608,    -1,   609,    -1,
     619,    -1,   624,    -1,   625,    -1,   616,    -1,   627,    -1,
     626,    -1,   628,    -1,   635,    -1,   638,    -1,   640,    -1,
     643,    -1,   623,    -1,    -1,   496,  1500,  1501,    -1,    -1,
    1517,  1502,  1507,    -1,    -1,   579,  1503,  1519,    -1,    -1,
    1513,  1504,  1505,    -1,    -1,  1516,  1506,  1507,    -1,   579,
    1519,    -1,    -1,   657,  1508,    -1,    -1,  1509,  1511,    -1,
      -1,  1508,   657,  1510,  1511,    -1,    -1,  1513,  1512,  1516,
      -1,  1517,    -1,   217,    -1,   289,    -1,   493,    -1,    -1,
     217,    -1,   289,    -1,   493,    -1,    -1,   217,   663,    -1,
     289,   663,    -1,   493,   663,    -1,  1518,  1359,  1525,    -1,
    1518,  1359,  1525,    -1,   662,  1495,  1359,  1180,    -1,   662,
     662,  1515,  1518,  1359,  1525,    -1,   994,   999,    -1,   356,
    1359,  1180,    -1,   356,   996,  1001,    -1,   409,  1359,  1524,
      -1,   409,   204,  1496,  1359,  1524,    -1,  1493,    -1,  1493,
     663,  1493,    -1,   140,   663,  1493,    -1,  1520,    -1,  1521,
      -1,  1520,   657,  1521,    -1,  1521,   657,  1520,    -1,  1522,
      -1,   263,   280,  1523,    -1,   437,   384,    -1,   437,   637,
      -1,   437,   590,    -1,   437,    93,    -1,   458,   437,    -1,
     491,    -1,   566,    -1,   409,   655,   566,   656,    -1,   381,
     655,   566,   656,    -1,  1180,    -1,   140,    -1,   382,    -1,
      22,    -1,    45,    -1,    -1,   292,  1528,  1527,  1529,    -1,
     560,    -1,   556,    -1,  1530,    -1,  1529,   657,  1530,    -1,
    1486,  1280,  1531,    -1,   437,    -1,   637,    -1,   637,    98,
      -1,   300,   637,    -1,   437,   289,    -1,    -1,   601,  1533,
    1528,    -1,   223,  1486,   386,  1280,    -1,   223,  1488,    79,
      -1,    -1,   223,  1488,   437,  1535,  1536,  1282,  1299,    -1,
    1537,    -1,  1493,  1538,    -1,   197,    -1,   366,    -1,   197,
      -1,   366,    -1,   421,    -1,   272,    -1,    -1,  1540,  1539,
     655,  1364,   656,    -1,   174,    -1,   210,    -1,   274,    -1,
     222,    -1,   301,    -1,   472,   717,  1542,    -1,  1546,   382,
    1545,  1557,   206,  1558,    -1,  1546,   382,   209,  1557,   206,
    1558,    -1,  1546,   382,   424,  1557,   206,  1558,    -1,    22,
    1547,   657,   218,   389,   206,  1558,    -1,   429,   382,  1496,
     206,  1558,    -1,   218,   717,  1544,    -1,  1546,   382,  1545,
    1557,   577,  1559,  1566,  1567,    -1,  1546,   382,   209,  1557,
     577,  1559,  1566,  1567,    -1,  1546,   382,   424,  1557,   577,
    1559,  1566,  1567,    -1,   429,   382,  1496,   577,  1559,  1568,
      -1,    -1,   560,    -1,  1548,    -1,    22,  1547,    -1,    -1,
     423,    -1,  1549,    -1,  1548,   657,  1549,    -1,    -1,   488,
    1550,  1563,    -1,    -1,   252,  1551,  1563,    -1,    -1,   604,
    1552,  1563,    -1,    -1,   445,  1553,  1563,    -1,   144,    -1,
     606,    -1,   245,    -1,    23,    -1,   113,    -1,   158,    -1,
     185,    -1,   453,    -1,   502,    -1,   425,    -1,   196,    -1,
     218,   389,    -1,   501,   124,    -1,   551,    -1,   113,   563,
     556,    -1,   292,   556,    -1,   461,   506,    -1,   461,    77,
      -1,   113,   624,    -1,   501,   624,    -1,   113,   476,    -1,
      23,   476,    -1,   113,   607,    -1,   181,    -1,   582,    -1,
     113,   557,    -1,    -1,    27,    -1,  1556,  1554,  1555,    -1,
    1556,    -1,   546,   566,    -1,   264,   566,    -1,    75,   566,
      -1,   650,    -1,  1493,   663,   650,    -1,   650,   663,   650,
      -1,  1486,    -1,  1496,    -1,  1558,   657,  1496,    -1,  1562,
      -1,  1559,   657,  1562,    -1,   623,    -1,   632,    -1,   611,
      -1,    29,    -1,  1496,   238,    58,   566,    -1,  1496,   238,
      58,   409,   566,    -1,  1496,   238,  1560,  1495,    -1,  1496,
     238,  1560,  1495,  1561,  1490,    -1,  1496,    -1,    -1,   655,
    1564,   656,    -1,  1564,   657,  1565,    -1,  1565,    -1,  1493,
      -1,    -1,   462,  1555,    -1,   462,   530,    -1,   462,   638,
      -1,   462,   368,    -1,    -1,   632,  1569,    -1,    -1,   632,
     218,   389,    -1,  1569,  1570,    -1,  1570,    -1,   218,   389,
      -1,   325,  1306,    -1,   329,  1306,    -1,   324,  1306,    -1,
     330,  1305,    -1,    -1,    42,  1572,  1573,    -1,    -1,   635,
      -1,    -1,    27,   372,    67,    -1,    27,    67,    -1,    -1,
     452,    -1,   372,   452,    -1,    -1,   482,    -1,    94,  1573,
    1574,  1575,    -1,   474,  1573,  1574,  1575,    -1,   474,  1573,
     577,  1576,  1493,    -1,   482,  1493,    -1,   452,   482,  1493,
      -1,    -1,  1582,    -1,    -1,   598,  1589,  1583,  1158,    -1,
      -1,  1582,    -1,  1586,    -1,    -1,  1586,    -1,    -1,  1587,
    1588,    -1,  1294,  1298,    -1,  1300,    -1,    -1,   154,    -1,
      22,    -1,   488,  1250,    -1,   655,  1160,   656,    -1,  1590,
    1585,    -1,    -1,  1591,   598,  1589,  1592,  1590,  1585,    -1,
    1594,  1591,  1595,    -1,    -1,    -1,    -1,  1597,    -1,  1597,
    1598,    -1,  1598,    -1,   542,    -1,   230,    -1,   154,    -1,
     527,    -1,   522,    -1,   523,    -1,   525,    -1,    22,    -1,
    1604,  1600,    -1,  1603,  1601,    -1,  1605,  1602,  1609,    -1,
    1609,    -1,  1617,    -1,  1628,    -1,  1622,    -1,   704,    -1,
    1609,    -1,  1617,    -1,  1628,    -1,  1622,    -1,  1621,    -1,
     704,    -1,  1603,    -1,  1604,    -1,    -1,   141,   174,  1496,
      -1,  1606,    -1,  1606,  1607,    -1,  1607,    -1,   394,   460,
      -1,    21,   174,   591,    -1,    21,   174,   337,    -1,    21,
     174,   564,    -1,    -1,   528,   487,   141,    -1,   528,   487,
     258,    -1,    -1,  1608,   624,  1486,  1610,  1611,    29,  1613,
      -1,    -1,   655,  1612,   656,    -1,  1493,    -1,  1612,   657,
    1493,    -1,    -1,  1614,  1615,  1616,    -1,   488,  1161,    -1,
     655,  1159,   656,  1584,    -1,    -1,   632,    74,   389,    -1,
     632,    63,    74,   389,    -1,   632,   289,    74,   389,    -1,
      -1,    -1,    -1,   582,  1174,   718,   823,   824,   382,  1174,
    1618,  1486,   204,  1174,  1619,   163,   479,  1620,   773,    -1,
      20,  1174,   209,  1493,   470,   946,   514,  1490,    -1,  1174,
     209,  1493,   470,   946,   514,  1490,    -1,    -1,    -1,    -1,
      -1,    -1,  1174,   209,   718,   655,  1623,   729,   656,  1624,
     470,  1625,   991,  1626,   720,  1627,   773,    -1,    -1,    -1,
      -1,    -1,   424,  1174,   718,  1629,   655,  1630,   733,   656,
    1631,   720,  1632,   773,    -1,   639,  1635,  1634,  1636,    -1,
     639,   168,  1634,  1638,    -1,   639,   419,  1634,    -1,   639,
      94,  1634,  1637,    -1,   639,   474,  1634,    -1,   639,   441,
      -1,  1473,    -1,  1473,   657,  1473,    -1,  1473,   657,  1473,
     657,  1306,    -1,    42,    -1,   533,    -1,    -1,   266,    -1,
     468,    -1,    -1,   383,   411,    -1,    -1,    -1,   552,  1639,
    1640,    -1,    -1,   204,   340,    -1,   254,   413,  1493,   514,
    1490,    -1,   254,   514,  1490,    -1,   597,   413,  1493,    -1,
     597,   514,  1490,    -1,   645,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1936,  1936,  1949,  1948,  1973,  1980,  1982,  1986,  1987,
    1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,
    2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,
    2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,
    2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,
    2042,  2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,
    2052,  2053,  2057,  2067,  2068,  2072,  2082,  2089,  2100,  2099,
    2110,  2112,  2116,  2117,  2121,  2134,  2133,  2153,  2152,  2161,
    2162,  2166,  2170,  2174,  2179,  2183,  2187,  2192,  2196,  2200,
    2204,  2208,  2212,  2217,  2221,  2226,  2257,  2262,  2265,  2267,
    2268,  2272,  2278,  2282,  2298,  2302,  2308,  2318,  2328,  2341,
    2346,  2350,  2366,  2365,  2407,  2412,  2406,  2419,  2424,  2417,
    2431,  2436,  2429,  2442,  2441,  2454,  2453,  2461,  2465,  2469,
    2473,  2480,  2493,  2494,  2498,  2502,  2506,  2510,  2514,  2519,
    2523,  2531,  2530,  2562,  2561,  2568,  2575,  2576,  2582,  2588,
    2598,  2604,  2610,  2612,  2619,  2620,  2624,  2630,  2639,  2640,
    2648,  2648,  2706,  2707,  2708,  2709,  2710,  2711,  2712,  2713,
    2714,  2715,  2716,  2717,  2718,  2723,  2737,  2753,  2772,  2773,
    2777,  2778,  2783,  2785,  2787,  2789,  2791,  2793,  2795,  2801,
    2802,  2803,  2807,  2811,  2819,  2818,  2831,  2833,  2836,  2838,
    2842,  2846,  2853,  2855,  2859,  2860,  2865,  2885,  2913,  2915,
    2919,  2920,  2924,  2951,  2952,  2953,  2954,  2958,  2959,  2963,
    2964,  2969,  2972,  2999,  2998,  3063,  3079,  3078,  3135,  3161,
    3161,  3184,  3185,  3190,  3192,  3197,  3219,  3230,  3234,  3256,
    3257,  3261,  3265,  3274,  3280,  3286,  3296,  3311,  3334,  3340,
    3341,  3347,  3350,  3354,  3362,  3382,  3384,  3402,  3408,  3410,
    3412,  3414,  3416,  3418,  3420,  3422,  3424,  3426,  3428,  3430,
    3435,  3451,  3467,  3468,  3473,  3479,  3488,  3494,  3503,  3511,
    3520,  3529,  3531,  3540,  3545,  3551,  3560,  3568,  3570,  3572,
    3574,  3576,  3578,  3580,  3582,  3584,  3586,  3588,  3590,  3592,
    3597,  3615,  3636,  3637,  3641,  3642,  3643,  3644,  3645,  3646,
    3647,  3648,  3649,  3650,  3651,  3652,  3653,  3658,  3657,  3664,
    3664,  3721,  3720,  3749,  3749,  3765,  3818,  3861,  3882,  3881,
    3903,  3922,  3924,  3925,  3929,  3949,  3972,  3974,  3990,  3972,
    4009,  4011,  4012,  4016,  4017,  4022,  4028,  4021,  4049,  4048,
    4064,  4065,  4069,  4070,  4075,  4079,  4074,  4100,  4104,  4099,
    4123,  4133,  4138,  4137,  4172,  4173,  4178,  4177,  4209,  4209,
    4224,  4223,  4260,  4272,  4274,  4271,  4301,  4300,  4321,  4323,
    4328,  4330,  4332,  4349,  4354,  4360,  4367,  4368,  4376,  4382,
    4391,  4397,  4403,  4404,  4408,  4408,  4413,  4414,  4415,  4419,
    4420,  4421,  4425,  4429,  4430,  4431,  4435,  4436,  4437,  4438,
    4439,  4440,  4441,  4442,  4446,  4450,  4451,  4452,  4456,  4457,
    4458,  4459,  4460,  4464,  4468,  4469,  4470,  4474,  4475,  4476,
    4477,  4478,  4479,  4480,  4484,  4488,  4489,  4490,  4494,  4495,
    4496,  4501,  4509,  4517,  4525,  4537,  4549,  4554,  4559,  4567,
    4575,  4583,  4591,  4599,  4607,  4615,  4628,  4641,  4654,  4656,
    4660,  4665,  4678,  4679,  4731,  4730,  4733,  4739,  4739,  4740,
    4754,  4755,  4759,  4761,  4760,  4764,  4763,  4769,  4806,  4807,
    4812,  4811,  4830,  4849,  4848,  4865,  4869,  4877,  4876,  4879,
    4881,  4883,  4885,  4890,  4891,  4896,  4897,  4901,  4902,  4906,
    4925,  4935,  4946,  4955,  4956,  4972,  4974,  4973,  4978,  4976,
    4987,  4988,  4992,  5010,  5026,  5027,  5043,  5058,  5080,  5081,
    5086,  5085,  5109,  5119,  5141,  5140,  5158,  5157,  5177,  5199,
    5203,  5232,  5244,  5245,  5250,  5261,  5249,  5286,  5287,  5291,
    5304,  5325,  5338,  5364,  5365,  5370,  5369,  5406,  5411,  5412,
    5416,  5417,  5421,  5423,  5429,  5435,  5437,  5439,  5441,  5443,
    5445,  5455,  5470,  5454,  5484,  5485,  5489,  5490,  5494,  5495,
    5499,  5500,  5504,  5505,  5509,  5510,  5514,  5519,  5523,  5530,
    5532,  5536,  5537,  5541,  5542,  5543,  5547,  5552,  5557,  5562,
    5567,  5572,  5577,  5582,  5597,  5603,  5618,  5623,  5638,  5644,
    5662,  5667,  5672,  5677,  5682,  5687,  5693,  5692,  5718,  5719,
    5720,  5725,  5730,  5735,  5737,  5739,  5741,  5747,  5752,  5757,
    5763,  5769,  5775,  5784,  5802,  5819,  5842,  5856,  5857,  5858,
    5859,  5860,  5861,  5862,  5866,  5867,  5868,  5872,  5873,  5877,
    5878,  5879,  5880,  5885,  5892,  5893,  5897,  5898,  5902,  5903,
    5911,  5910,  5919,  5917,  5927,  5925,  5935,  5933,  5941,  5962,
    5968,  5970,  5974,  5978,  5979,  5983,  5988,  5987,  6013,  6014,
    6023,  6025,  6030,  6033,  6037,  6044,  6045,  6049,  6050,  6054,
    6060,  6066,  6070,  6086,  6102,  6103,  6104,  6105,  6110,  6114,
    6119,  6124,  6128,  6133,  6138,  6144,  6149,  6155,  6159,  6164,
    6169,  6187,  6189,  6191,  6204,  6206,  6211,  6216,  6228,  6233,
    6238,  6243,  6245,  6247,  6249,  6251,  6253,  6255,  6257,  6260,
    6259,  6264,  6263,  6267,  6269,  6278,  6279,  6280,  6285,  6286,
    6287,  6288,  6289,  6293,  6297,  6298,  6302,  6303,  6307,  6308,
    6309,  6310,  6311,  6315,  6316,  6317,  6318,  6319,  6323,  6328,
    6330,  6336,  6337,  6339,  6344,  6353,  6354,  6358,  6359,  6363,
    6364,  6365,  6369,  6370,  6371,  6372,  6375,  6376,  6380,  6381,
    6385,  6386,  6390,  6391,  6395,  6396,  6397,  6398,  6405,  6406,
    6412,  6418,  6424,  6430,  6431,  6444,  6450,  6456,  6462,  6471,
    6492,  6498,  6503,  6504,  6508,  6509,  6513,  6521,  6525,  6526,
    6530,  6531,  6535,  6544,  6548,  6549,  6553,  6564,  6565,  6569,
    6570,  6574,  6575,  6580,  6581,  6585,  6592,  6601,  6609,  6620,
    6621,  6622,  6623,  6624,  6625,  6630,  6638,  6639,  6642,  6644,
    6648,  6660,  6661,  6665,  6672,  6685,  6686,  6688,  6690,  6696,
    6701,  6707,  6713,  6720,  6730,  6731,  6732,  6733,  6734,  6738,
    6742,  6743,  6747,  6748,  6752,  6753,  6757,  6758,  6759,  6763,
    6764,  6768,  6772,  6785,  6797,  6798,  6802,  6803,  6807,  6808,
    6812,  6813,  6817,  6818,  6822,  6823,  6827,  6828,  6832,  6833,
    6837,  6839,  6840,  6846,  6852,  6858,  6866,  6867,  6871,  6875,
    6876,  6889,  6890,  6891,  6895,  6896,  6900,  6906,  6920,  6921,
    6925,  6937,  6938,  6942,  6943,  6951,  6968,  6950,  6988,  6987,
    7001,  7013,  7012,  7031,  7030,  7049,  7048,  7067,  7061,  7081,
    7080,  7113,  7118,  7123,  7128,  7133,  7143,  7144,  7145,  7146,
    7150,  7151,  7163,  7164,  7168,  7169,  7172,  7174,  7182,  7190,
    7192,  7194,  7195,  7203,  7204,  7208,  7217,  7215,  7229,  7243,
    7242,  7256,  7254,  7268,  7275,  7286,  7287,  7315,  7322,  7326,
    7331,  7330,  7346,  7348,  7353,  7361,  7360,  7376,  7380,  7379,
    7391,  7392,  7396,  7411,  7412,  7416,  7425,  7429,  7434,  7440,
    7439,  7451,  7462,  7450,  7478,  7487,  7496,  7506,  7515,  7521,
    7527,  7536,  7545,  7564,  7585,  7595,  7599,  7604,  7605,  7608,
    7610,  7611,  7612,  7613,  7616,  7621,  7632,  7637,  7648,  7649,
    7653,  7654,  7658,  7658,  7661,  7663,  7667,  7668,  7672,  7673,
    7681,  7682,  7683,  7687,  7688,  7693,  7701,  7702,  7703,  7704,
    7709,  7708,  7718,  7717,  7724,  7731,  7741,  7758,  7761,  7768,
    7772,  7779,  7783,  7787,  7794,  7794,  7800,  7801,  7805,  7806,
    7807,  7811,  7812,  7825,  7832,  7833,  7838,  7837,  7849,  7850,
    7851,  7856,  7855,  7877,  7878,  7882,  7883,  7887,  7888,  7889,
    7894,  7893,  7915,  7916,  7920,  7925,  7926,  7934,  7936,  7940,
    7942,  7941,  7954,  7956,  7955,  7969,  7970,  7975,  7984,  7985,
    7986,  7990,  7996,  8005,  8014,  8013,  8040,  8041,  8045,  8046,
    8050,  8051,  8052,  8053,  8054,  8055,  8060,  8059,  8081,  8082,
    8083,  8088,  8087,  8093,  8100,  8105,  8113,  8114,  8118,  8132,
    8131,  8144,  8145,  8149,  8150,  8154,  8164,  8174,  8175,  8180,
    8179,  8190,  8191,  8195,  8196,  8200,  8210,  8221,  8220,  8228,
    8228,  8237,  8238,  8243,  8244,  8253,  8262,  8263,  8267,  8272,
    8277,  8282,  8287,  8286,  8306,  8314,  8306,  8321,  8322,  8323,
    8324,  8325,  8329,  8336,  8343,  8345,  8356,  8357,  8361,  8362,
    8390,  8420,  8422,  8428,  8438,  8439,  8440,  8455,  8462,  8488,
    8494,  8500,  8501,  8502,  8503,  8504,  8508,  8509,  8510,  8514,
    8515,  8516,  8520,  8521,  8526,  8577,  8584,  8627,  8633,  8639,
    8645,  8651,  8657,  8663,  8669,  8673,  8679,  8685,  8691,  8697,
    8703,  8707,  8713,  8723,  8729,  8737,  8743,  8753,  8759,  8768,
    8778,  8784,  8794,  8800,  8809,  8813,  8819,  8825,  8831,  8837,
    8843,  8849,  8855,  8861,  8867,  8873,  8879,  8885,  8891,  8897,
    8901,  8902,  8906,  8907,  8911,  8912,  8916,  8917,  8921,  8922,
    8923,  8924,  8925,  8926,  8930,  8931,  8936,  8942,  8946,  8953,
    8960,  8967,  8974,  8981,  8986,  8992,  8999,  9006,  9014,  9025,
    9047,  9054,  9062,  9063,  9064,  9065,  9066,  9067,  9079,  9080,
    9081,  9082,  9083,  9089,  9093,  9099,  9105,  9111,  9117,  9119,
    9126,  9133,  9139,  9182,  9191,  9198,  9206,  9212,  9219,  9225,
    9239,  9246,  9262,  9268,  9274,  9282,  9288,  9294,  9300,  9306,
    9321,  9333,  9339,  9345,  9351,  9357,  9363,  9369,  9375,  9381,
    9387,  9393,  9399,  9405,  9411,  9417,  9423,  9429,  9437,  9458,
    9465,  9471,  9478,  9485,  9492,  9499,  9505,  9511,  9518,  9524,
    9531,  9537,  9543,  9549,  9555,  9561,  9579,  9585,  9591,  9598,
    9605,  9613,  9620,  9627,  9634,  9641,  9658,  9664,  9670,  9676,
    9682,  9689,  9695,  9701,  9707,  9713,  9720,  9733,  9739,  9745,
    9751,  9759,  9765,  9777,  9783,  9799,  9805,  9812,  9819,  9826,
    9833,  9840,  9844,  9864,  9863,  9936,  9978,  9980,  9985,  9986,
    9990,  9991,  9995,  9996, 10000, 10007, 10015, 10041, 10047, 10053,
   10059, 10065, 10071, 10080, 10087, 10089, 10086, 10096, 10107, 10113,
   10119, 10125, 10131, 10137, 10143, 10149, 10155, 10162, 10161, 10181,
   10180, 10195, 10205, 10213, 10229, 10230, 10235, 10240, 10243, 10246,
   10245, 10262, 10264, 10270, 10269, 10286, 10288, 10290, 10292, 10294,
   10296, 10298, 10300, 10302, 10304, 10310, 10316, 10319, 10318, 10324,
   10325, 10329, 10336, 10344, 10345, 10349, 10356, 10364, 10365, 10369,
   10370, 10374, 10382, 10393, 10394, 10406, 10417, 10418, 10424, 10425,
   10445, 10449, 10447, 10465, 10463, 10474, 10484, 10482, 10500, 10499,
   10509, 10520, 10518, 10537, 10536, 10547, 10559, 10560, 10561, 10565,
   10566, 10574, 10575, 10579, 10594, 10594, 10609, 10649, 10725, 10736,
   10741, 10733, 10760, 10780, 10788, 10780, 10797, 10796, 10819, 10836,
   10819, 10843, 10847, 10873, 10874, 10879, 10882, 10883, 10884, 10888,
   10889, 10894, 10893, 10899, 10898, 10906, 10907, 10910, 10912, 10912,
   10916, 10916, 10921, 10922, 10926, 10928, 10933, 10934, 10938, 10949,
   10962, 10963, 10964, 10965, 10966, 10967, 10968, 10969, 10970, 10971,
   10972, 10973, 10977, 10978, 10979, 10980, 10981, 10982, 10983, 10984,
   10985, 10989, 10990, 10991, 10992, 10995, 10997, 10998, 11002, 11003,
   11011, 11013, 11017, 11019, 11018, 11032, 11035, 11034, 11049, 11055,
   11070, 11072, 11076, 11078, 11083, 11084, 11104, 11129, 11133, 11134,
   11138, 11151, 11153, 11158, 11157, 11192, 11194, 11199, 11200, 11201,
   11206, 11213, 11217, 11218, 11222, 11226, 11230, 11237, 11244, 11251,
   11261, 11295, 11299, 11305, 11311, 11320, 11328, 11332, 11339, 11340,
   11344, 11345, 11346, 11350, 11351, 11352, 11353, 11354, 11355, 11359,
   11360, 11361, 11362, 11363, 11367, 11368, 11369, 11370, 11371, 11375,
   11376, 11377, 11378, 11379, 11383, 11388, 11389, 11393, 11394, 11397,
   11400, 11399, 11430, 11431, 11435, 11436, 11440, 11452, 11452, 11462,
   11463, 11467, 11486, 11519, 11518, 11531, 11539, 11530, 11541, 11553,
   11565, 11564, 11582, 11581, 11592, 11592, 11608, 11615, 11638, 11659,
   11671, 11676, 11675, 11685, 11691, 11698, 11703, 11708, 11718, 11719,
   11723, 11734, 11747, 11748, 11752, 11764, 11768, 11776, 11777, 11785,
   11793, 11784, 11803, 11810, 11802, 11820, 11828, 11829, 11837, 11841,
   11842, 11853, 11854, 11858, 11867, 11868, 11869, 11871, 11870, 11881,
   11882, 11886, 11887, 11889, 11888, 11892, 11891, 11897, 11898, 11902,
   11903, 11907, 11917, 11918, 11922, 11923, 11928, 11927, 11941, 11942,
   11946, 11951, 11959, 11960, 11968, 11970, 11970, 11978, 11986, 11977,
   12008, 12009, 12013, 12021, 12022, 12026, 12036, 12037, 12044, 12043,
   12059, 12058, 12072, 12071, 12083, 12082, 12096, 12097, 12101, 12114,
   12130, 12131, 12135, 12136, 12140, 12141, 12142, 12147, 12146, 12168,
   12170, 12173, 12175, 12178, 12179, 12182, 12186, 12190, 12194, 12198,
   12202, 12206, 12210, 12214, 12222, 12225, 12236, 12243, 12255, 12254,
   12270, 12277, 12285, 12293, 12301, 12309, 12317, 12324, 12331, 12337,
   12339, 12341, 12350, 12354, 12359, 12358, 12364, 12363, 12368, 12377,
   12384, 12393, 12402, 12407, 12409, 12411, 12413, 12415, 12417, 12424,
   12432, 12434, 12442, 12449, 12456, 12466, 12473, 12479, 12488, 12496,
   12500, 12505, 12513, 12518, 12525, 12532, 12539, 12546, 12553, 12560,
   12566, 12573, 12580, 12585, 12590, 12595, 12606, 12608, 12610, 12615,
   12616, 12619, 12621, 12625, 12626, 12630, 12631, 12635, 12636, 12640,
   12641, 12645, 12646, 12649, 12651, 12658, 12669, 12668, 12684, 12683,
   12693, 12694, 12698, 12699, 12700, 12704, 12705, 12706, 12719, 12728,
   12738, 12748, 12757, 12766, 12777, 12791, 12790, 12803, 12812, 12802,
   12814, 12818, 12819, 12833, 12834, 12839, 12841, 12843, 12845, 12847,
   12849, 12860, 12862, 12864, 12866, 12872, 12874, 12885, 12887, 12889,
   12891, 12893, 12895, 12897, 12902, 12903, 12907, 12908, 12912, 12911,
   12921, 12922, 12926, 12926, 12929, 12930, 12934, 12935, 12940, 12939,
   12950, 12954, 12958, 12971, 12970, 12984, 12985, 12986, 12989, 12990,
   12991, 12995, 13000, 13009, 13015, 13028, 13040, 13050, 13060, 13027,
   13068, 13069, 13073, 13074, 13078, 13079, 13087, 13091, 13092, 13093,
   13096, 13098, 13102, 13103, 13107, 13112, 13119, 13124, 13131, 13133,
   13137, 13138, 13142, 13147, 13155, 13156, 13159, 13161, 13169, 13171,
   13175, 13176, 13177, 13181, 13183, 13188, 13189, 13198, 13199, 13203,
   13204, 13208, 13221, 13245, 13257, 13268, 13287, 13295, 13307, 13315,
   13330, 13351, 13352, 13353, 13361, 13362, 13363, 13364, 13371, 13377,
   13383, 13389, 13395, 13401, 13430, 13461, 13471, 13481, 13487, 13496,
   13508, 13514, 13520, 13536, 13537, 13541, 13550, 13566, 13570, 13617,
   13621, 13639, 13643, 13722, 13747, 13778, 13779, 13795, 13805, 13809,
   13815, 13821, 13831, 13837, 13846, 13856, 13857, 13887, 13903, 13919,
   13936, 13937, 13948, 13949, 13960, 13961, 13962, 13966, 13983, 14005,
   14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029,
   14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039,
   14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049,
   14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059,
   14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069,
   14070, 14071, 14072, 14073, 14074, 14075, 14076, 14077, 14087, 14088,
   14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096, 14097, 14098,
   14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106, 14107, 14108,
   14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117, 14118,
   14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127, 14128,
   14129, 14130, 14131, 14132, 14133, 14134, 14135, 14140, 14141, 14142,
   14143, 14144, 14145, 14146, 14147, 14148, 14149, 14150, 14151, 14152,
   14153, 14154, 14155, 14156, 14157, 14158, 14159, 14160, 14161, 14162,
   14163, 14164, 14165, 14166, 14167, 14168, 14169, 14170, 14171, 14172,
   14173, 14174, 14175, 14176, 14177, 14178, 14179, 14180, 14181, 14182,
   14183, 14184, 14185, 14186, 14187, 14188, 14189, 14190, 14191, 14192,
   14193, 14194, 14195, 14196, 14197, 14198, 14199, 14200, 14201, 14202,
   14203, 14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211, 14212,
   14213, 14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221, 14222,
   14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231, 14232,
   14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241, 14242,
   14243, 14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251, 14252,
   14253, 14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262,
   14263, 14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272,
   14273, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282,
   14283, 14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291, 14292,
   14293, 14294, 14295, 14296, 14297, 14298, 14299, 14300, 14301, 14302,
   14303, 14304, 14305, 14306, 14307, 14308, 14309, 14310, 14311, 14312,
   14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322,
   14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332,
   14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342,
   14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351, 14352,
   14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361, 14362,
   14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371, 14372,
   14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14382,
   14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391, 14392,
   14393, 14394, 14395, 14407, 14406, 14425, 14424, 14431, 14430, 14440,
   14439, 14450, 14449, 14455, 14463, 14465, 14470, 14470, 14479, 14478,
   14492, 14491, 14496, 14500, 14501, 14502, 14506, 14507, 14508, 14509,
   14513, 14514, 14515, 14516, 14521, 14546, 14573, 14584, 14597, 14611,
   14626, 14645, 14673, 14686, 14713, 14756, 14770, 14771, 14772, 14773,
   14777, 14795, 14813, 14814, 14818, 14819, 14820, 14821, 14825, 14826,
   14844, 14856, 14857, 14858, 14864, 14870, 14882, 14881, 14897, 14898,
   14902, 14903, 14907, 14922, 14923, 14924, 14929, 14930, 14935, 14934,
   14954, 14966, 14979, 14978, 15012, 15013, 15017, 15018, 15022, 15023,
   15024, 15025, 15027, 15026, 15039, 15040, 15041, 15042, 15043, 15049,
   15054, 15060, 15071, 15082, 15086, 15096, 15101, 15108, 15120, 15132,
   15141, 15143, 15147, 15148, 15155, 15157, 15161, 15162, 15167, 15166,
   15170, 15169, 15173, 15172, 15176, 15175, 15178, 15179, 15180, 15181,
   15182, 15183, 15184, 15185, 15186, 15187, 15188, 15189, 15190, 15191,
   15192, 15193, 15194, 15195, 15196, 15197, 15198, 15199, 15200, 15201,
   15202, 15203, 15207, 15208, 15212, 15213, 15217, 15227, 15237, 15250,
   15265, 15278, 15291, 15303, 15308, 15316, 15321, 15328, 15328, 15329,
   15329, 15332, 15361, 15366, 15372, 15378, 15384, 15388, 15392, 15393,
   15397, 15424, 15426, 15430, 15434, 15438, 15445, 15446, 15450, 15451,
   15455, 15456, 15460, 15461, 15467, 15473, 15479, 15489, 15488, 15498,
   15499, 15504, 15505, 15506, 15511, 15512, 15513, 15517, 15518, 15522,
   15534, 15543, 15553, 15562, 15576, 15577, 15582, 15581, 15597, 15598,
   15599, 15603, 15604, 15608, 15608, 15632, 15633, 15637, 15638, 15639,
   15643, 15647, 15654, 15657, 15655, 15671, 15678, 15699, 15716, 15718,
   15722, 15723, 15727, 15728, 15736, 15737, 15738, 15739, 15745, 15751,
   15761, 15763, 15765, 15770, 15771, 15772, 15773, 15774, 15778, 15779,
   15780, 15781, 15782, 15783, 15793, 15794, 15799, 15812, 15825, 15827,
   15829, 15834, 15839, 15841, 15843, 15849, 15850, 15852, 15858, 15857,
   15875, 15876, 15880, 15885, 15893, 15893, 15918, 15919, 15924, 15925,
   15927, 15929, 15947, 15953, 15958, 15940, 16020, 16038, 16063, 16095,
   16099, 16108, 16131, 16059, 16196, 16220, 16229, 16237, 16195, 16258,
   16262, 16266, 16270, 16274, 16278, 16285, 16292, 16299, 16309, 16310,
   16314, 16315, 16316, 16320, 16321, 16326, 16328, 16327, 16333, 16334,
   16338, 16345, 16355, 16361, 16372
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "CCDB_OPENDB_SYM", "CCDB_CLOSEDB_SYM",
  "CCDB_PORT_SYM", "CCDB_OPENTABLE_SYM", "CCDB_SHOW_CCTABLES_SYM",
  "CCDB_PUBLISH_STATUS_SYM", "CCDB_SHOW_STATUS_SYM", "CCDB_PUBLISH_SYM",
  "CCDB_LOCK_CCTABLE_SYM", "CCDB_UNLOCK_CCTABLE_SYM", "ABORT_SYM",
  "ACCESSIBLE_SYM", "ACTION", "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_POS_SYM",
  "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES",
  "DATAFILE_SYM", "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL",
  "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM",
  "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM",
  "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM",
  "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE",
  "DES_KEY_FILE", "DETERMINISTIC_SYM", "DIAGNOSTICS_SYM", "DIRECTORY_SYM",
  "DISABLE_SYM", "DISCARD", "DISK_SYM", "DISTINCT", "DIV_SYM",
  "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM",
  "DYNAMIC_SYM", "EACH_SYM", "ELSE", "ELSEIF_SYM", "ENABLE_SYM",
  "ENCLOSED", "END", "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM",
  "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM", "ERROR_SYM", "ERRORS",
  "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM",
  "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM",
  "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM",
  "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM",
  "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM",
  "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL", "GENERATED_SYM",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GET_SYM",
  "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM",
  "GT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING", "HELP_SYM",
  "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM",
  "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM",
  "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM",
  "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM", "INNER_SYM",
  "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LAST_VALUE", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT",
  "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM",
  "LINES", "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM", "MASTER_HOST_SYM",
  "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM",
  "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM",
  "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM",
  "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM",
  "MATCH", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM", "ONLY_SYM", "ONLINE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PAGE_CHECKSUM_SYM",
  "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM", "PARTIAL",
  "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM", "PASSWORD",
  "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM",
  "PURGE", "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNED_SQLSTATE_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES",
  "SLAVE_POS_SYM", "SLOW", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM",
  "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_STATS_SYM", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM",
  "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "ignore_server_id_list",
  "ignore_server_id", "master_file_def", "optional_connection_name",
  "connection_name", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "$@11", "$@12", "$@13", "server_def", "server_options_list",
  "server_option", "event_tail", "$@14", "ev_schedule_time", "$@15",
  "opt_ev_status", "ev_starts", "ev_ends", "opt_ev_on_completion",
  "ev_on_completion", "opt_ev_comment", "ev_sql_stmt", "$@16",
  "ev_sql_stmt_inner", "clear_privileges", "sp_name", "sp_a_chistics",
  "sp_c_chistics", "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@17",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19",
  "sp_cursor_stmt", "$@20", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@21", "sp_proc_stmt_statement",
  "$@22", "sp_proc_stmt_return", "$@23", "sp_proc_stmt_unlabeled", "$@24",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@26", "$@27", "$@28", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@29", "$@30",
  "searched_case_stmt", "$@31", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@32", "$@33",
  "searched_when_clause", "$@34", "$@35", "else_clause_opt",
  "sp_labeled_control", "$@36", "sp_opt_label", "sp_labeled_block", "$@37",
  "sp_unlabeled_block", "$@38", "sp_block_content", "$@39",
  "sp_unlabeled_control", "$@40", "$@41", "$@42", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@44", "$@45", "create_like", "opt_create_select", "$@46", "$@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@48",
  "have_partitioning", "partition_entry", "$@49", "partition",
  "part_type_def", "$@50", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@51",
  "$@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@53", "part_name", "opt_part_values", "$@54", "$@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@61", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "$@62", "$@63", "$@64", "$@65", "opt_check_constraint",
  "check_constraint", "opt_constraint", "constraint", "field_spec", "$@66",
  "field_def", "opt_generated_always", "vcol_opt_specifier",
  "vcol_opt_attribute", "vcol_opt_attribute_list", "vcol_attribute",
  "parse_vcol_expr", "virtual_column_func", "type", "$@67", "$@68",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "hex_num_or_string",
  "charset", "charset_name", "charset_name_or_default",
  "opt_load_data_charset", "old_or_new_charset_name",
  "old_or_new_charset_name_or_default", "collation_name", "opt_collate",
  "collation_name_or_default", "opt_default", "ascii", "unicode",
  "opt_binary", "opt_bin_mod", "opt_primary", "references", "opt_ref_list",
  "ref_list", "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@69", "$@70", "$@71", "$@72", "$@73", "$@74", "$@75", "$@76",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@77", "$@78", "$@79",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@80", "add_part_extra", "reorg_partition_rule", "$@81",
  "reorg_parts_rule", "$@82", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@83", "$@84", "$@85",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "alter_options", "$@86",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@87", "$@88", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@89",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@90", "opt_checksum_type", "repair",
  "$@91", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@92", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@93", "persistent_index_stat_spec",
  "$@94", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check", "$@95", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@96",
  "opt_no_write_to_binlog", "rename", "$@97", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@98",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@99",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@100", "cache_keys_spec",
  "$@101", "cache_key_list_or_empty", "opt_ignore_leaves", "select",
  "select_init", "select_paren", "select_paren_derived", "select_init2",
  "$@102", "select_part2", "$@103", "$@104", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "opt_default_time_precision",
  "opt_time_precision", "optional_braces", "expr", "bool_pri", "predicate",
  "bit_expr", "or", "and", "not", "not2", "comp_op", "all_or_any",
  "opt_dyncol_type", "dyncol_type", "dyncall_create_element",
  "dyncall_create_list", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@105", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@106", "$@107", "$@108",
  "variable", "$@109", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "$@110", "gorder_list",
  "in_sum_expr", "$@111", "cast_type", "$@112", "opt_expr_list",
  "expr_list", "ident_list_arg", "ident_list", "opt_expr", "opt_else",
  "when_list", "table_ref", "join_table_list", "esc_table_ref",
  "derived_table_list", "join_table", "$@113", "$@114", "$@115", "$@116",
  "$@117", "$@118", "inner_join", "normal_join", "opt_use_partition",
  "use_partition", "table_factor", "$@119", "select_derived_union",
  "$@120", "$@121", "select_init2_derived", "select_part2_derived",
  "$@122", "$@123", "select_derived", "$@124", "select_derived2", "$@125",
  "$@126", "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@127",
  "$@128", "index_hints_list", "opt_index_hints_list", "$@129",
  "opt_key_definition", "$@130", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@131", "having_clause", "$@132", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@133", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@134", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@135",
  "select_var_list", "select_var_ident", "into", "$@136",
  "into_destination", "$@137", "$@138", "do", "$@139", "drop", "$@140",
  "$@141", "$@142", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@143",
  "$@144", "replace", "$@145", "$@146", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@147", "fields", "insert_values", "$@148", "$@149", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@150", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@151", "update", "$@152", "$@153", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@154", "single_multi", "$@155", "$@156", "$@157", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@158", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@159", "show_param",
  "$@160", "$@161", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@162", "$@163", "describe_command",
  "opt_extended_describe", "opt_describe_column", "ccdb_lock_cctable",
  "ccdb_unlock_cctable", "ccdb_opentable", "ccdb_closedb", "ccdb_opendb",
  "ccdb_publish_status", "ccdb_publish", "flush", "$@164", "flush_options",
  "$@165", "$@166", "opt_with_read_lock", "flush_options_list",
  "flush_option", "opt_table_list", "optional_flush_tables_arguments",
  "reset", "$@167", "reset_options", "reset_option", "$@168",
  "slave_reset_options", "purge", "$@169", "purge_options", "purge_option",
  "kill", "$@170", "kill_type", "kill_option", "kill_expr", "shutdown",
  "use", "load", "$@171", "$@172", "$@173", "$@174", "data_or_xml",
  "opt_local", "load_data_lock", "opt_duplicate", "opt_field_term",
  "field_term_list", "field_term", "opt_line_term", "line_term_list",
  "line_term", "opt_xml_rows_identified_by", "opt_ignore_lines",
  "lines_or_rows", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "load_data_set_list",
  "load_data_set_elem", "text_literal", "text_string", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@175", "start_option_value_list", "$@176", "$@177", "$@178",
  "start_option_value_list_following_option_type", "$@179",
  "option_value_list_continued", "option_value_list", "$@180", "$@181",
  "option_value", "$@182", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@183",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@184", "handler", "$@185", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@186",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@187", "$@188", "$@189",
  "$@190", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@191", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@192",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@193",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@194", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@195",
  "view_list_opt", "view_list", "view_select", "$@196", "view_select_aux",
  "view_check_option", "trigger_tail", "$@197", "$@198", "$@199",
  "udf_tail", "sf_tail", "$@200", "$@201", "$@202", "$@203", "$@204",
  "sp_tail", "$@205", "$@206", "$@207", "$@208", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@209", "opt_migrate", "install", "uninstall", "keep_gcc_happy", YY_NULL
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,   897,   898,   899,   900,   124,    38,    45,    43,
      42,    47,    37,    94,   126,    40,    41,    44,    33,   123,
     125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   665,   666,   667,   666,   666,   668,   668,   669,   669,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   670,   670,   670,   670,   670,   670,   670,   670,
     670,   670,   671,   672,   672,   673,   674,   674,   676,   675,
     677,   677,   678,   678,   679,   681,   680,   683,   682,   684,
     684,   685,   685,   685,   685,   685,   685,   685,   685,   685,
     685,   685,   685,   685,   685,   685,   685,   685,   686,   686,
     686,   687,   688,   688,   688,   688,   688,   688,   688,   689,
     689,   690,   692,   691,   693,   694,   691,   695,   696,   691,
     697,   698,   691,   699,   691,   700,   691,   691,   691,   691,
     691,   701,   702,   702,   703,   703,   703,   703,   703,   703,
     703,   705,   704,   707,   706,   706,   708,   708,   708,   708,
     709,   709,   710,   710,   711,   711,   712,   712,   713,   713,
     715,   714,   716,   716,   716,   716,   716,   716,   716,   716,
     716,   716,   716,   716,   716,   717,   718,   718,   719,   719,
     720,   720,   721,   721,   721,   721,   721,   721,   721,   722,
     722,   722,   723,   723,   725,   724,   726,   726,   727,   727,
     728,   728,   729,   729,   730,   730,   731,   732,   733,   733,
     734,   734,   735,   736,   736,   736,   736,   737,   737,   738,
     738,   739,   739,   741,   740,   740,   742,   740,   740,   744,
     743,   745,   745,   746,   746,   747,   748,   748,   749,   750,
     750,   751,   751,   751,   751,   751,   752,   753,   753,   754,
     754,   755,   755,   756,   756,   757,   757,   757,   758,   758,
     758,   758,   758,   758,   758,   758,   758,   758,   758,   758,
     759,   760,   761,   761,   762,   762,   763,   763,   764,   765,
     765,   766,   766,   767,   768,   768,   769,   770,   770,   770,
     770,   770,   770,   770,   770,   770,   770,   770,   770,   770,
     771,   771,   772,   772,   773,   773,   773,   773,   773,   773,
     773,   773,   773,   773,   773,   773,   773,   775,   774,   777,
     776,   779,   778,   781,   780,   782,   783,   784,   786,   785,
     787,   788,   788,   788,   789,   789,   791,   792,   793,   790,
     794,   794,   794,   795,   795,   797,   798,   796,   800,   799,
     801,   801,   802,   802,   804,   805,   803,   807,   808,   806,
     809,   809,   811,   810,   812,   812,   814,   813,   816,   815,
     818,   817,   819,   820,   821,   819,   822,   819,   823,   823,
     824,   824,   824,   825,   826,   827,   828,   828,   829,   829,
     830,   831,   832,   832,   834,   833,   835,   835,   835,   836,
     836,   836,   837,   838,   838,   838,   839,   839,   839,   839,
     839,   839,   839,   839,   840,   841,   841,   841,   842,   842,
     842,   842,   842,   843,   844,   844,   844,   845,   845,   845,
     845,   845,   845,   845,   846,   847,   847,   847,   848,   848,
     848,   849,   850,   851,   852,   853,   854,   854,   854,   855,
     856,   857,   858,   859,   860,   861,   862,   863,   864,   864,
     865,   865,   866,   866,   868,   867,   867,   869,   867,   867,
     870,   870,   871,   872,   871,   873,   871,   874,   875,   875,
     877,   876,   878,   880,   879,   881,   882,   883,   882,   882,
     882,   882,   882,   884,   884,   885,   885,   886,   886,   887,
     888,   889,   890,   891,   891,   892,   893,   892,   894,   892,
     895,   895,   896,   897,   898,   898,   899,   899,   900,   900,
     902,   901,   903,   904,   905,   904,   906,   904,   907,   907,
     908,   908,   909,   909,   911,   912,   910,   913,   913,   914,
     914,   915,   915,   916,   916,   918,   917,   919,   920,   920,
     921,   921,   922,   922,   922,   922,   922,   922,   922,   922,
     922,   924,   925,   923,   926,   926,   927,   927,   928,   928,
     929,   929,   930,   930,   931,   931,   932,   933,   933,   934,
     934,   935,   935,   936,   936,   936,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   938,   937,   937,   937,
     937,   937,   937,   937,   937,   937,   937,   937,   937,   937,
     937,   937,   937,   939,   940,   941,   942,   943,   943,   943,
     943,   943,   943,   943,   944,   944,   944,   945,   945,   946,
     946,   946,   946,   947,   948,   948,   949,   949,   950,   950,
     952,   951,   953,   951,   954,   951,   955,   951,   951,   951,
     956,   956,   957,   958,   958,   959,   961,   960,   962,   962,
     963,   963,   964,   964,   964,   965,   965,   966,   966,   967,
     967,   967,   968,   969,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   970,   970,   970,   970,
     970,   970,   970,   970,   970,   970,   970,   970,   970,   971,
     970,   972,   970,   970,   970,   973,   973,   973,   973,   973,
     973,   973,   973,   974,   975,   975,   976,   976,   977,   977,
     977,   977,   977,   978,   978,   978,   978,   978,   979,   979,
     979,   980,   980,   980,   981,   982,   982,   983,   983,   984,
     984,   984,   985,   985,   985,   985,   986,   986,   987,   987,
     988,   988,   989,   989,   990,   990,   990,   990,   990,   990,
     990,   990,   990,   990,   990,   990,   990,   990,   990,   991,
     992,   992,   993,   993,   994,   994,   995,   995,   996,   996,
     997,   997,   998,   998,   999,   999,  1000,  1001,  1001,  1002,
    1002,  1003,  1003,  1004,  1004,  1004,  1005,  1005,  1005,  1006,
    1006,  1006,  1006,  1006,  1006,  1006,  1007,  1007,  1008,  1008,
    1009,  1010,  1010,  1011,  1011,  1012,  1012,  1012,  1012,  1013,
    1013,  1013,  1013,  1013,  1014,  1014,  1014,  1014,  1014,  1015,
    1016,  1016,  1017,  1017,  1018,  1018,  1019,  1019,  1019,  1020,
    1020,  1021,  1022,  1023,  1024,  1024,  1025,  1025,  1026,  1026,
    1027,  1027,  1028,  1028,  1029,  1029,  1030,  1030,  1031,  1031,
    1032,  1032,  1032,  1032,  1032,  1032,  1033,  1033,  1034,  1035,
    1035,  1036,  1036,  1036,  1037,  1037,  1038,  1038,  1039,  1039,
    1040,  1041,  1041,  1042,  1042,  1044,  1045,  1043,  1046,  1043,
    1043,  1047,  1043,  1048,  1043,  1049,  1043,  1050,  1043,  1051,
    1043,  1043,  1043,  1043,  1043,  1043,  1052,  1052,  1052,  1052,
    1053,  1053,  1054,  1054,  1055,  1055,  1056,  1056,  1056,  1056,
    1056,  1056,  1056,  1056,  1056,  1056,  1057,  1056,  1056,  1058,
    1056,  1059,  1056,  1056,  1056,  1056,  1056,  1060,  1061,  1061,
    1063,  1062,  1064,  1064,  1064,  1066,  1065,  1067,  1068,  1067,
    1069,  1069,  1070,  1071,  1071,  1072,  1073,  1073,  1073,  1074,
    1073,  1075,  1076,  1073,  1073,  1073,  1073,  1073,  1073,  1073,
    1073,  1073,  1073,  1073,  1073,  1073,  1073,  1073,  1073,  1077,
    1077,  1077,  1077,  1077,  1078,  1078,  1079,  1079,  1080,  1080,
    1081,  1081,  1083,  1082,  1084,  1084,  1085,  1085,  1086,  1086,
    1087,  1087,  1087,  1088,  1088,  1088,  1089,  1089,  1089,  1089,
    1091,  1090,  1092,  1090,  1090,  1090,  1093,  1094,  1094,  1095,
    1095,  1096,  1096,  1096,  1098,  1097,  1099,  1099,  1100,  1100,
    1100,  1101,  1101,  1101,  1102,  1102,  1104,  1103,  1105,  1105,
    1105,  1107,  1106,  1108,  1108,  1109,  1109,  1110,  1110,  1110,
    1112,  1111,  1113,  1113,  1114,  1115,  1115,  1116,  1116,  1117,
    1118,  1117,  1119,  1120,  1119,  1121,  1121,  1121,  1122,  1122,
    1122,  1123,  1123,  1124,  1126,  1125,  1127,  1127,  1128,  1128,
    1129,  1129,  1129,  1129,  1129,  1129,  1131,  1130,  1132,  1132,
    1132,  1134,  1133,  1133,  1135,  1135,  1136,  1136,  1137,  1139,
    1138,  1140,  1140,  1141,  1141,  1142,  1143,  1144,  1144,  1146,
    1145,  1147,  1147,  1148,  1148,  1149,  1150,  1152,  1151,  1154,
    1153,  1155,  1155,  1156,  1156,  1157,  1158,  1158,  1159,  1159,
    1160,  1160,  1162,  1161,  1164,  1165,  1163,  1166,  1166,  1166,
    1166,  1166,  1167,  1167,  1168,  1168,  1169,  1169,  1170,  1170,
    1170,  1171,  1171,  1171,  1172,  1172,  1172,  1173,  1173,  1174,
    1175,  1176,  1176,  1176,  1176,  1176,  1177,  1177,  1177,  1178,
    1178,  1178,  1179,  1179,  1180,  1180,  1180,  1180,  1180,  1180,
    1180,  1180,  1180,  1180,  1180,  1181,  1181,  1181,  1181,  1181,
    1181,  1182,  1182,  1182,  1182,  1182,  1182,  1182,  1182,  1182,
    1182,  1182,  1182,  1182,  1182,  1183,  1183,  1183,  1183,  1183,
    1183,  1183,  1183,  1183,  1183,  1183,  1183,  1183,  1183,  1183,
    1184,  1184,  1185,  1185,  1186,  1186,  1187,  1187,  1188,  1188,
    1188,  1188,  1188,  1188,  1189,  1189,  1190,  1190,  1191,  1191,
    1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,  1191,  1192,
    1193,  1193,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,
    1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,
    1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,  1194,
    1194,  1194,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
    1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,
    1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1195,  1196,
    1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,
    1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,  1196,
    1196,  1196,  1196,  1196,  1196,  1196,  1197,  1197,  1197,  1197,
    1197,  1197,  1197,  1197,  1197,  1197,  1197,  1197,  1197,  1197,
    1197,  1197,  1197,  1197,  1197,  1198,  1198,  1198,  1198,  1198,
    1198,  1198,  1198,  1200,  1199,  1199,  1201,  1201,  1202,  1202,
    1203,  1203,  1204,  1204,  1205,  1205,  1206,  1207,  1207,  1207,
    1207,  1207,  1207,  1207,  1208,  1209,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1207,  1207,  1207,  1207,  1210,  1207,  1212,
    1211,  1213,  1213,  1213,  1214,  1214,  1215,  1215,  1216,  1217,
    1216,  1218,  1218,  1220,  1219,  1221,  1221,  1221,  1221,  1221,
    1221,  1221,  1221,  1221,  1221,  1221,  1221,  1222,  1221,  1223,
    1223,  1224,  1224,  1225,  1225,  1226,  1226,  1227,  1227,  1228,
    1228,  1229,  1229,  1230,  1230,  1231,  1232,  1232,  1233,  1233,
    1234,  1235,  1234,  1236,  1234,  1234,  1237,  1234,  1238,  1234,
    1234,  1239,  1234,  1240,  1234,  1234,  1241,  1241,  1241,  1242,
    1242,  1243,  1243,  1244,  1246,  1245,  1245,  1245,  1247,  1248,
    1249,  1247,  1250,  1252,  1253,  1251,  1255,  1254,  1257,  1258,
    1256,  1259,  1260,  1261,  1261,  1262,  1262,  1262,  1262,  1263,
    1263,  1265,  1264,  1266,  1264,  1267,  1267,  1268,  1269,  1268,
    1271,  1270,  1272,  1272,  1273,  1273,  1274,  1274,  1275,  1275,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1277,  1277,  1277,  1277,  1277,  1277,  1277,  1277,
    1277,  1278,  1278,  1278,  1278,  1279,  1279,  1279,  1280,  1280,
    1281,  1281,  1282,  1283,  1282,  1284,  1285,  1284,  1286,  1286,
    1287,  1287,  1288,  1288,  1289,  1289,  1289,  1290,  1291,  1291,
    1292,  1293,  1293,  1295,  1294,  1296,  1296,  1297,  1297,  1297,
    1298,  1298,  1299,  1299,  1300,  1300,  1300,  1301,  1301,  1301,
    1302,  1302,  1302,  1302,  1302,  1303,  1304,  1304,  1304,  1304,
    1305,  1305,  1305,  1306,  1306,  1306,  1306,  1306,  1306,  1307,
    1307,  1307,  1307,  1307,  1308,  1308,  1308,  1308,  1308,  1309,
    1309,  1309,  1309,  1309,  1310,  1311,  1311,  1312,  1312,  1313,
    1314,  1313,  1315,  1315,  1316,  1316,  1317,  1319,  1318,  1320,
    1320,  1321,  1321,  1323,  1322,  1325,  1326,  1324,  1324,  1324,
    1328,  1327,  1330,  1329,  1331,  1329,  1329,  1329,  1329,  1329,
    1329,  1332,  1329,  1329,  1329,  1329,  1329,  1329,  1333,  1333,
    1334,  1335,  1336,  1336,  1337,  1338,  1338,  1339,  1339,  1341,
    1342,  1340,  1344,  1345,  1343,  1346,  1346,  1346,  1346,  1347,
    1347,  1348,  1348,  1349,  1350,  1350,  1350,  1351,  1350,  1352,
    1352,  1353,  1353,  1354,  1353,  1355,  1353,  1356,  1356,  1357,
    1357,  1358,  1359,  1359,  1360,  1360,  1362,  1361,  1363,  1363,
    1364,  1364,  1365,  1365,  1366,  1367,  1366,  1369,  1370,  1368,
    1371,  1371,  1372,  1373,  1373,  1374,  1375,  1375,  1377,  1376,
    1379,  1378,  1380,  1378,  1381,  1378,  1382,  1382,  1383,  1383,
    1384,  1384,  1385,  1385,  1386,  1386,  1386,  1388,  1387,  1389,
    1389,  1390,  1390,  1391,  1391,  1392,  1392,  1392,  1392,  1392,
    1392,  1392,  1392,  1392,  1393,  1393,  1394,  1394,  1395,  1394,
    1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,
    1396,  1396,  1396,  1396,  1397,  1396,  1398,  1396,  1396,  1396,
    1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,
    1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,
    1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,  1396,
    1396,  1396,  1396,  1396,  1396,  1396,  1399,  1399,  1399,  1400,
    1400,  1401,  1401,  1402,  1402,  1403,  1403,  1404,  1404,  1405,
    1405,  1406,  1406,  1407,  1407,  1407,  1409,  1408,  1410,  1408,
    1411,  1411,  1412,  1412,  1412,  1413,  1413,  1413,  1414,  1415,
    1416,  1417,  1418,  1419,  1420,  1422,  1421,  1424,  1425,  1423,
    1423,  1426,  1426,  1427,  1427,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,  1428,
    1428,  1428,  1428,  1428,  1429,  1429,  1430,  1430,  1432,  1431,
    1433,  1433,  1435,  1434,  1434,  1434,  1436,  1436,  1438,  1437,
    1439,  1440,  1440,  1442,  1441,  1443,  1443,  1443,  1444,  1444,
    1444,  1445,  1445,  1446,  1447,  1449,  1450,  1451,  1452,  1448,
    1453,  1453,  1454,  1454,  1455,  1455,  1455,  1456,  1456,  1456,
    1457,  1457,  1458,  1458,  1459,  1459,  1459,  1459,  1460,  1460,
    1461,  1461,  1462,  1462,  1463,  1463,  1464,  1464,  1465,  1465,
    1466,  1466,  1466,  1467,  1467,  1468,  1468,  1469,  1469,  1470,
    1470,  1471,  1472,  1472,  1472,  1472,  1473,  1473,  1473,  1473,
    1474,  1475,  1475,  1475,  1476,  1476,  1476,  1476,  1476,  1476,
    1476,  1476,  1476,  1476,  1476,  1477,  1477,  1477,  1477,  1477,
    1478,  1478,  1478,  1479,  1479,  1480,  1480,  1481,  1482,  1482,
    1483,  1483,  1484,  1484,  1484,  1485,  1485,  1485,  1485,  1486,
    1486,  1486,  1487,  1487,  1488,  1489,  1489,  1490,  1491,  1492,
    1493,  1493,  1494,  1494,  1495,  1495,  1495,  1496,  1496,  1496,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,
    1497,  1497,  1497,  1497,  1497,  1497,  1497,  1497,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,  1498,
    1498,  1498,  1498,  1500,  1499,  1502,  1501,  1503,  1501,  1504,
    1501,  1506,  1505,  1505,  1507,  1507,  1509,  1508,  1510,  1508,
    1512,  1511,  1511,  1513,  1513,  1513,  1514,  1514,  1514,  1514,
    1515,  1515,  1515,  1515,  1516,  1517,  1517,  1517,  1517,  1517,
    1517,  1517,  1517,  1518,  1518,  1518,  1519,  1519,  1519,  1519,
    1520,  1521,  1522,  1522,  1523,  1523,  1523,  1523,  1524,  1524,
    1524,  1525,  1525,  1525,  1525,  1525,  1527,  1526,  1528,  1528,
    1529,  1529,  1530,  1531,  1531,  1531,  1531,  1531,  1533,  1532,
    1534,  1534,  1535,  1534,  1536,  1536,  1537,  1537,  1538,  1538,
    1538,  1538,  1539,  1538,  1540,  1540,  1540,  1540,  1540,  1541,
    1542,  1542,  1542,  1542,  1542,  1543,  1544,  1544,  1544,  1544,
    1545,  1545,  1546,  1546,  1547,  1547,  1548,  1548,  1550,  1549,
    1551,  1549,  1552,  1549,  1553,  1549,  1549,  1549,  1549,  1549,
    1549,  1549,  1549,  1549,  1549,  1549,  1549,  1549,  1549,  1549,
    1549,  1549,  1549,  1549,  1549,  1549,  1549,  1549,  1549,  1549,
    1549,  1549,  1554,  1554,  1555,  1555,  1556,  1556,  1556,  1557,
    1557,  1557,  1557,  1558,  1558,  1559,  1559,  1560,  1560,  1561,
    1561,  1562,  1562,  1562,  1562,  1562,  1563,  1563,  1564,  1564,
    1565,  1566,  1566,  1566,  1566,  1566,  1567,  1567,  1568,  1568,
    1569,  1569,  1570,  1570,  1570,  1570,  1570,  1572,  1571,  1573,
    1573,  1574,  1574,  1574,  1575,  1575,  1575,  1576,  1576,  1577,
    1578,  1578,  1579,  1580,  1581,  1581,  1583,  1582,  1584,  1584,
    1584,  1585,  1585,  1587,  1586,  1588,  1588,  1589,  1589,  1589,
    1590,  1590,  1591,  1592,  1591,  1593,  1594,  1595,  1596,  1596,
    1597,  1597,  1598,  1598,  1598,  1598,  1598,  1598,  1598,  1598,
    1599,  1599,  1599,  1600,  1600,  1600,  1600,  1600,  1601,  1601,
    1601,  1601,  1601,  1601,  1602,  1602,  1603,  1604,  1605,  1605,
    1605,  1606,  1607,  1607,  1607,  1608,  1608,  1608,  1610,  1609,
    1611,  1611,  1612,  1612,  1614,  1613,  1615,  1615,  1616,  1616,
    1616,  1616,  1618,  1619,  1620,  1617,  1621,  1621,  1623,  1624,
    1625,  1626,  1627,  1622,  1629,  1630,  1631,  1632,  1628,  1633,
    1633,  1633,  1633,  1633,  1633,  1634,  1634,  1634,  1635,  1635,
    1636,  1636,  1636,  1637,  1637,  1638,  1639,  1638,  1640,  1640,
    1641,  1641,  1642,  1642,  1643
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     4,     1,     2,     0,     4,
       0,     2,     3,     1,     2,     0,     3,     0,     6,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     5,     1,     0,     1,
       3,     1,     3,     3,     3,     3,     3,     3,     3,     0,
       1,     1,     0,     7,     0,     0,    15,     0,     0,    15,
       0,     0,    15,     0,     6,     0,     3,     4,     4,     3,
       2,    10,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     0,    13,     0,     6,     2,     0,     1,     3,     1,
       0,     2,     0,     2,     0,     1,     3,     4,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     0,     2,
       0,     2,     2,     2,     2,     2,     3,     3,     1,     1,
       1,     2,     3,     3,     0,     4,     0,     3,     0,     1,
       3,     1,     0,     1,     3,     1,     0,     3,     0,     1,
       3,     1,     4,     0,     1,     1,     1,     0,     3,     2,
       3,     0,     3,     0,     5,     5,     0,     7,     5,     0,
       2,     1,     1,     1,     3,     1,     1,     1,     3,     0,
       1,     1,     1,     1,     2,     1,     3,     1,     1,     0,
       1,     0,     2,     3,     5,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     4,     0,     1,     1,     3,     1,     3,     3,     1,
       2,     1,     1,     1,     1,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     0,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     5,     0,
       2,     0,     3,     0,     2,     2,     2,     2,     0,     6,
       2,     0,     2,     1,     1,     3,     0,     0,     0,     7,
       0,     2,     2,     1,     1,     0,     0,     8,     0,     6,
       1,     2,     1,     2,     0,     0,     6,     0,     0,     6,
       0,     2,     0,     5,     0,     1,     0,     5,     0,     2,
       0,     5,     4,     0,     0,     8,     0,     7,     1,     1,
       1,     1,     1,     2,     4,     5,     0,     4,     4,     4,
       3,     3,     2,     2,     0,     2,     1,     2,     3,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     1,
       1,     2,     2,     2,     1,     1,     1,     1,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     4,     0,     1,
       1,     1,     1,     1,     0,     7,     3,     0,     5,     1,
       2,     4,     0,     0,     5,     0,     7,     1,     0,     1,
       0,     4,     0,     0,     3,     5,     5,     0,     4,     2,
       2,     2,     2,     0,     1,     0,     1,     1,     3,     1,
       4,     5,     5,     0,     2,     0,     0,     7,     0,     9,
       1,     3,     1,     1,     0,     2,     0,     3,     1,     3,
       0,     6,     1,     0,     0,     5,     0,     4,     1,     1,
       1,     3,     1,     3,     0,     0,     5,     1,     3,     1,
       1,     0,     3,     1,     3,     0,     4,     1,     0,     1,
       2,     1,     3,     4,     3,     3,     3,     3,     4,     4,
       3,     0,     0,     6,     0,     1,     0,     1,     1,     2,
       1,     1,     0,     1,     1,     2,     1,     0,     3,     0,
       1,     1,     2,     1,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     2,     2,
       0,     8,     0,     9,     0,     9,     0,     9,     8,     2,
       0,     1,     4,     0,     1,     2,     0,     3,     2,     8,
       0,     2,     0,     1,     1,     0,     1,     2,     1,     1,
       2,     2,     4,     3,     3,     3,     3,     1,     2,     1,
       1,     3,     2,     3,     2,     2,     1,     3,     3,     2,
       3,     1,     2,     2,     2,     1,     2,     1,     1,     1,
       2,     3,     2,     3,     2,     2,     3,     3,     3,     0,
       6,     0,     6,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     1,     2,     1,
       2,     3,     2,     1,     1,     1,     1,     1,     1,     1,
       2,     0,     1,     1,     5,     0,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     0,     1,     0,     1,
       0,     1,     2,     1,     1,     2,     2,     4,     1,     3,
       2,     1,     2,     2,     2,     3,     3,     3,     3,     2,
       2,     1,     1,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     1,     2,     2,     1,     2,     2,     0,
       1,     1,     1,     3,     1,     3,     0,     1,     0,     1,
       5,     0,     3,     3,     1,     0,     2,     2,     2,     0,
       3,     3,     6,     6,     1,     1,     2,     2,     2,     1,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     2,     0,     1,     0,     1,
       0,     1,     1,     2,     1,     2,     1,     2,     2,     2,
       3,     2,     3,     3,     3,     3,     1,     1,     1,     1,
       3,     1,     1,     1,     4,     2,     1,     4,     0,     1,
       2,     0,     2,     1,     3,     0,     0,     7,     0,     5,
       7,     0,     5,     0,     5,     0,     5,     0,     4,     0,
      10,     3,     4,     3,     3,     7,     0,     3,     1,     4,
       0,     3,     0,     2,     0,     1,     0,     2,     2,     2,
       2,     1,     1,     1,     4,     4,     0,     6,     4,     0,
       5,     0,     6,     4,     3,     1,     7,     2,     1,     1,
       0,     6,     0,     3,     2,     0,     5,     0,     0,     6,
       1,     3,     1,     1,     3,     3,     3,     2,     4,     0,
       7,     0,     0,     8,     5,     5,     3,     4,     2,     2,
       6,     5,     3,     5,     1,     1,     1,     1,     1,     0,
       1,     1,     2,     2,     3,     3,     3,     3,     0,     1,
       0,     1,     0,     2,     0,     1,     2,     1,     1,     1,
       0,     1,     1,     0,     2,     1,     0,     1,     1,     1,
       0,     6,     0,     5,     4,     4,     3,     0,     1,     1,
       3,     3,     2,     2,     0,     2,     1,     3,     0,     1,
       1,     0,     2,     4,     1,     3,     0,     5,     0,     1,
       1,     0,     6,     0,     1,     1,     2,     1,     1,     1,
       0,     5,     1,     3,     2,     0,     3,     1,     4,     1,
       0,     4,     1,     0,     4,     0,     1,     3,     0,     1,
       3,     1,     1,     2,     0,     5,     0,     1,     1,     2,
       1,     1,     1,     1,     1,     2,     0,     5,     0,     1,
       1,     0,     4,     4,     3,     5,     1,     3,     3,     0,
       6,     1,     1,     1,     3,     2,     3,     1,     1,     0,
       6,     1,     1,     1,     3,     3,     4,     0,     6,     0,
       2,     0,     4,     0,     2,     1,     2,     4,     2,     3,
       2,     3,     0,     3,     0,     0,     6,     2,     1,     1,
       2,     2,     8,     4,     0,     1,     2,     1,     1,     1,
       1,     0,     2,     4,     3,     1,     1,     3,     4,     0,
       0,     0,     2,     2,     1,     1,     0,     2,     3,     0,
       2,     3,     0,     2,     3,     3,     3,     2,     3,     4,
       3,     4,     3,     4,     1,     3,     4,     3,     3,     6,
       1,     5,     6,     5,     7,     6,     8,     5,     6,     4,
       4,     5,     3,     4,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     2,     1,     2,
       1,     1,     1,     2,     2,     1,     1,     2,     2,     4,
       1,     3,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     3,     2,     2,     2,     2,     3,     3,     5,
       6,     4,     4,     7,     2,     6,     5,     6,     6,     4,
       4,     5,     4,     6,     2,     4,     4,     4,    10,     6,
       8,     6,     4,     4,     6,     4,     4,     4,     6,     4,
       7,     7,     7,     6,     6,     6,     6,     3,     4,     6,
       8,     2,     2,     8,     8,     6,     6,     2,     6,     6,
       8,     8,     6,     8,     6,     2,     8,     8,     2,     2,
       2,     6,     6,     4,     4,     8,     4,     4,     4,     4,
       3,     8,     4,     4,     6,     4,     4,     4,     6,     8,
       3,     6,     4,     6,     1,     6,     4,     4,     4,     4,
       4,     6,     4,     0,     5,     6,     2,     3,     0,     4,
       0,     3,     0,     1,     1,     3,     4,     4,     5,     4,
       4,     4,     5,     4,     0,     0,     7,     4,     5,     4,
       5,     4,     4,     4,     4,     4,     5,     0,     8,     0,
       3,     3,     1,     4,     0,     1,     0,     2,     0,     0,
       4,     4,     2,     0,     3,     2,     3,     2,     1,     1,
       2,     1,     2,     1,     2,     2,     2,     0,     3,     0,
       1,     1,     3,     1,     3,     1,     3,     0,     1,     0,
       2,     4,     5,     1,     1,     1,     1,     4,     1,     3,
       3,     0,     6,     0,     8,     4,     0,     8,     0,    10,
       6,     0,     8,     0,    10,     6,     1,     2,     1,     1,
       2,     0,     1,     5,     0,     5,     3,     5,     2,     0,
       0,     7,     1,     0,     0,     6,     0,     3,     0,     0,
       5,     0,     1,     0,     1,     0,     2,     3,     3,     1,
       1,     0,     7,     0,     7,     1,     2,     0,     0,     2,
       0,     2,     0,     1,     1,     1,     1,     3,     1,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     1,     0,     2,
       0,     1,     0,     0,     3,     0,     0,     3,     2,     0,
       0,     4,     4,     2,     0,     1,     1,     3,     3,     1,
       2,     0,     1,     0,     4,     4,     2,     0,     1,     1,
       0,     1,     0,     1,     2,     5,     4,     1,     3,     3,
       1,     1,     1,     1,     1,     1,     0,     2,     3,     4,
       1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       0,     6,     0,     1,     3,     1,     3,     0,     2,     3,
       1,     2,     1,     0,     3,     0,     0,     7,     2,     1,
       0,     3,     0,     7,     0,     7,     4,     6,     4,     4,
       4,     0,     6,     4,     4,     5,     6,     4,     1,     3,
       1,     2,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     7,     0,     5,     0,     6,     1,     3,     2,     4,
       0,     2,     0,     2,     1,     1,     1,     0,     4,     0,
       1,     0,     1,     1,     3,     1,     1,     2,     2,     2,
       1,     1,     1,     1,     0,     3,     2,     2,     0,     3,
       2,     4,     4,     3,     4,     4,     1,     3,     3,     3,
       3,     6,     2,     2,     0,     6,     0,     7,     5,     2,
       1,     1,     1,     5,     5,     2,     2,     1,     4,     3,
       2,     3,     2,     2,     1,     3,     4,     3,     3,     2,
       3,     2,     3,     1,     1,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     0,     1,     0,     2,     0,     1,     1,     1,     0,
       2,     0,     2,     0,     2,     2,     0,     4,     0,     4,
       1,     1,     0,     1,     1,     0,     1,     1,     2,     2,
       2,     2,     2,     2,     2,     0,     4,     0,     0,     5,
       1,     0,     4,     3,     1,     2,     2,     2,     2,     2,
       3,     2,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     0,     1,     0,     3,     0,     3,
       3,     1,     0,     4,     1,     2,     0,     1,     0,     3,
       3,     2,     2,     0,     5,     0,     1,     1,     0,     1,
       1,     1,     2,     1,     2,     0,     0,     0,     0,    22,
       1,     1,     0,     1,     0,     1,     1,     0,     1,     1,
       0,     2,     2,     1,     3,     4,     3,     3,     0,     2,
       2,     1,     3,     3,     0,     4,     0,     3,     1,     1,
       0,     3,     2,     3,     1,     1,     2,     0,     2,     3,
       1,     5,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       2,     2,     2,     1,     1,     3,     5,     1,     1,     1,
       1,     1,     3,     4,     5,     1,     5,     3,     2,     1,
       3,     2,     2,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     2,     0,     2,     0,     2,     0,     4,
       0,     3,     1,     1,     1,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     3,     3,     4,     6,     2,     3,
       3,     3,     5,     1,     3,     3,     1,     1,     3,     3,
       1,     3,     2,     2,     2,     2,     2,     1,     1,     4,
       4,     1,     1,     1,     1,     1,     0,     4,     1,     1,
       1,     3,     3,     1,     1,     2,     2,     2,     0,     3,
       4,     3,     0,     7,     1,     2,     1,     1,     1,     1,
       1,     1,     0,     5,     1,     1,     1,     1,     1,     3,
       6,     6,     6,     7,     5,     3,     8,     8,     8,     6,
       0,     1,     1,     2,     0,     1,     1,     3,     0,     3,
       0,     3,     0,     3,     0,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       3,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       1,     2,     0,     1,     3,     1,     2,     2,     2,     1,
       3,     3,     1,     1,     3,     1,     3,     1,     1,     1,
       1,     4,     5,     4,     6,     1,     0,     3,     3,     1,
       1,     0,     2,     2,     2,     2,     0,     2,     0,     3,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     1,     0,     2,     2,     1,     0,     1,     1,
       2,     3,     2,     0,     6,     3,     0,     0,     0,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     2,
       1,     2,     3,     3,     3,     0,     3,     3,     0,     7,
       0,     3,     1,     3,     0,     3,     2,     4,     0,     3,
       4,     4,     0,     0,     0,    16,     8,     7,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,    12,     4,
       4,     3,     4,     3,     2,     1,     3,     5,     1,     1,
       0,     1,     1,     0,     2,     0,     0,     3,     0,     2,
       5,     3,     3,     3,     1
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,   915,  1118,
    2637,     0,     0,     0,     0,     0,     0,  2639,   135,    73,
    1768,  1890,  1891,  1680,  1707,     2,     0,  1118,   282,   185,
       0,    85,  1709,     0,  1953,     0,     0,  1118,     0,   493,
       0,  1948,     0,     0,  1118,  1712,  1938,   259,   185,  2639,
       0,  1164,  2443,  1808,  1963,     0,     0,     0,  1789,     0,
    2518,  1757,     0,     0,  2774,     0,     0,     3,     8,    19,
       0,    41,    24,    29,    14,    18,    13,    54,    48,    26,
      39,    38,    10,    57,    58,    16,    45,    11,    12,    15,
      37,    44,    33,    40,    52,  1155,    22,    23,    30,    46,
      62,    20,    59,    55,    21,  1892,    69,    70,    67,    66,
      65,    68,    71,    25,    47,    42,    34,    56,    63,    35,
      53,    36,    61,    28,    49,    27,     9,    17,    50,    51,
      43,    64,    31,    60,    32,  2138,  2139,  2140,  2141,  2142,
    2143,  2144,  2145,  2081,  2146,  2147,  2149,  2148,  2150,  2151,
    2152,  2082,  2083,  2153,  2154,  2155,  2157,  2156,  2158,  2084,
    2085,  2159,  2160,  2161,  2162,  2086,  2088,  2087,  2163,  2166,
    2165,  2164,  2089,  2167,  2168,  2169,  2171,  2090,  2091,  2092,
    2093,  2094,  2170,  2095,  2172,  2096,  2173,  2174,  2175,  2176,
    2177,  2178,  2179,  2181,  2180,  2097,  2182,  2183,  2185,  2186,
    2187,  2184,  2188,  2190,  2189,  2191,  2192,  2193,  2098,  2194,
    2195,  2196,  2197,  2198,  2199,  2200,  2201,  2099,  2202,  2203,
    2204,  2222,  2100,  2205,  2208,  2207,  2206,  2209,  2210,  2211,
    2213,  2212,  2214,  2215,  2101,  2102,  2216,  2217,  2218,  2220,
    2219,  2224,  2225,  2226,  2103,  2221,  2223,  2421,  2227,  2228,
    2230,  2229,  2231,  2233,  2232,  2104,  2235,  2234,  2105,  2106,
    2236,  2237,  2065,  2238,  2066,  2239,  2242,  2243,  2240,  2244,
    2249,  2107,  2241,  2245,  2246,  2247,  2248,  2250,  2108,  2252,
    2251,  2253,  2254,  2255,  2256,  2257,  2258,  2259,  2260,  2261,
    2274,  2265,  2266,  2268,  2269,  2272,  2267,  2273,  2277,  2276,
    2278,  2279,  2280,  2281,  2282,  2275,  2263,  2270,  2271,  2264,
    2283,  2284,  2262,  2285,  2286,  2287,  2288,  2289,  2290,  2291,
    2292,  2293,  2294,  2295,  2297,  2296,  2298,  2299,  2300,  2301,
    2302,  2303,  2305,  2304,  2306,  2307,  2308,  2310,  2309,  2312,
    2313,  2109,  2311,  2314,  2315,  2316,  2317,  2318,  2320,  2319,
    2110,  2112,  2111,  2113,  2321,  2322,  2114,  2323,  2325,  2324,
    2326,  2327,  2328,  2330,  2329,  2331,  2332,  2115,  2116,  2333,
    2334,  2335,  2336,  2337,  2338,  2339,  2340,  2341,  2342,  2343,
    2344,  2345,  2346,  2348,  2347,  2349,  2350,  2351,  2352,  2353,
    2354,  2355,  2117,  2356,  2118,  2357,  2358,  2119,  2359,  2120,
    2360,  2361,  2362,  2121,  2363,  2364,  2365,  2367,  2368,  2366,
    2369,  2122,  2370,  2371,  2372,  2123,  2374,  2373,  2375,  2124,
    2377,  2378,  2125,  2376,  2127,  2128,  2379,  2380,  2381,  2126,
    2382,  2129,  2383,  2384,  2386,  2385,  2387,  2388,  2389,  2130,
    2390,  2131,  2391,  2392,  2393,  2394,  2395,  2397,  2396,  2398,
    2399,  2400,  2401,  2404,  2406,  2403,  2405,  2402,  2407,  2408,
    2409,  2410,  2414,  2415,  2416,  2417,  2411,  2412,  2413,  2132,
    2418,  2419,  2420,  2422,  2423,  2425,  2424,  2133,  2134,  2426,
    2427,  2137,  2428,  2429,  2430,  2434,  2431,  2442,  2432,  2433,
    2436,  2435,  2437,  2438,  2135,  2439,  2136,  2440,  2441,  2070,
    1902,  2071,  2080,  1901,  1900,  1903,  1904,  1898,  1899,     0,
     944,     0,     0,     0,     0,     0,     0,  1022,   927,  2704,
    2705,  2706,  1120,  1119,     0,  2639,  2067,  1103,  1129,   204,
     187,   119,  2509,  2508,  1066,  1104,  2640,  2641,   587,   871,
       0,     0,   872,     0,   586,   870,   185,  2706,   140,     0,
     583,   584,     0,     0,     0,  1782,     0,  1705,  1705,  1705,
    1705,     0,  1705,  1705,     0,  1708,  1705,   185,  1705,     0,
      78,  1905,   283,     0,     0,     0,     0,     0,  2064,     0,
    1715,     0,     0,  1955,  1970,     0,  1971,  1965,  2506,     0,
    1189,     0,     0,     0,     0,   185,  1121,     0,  1766,     0,
     249,   258,   260,   261,   257,     0,  2641,  2652,  1156,  1162,
    1174,     0,  1806,  1807,  1875,   261,     0,   119,  1047,     0,
     119,  1790,  1787,     0,     0,     0,  1766,  1964,  2758,     0,
       0,     0,  2754,     0,  2759,     0,  1164,     0,     0,     1,
       5,     0,     0,  2217,  2325,  1888,  1886,  2059,     0,   918,
     945,     0,   923,     0,   921,  2076,  2075,  2074,     0,   934,
     933,   931,     0,   454,     0,  1024,     0,  2715,   925,  1080,
    2638,     0,   206,     0,     0,   120,   121,     0,     0,     0,
    2644,     0,     0,     0,     0,   139,     0,     0,     0,   136,
    1189,  1189,  2706,  2708,  2710,   587,   585,   587,   587,   587,
    1786,  1785,  1784,     0,  1782,  2139,  2081,  2152,     0,  2032,
       0,     0,     0,  1467,     0,  2086,     0,  2167,  2169,  2090,
    2091,  2092,  2093,  2094,  2097,     0,     0,  1202,  1202,  1199,
       0,     0,     0,  2192,  2193,  2038,     0,     0,     0,  2028,
    2039,  2230,  2231,     0,  2030,  2031,  2237,     0,     0,     0,
    2251,     0,  2256,  2036,     0,     0,  2292,  2294,     0,     0,
    2298,  2299,  2300,  2301,  2013,  1257,     0,  1199,  2027,  2035,
    2317,  2020,  2326,  2331,  2332,     0,  2341,     0,     0,     0,
    2368,  2366,  2372,     0,     0,  2394,     0,     0,  1199,  2012,
    2414,  2415,  2416,  2417,     0,  2029,  2132,  2037,     0,  2428,
    1202,  1199,  1199,     0,     0,     0,  2437,  2441,     0,     0,
       0,  2676,  1256,     0,  1429,     0,  1461,  1214,  1220,  1234,
       0,  1249,  1283,  1284,  1286,  1384,  1285,  1291,  1290,  1681,
    2024,  1289,  1288,  2025,  2026,  1282,  2049,  2070,  2048,     0,
       0,     0,     0,     0,     0,     0,     0,  1871,     0,     0,
    1691,  1705,    80,     0,     0,  2554,  2569,  2570,  2566,  2571,
    2589,  2572,  2576,     0,  2568,  2560,     0,  2575,     0,  2564,
    2573,     0,  2558,     0,  2574,  2579,  2590,  2562,  2567,  2545,
       0,  2552,  2556,  2061,  1575,  2521,  2522,     0,    86,  1717,
    1718,  1716,  1020,     0,  2771,  1956,  1957,  1958,     0,  1974,
       0,  1116,     0,     0,   503,   494,     0,  1870,  1869,     0,
    1949,  2653,     0,     0,  1071,  1720,  1767,     0,  1719,  1944,
       0,  1942,  1939,  1941,   250,     0,     0,   280,  2554,     0,
    2539,     0,  2647,  2644,  2654,  2689,  2684,  2683,  2686,  2687,
    1180,  2688,  1179,  2685,  2682,  1189,  1175,  1177,  1178,   805,
       0,     0,  2463,  2464,  2305,  2326,  2465,  2411,     0,     0,
    2483,  2444,  2449,  2445,     0,     0,  1830,     0,   805,  1853,
    1883,  1831,     0,     0,  1883,     0,  1610,  1873,  1876,     0,
    2467,  1844,   868,   867,  1856,   866,  2468,  1869,     0,  1816,
    1832,     0,  1791,  1837,   119,  2469,     0,  1872,  1855,     0,
    1854,  1610,  1883,     0,  1809,     0,     0,     0,     0,     0,
     256,  1054,  1054,     0,     0,  1046,  1048,  1049,  1054,  1054,
       0,  2772,  2773,  2519,  1020,  2019,  2017,  2018,  2068,  2755,
    2016,  2763,  2765,  2751,  2753,  2760,  1158,     0,  2658,     6,
      72,     0,  1895,  2713,  2714,  2712,   821,     0,  1202,  2077,
    2707,   188,   932,     0,   455,   188,     0,     0,     0,     0,
       0,   456,   457,   393,     0,  1028,  1029,  1023,  1025,  1027,
     929,     0,     0,   928,  2715,     0,     0,  1131,  1133,  1132,
    1149,   208,   205,   186,    87,  1068,  1698,  1700,  1106,  2643,
       0,     0,  2645,  2649,  1255,  1254,     0,   133,   138,     0,
       0,     0,  2615,   137,  2605,  2711,  1189,  1189,  1189,  2703,
       0,  2691,  2698,  2699,  2702,  2701,  2700,  2697,     0,  2690,
    2693,  2694,  2696,  2695,  2715,  2709,     0,     0,     0,     0,
       0,  1769,  1772,  1776,  1780,  1783,     0,     0,  1580,  1304,
    1580,  1580,  1580,  1468,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1580,     0,  1341,
    1314,     0,  1342,     0,     0,     0,  2040,     0,     0,     0,
    2676,     0,     0,     0,  1434,     0,     0,     0,  2676,     0,
       0,     0,     0,     0,     0,  1463,  1465,  2048,  1580,     0,
       0,  1580,     0,     0,     0,     0,     0,  1207,  1347,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,  1580,     0,     0,  1580,  1355,  2042,     0,     0,
       0,  2041,     0,     0,     0,  2034,   802,   803,  2014,  2033,
       0,  1358,  1360,  1359,     0,  1580,  1580,     0,     0,  1294,
    1293,  1295,     0,     0,     0,     0,     0,     0,  1253,  1252,
    1251,  1250,     0,     0,     0,  1258,     0,  1259,  1260,     0,
    1261,  1262,  1263,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1296,     0,     0,     0,  2015,  1393,     0,  1706,
    1686,  1693,  1688,     0,  1871,  1689,  1697,   468,     0,  1694,
    2603,  1690,     0,  1682,     0,    79,     0,  1927,  1932,     0,
       0,     0,  1922,  1930,  1924,  1931,  1923,     0,     0,  1933,
     119,     0,  1925,  1929,  1928,  1906,  1910,  1914,  1907,     0,
       0,   281,   284,   286,     0,   289,  2555,  2553,  2587,  2586,
    2591,     0,  2588,  2584,  2577,  2616,  2581,     0,  2616,  2583,
    2582,  2616,  2578,  2585,  2616,  2550,     0,  1576,  1577,     0,
    2520,     0,  2060,  1021,     0,     0,  1959,  1960,     0,  1139,
    1975,  1976,  1972,  1575,  2507,  2510,     0,   692,  1190,   504,
       0,     0,   513,     0,     0,    75,    76,     0,  1123,     0,
    1122,  1126,     0,     0,     0,  1723,  1713,  1722,  1501,  1945,
     119,     0,   248,   273,   268,   276,   270,   272,   271,   277,
     278,   279,   274,   269,   275,   262,     0,  2553,     0,  2550,
    2648,     0,  2650,  2667,  1163,  2655,  1186,  1165,  1185,     0,
    1176,   804,     0,   807,   809,  1742,  1743,   808,   817,     0,
     806,     0,     0,     0,  2470,     0,   813,   815,   814,  2478,
     812,     0,     0,  2454,     0,     0,  1879,     0,     0,  1843,
       0,   587,     0,     0,     0,     0,     0,     0,  1810,     0,
       0,   636,     0,  1836,  1611,  1877,  1878,  1883,     0,     0,
    1883,     0,  1849,  1873,  1883,     0,  1883,  1803,     0,     0,
    1795,  1800,  1796,     0,  1802,  1801,  1804,  1792,  1793,     0,
    1823,  1851,     0,  1873,  1835,  1842,     0,  1822,  1829,     0,
    1840,  1873,  1873,     0,  1883,  1883,  1042,  1058,  1040,  1052,
    1053,     0,     0,  1045,  1044,  1788,  1504,     0,     0,  2752,
    2766,  2750,  2761,  2762,  2749,  1159,  2659,  1157,  2660,     0,
       7,     4,  1889,  1887,  1896,  1897,   822,   821,   578,   581,
     580,     0,     0,  2079,     0,   924,     0,  1871,   922,     0,
       0,  1871,   404,  1871,   458,   916,  1026,   936,     0,     0,
     926,  1081,  1082,  1085,     0,     0,   492,  1149,  1135,  1151,
       0,   209,   211,     0,  1070,  1069,     0,  1067,  1114,  1113,
    1111,     0,  1112,  1110,  1105,  1107,  1108,  2642,  2646,   588,
     821,  1871,     0,   396,     0,     0,     0,     0,     0,   587,
       0,     0,  2692,   122,   873,   873,   873,  1774,  1702,  1501,
    1704,  2059,     0,     0,     0,  1778,     0,     0,  1581,  1580,
       0,  1443,     0,     0,     0,     0,  1469,     0,     0,     0,
       0,     0,     0,     0,     0,  1280,     0,     0,     0,     0,
       0,  1414,     0,  1443,  1203,  1655,  1656,  1640,  1641,  1639,
    1642,  1200,     0,  1643,  1654,  1370,     0,     0,     0,     0,
       0,     0,  1551,  1552,  1553,  1554,  1562,  1555,  1556,  1557,
    1564,  1569,  1558,  1559,  1565,  1566,  1567,  1560,  1568,  1563,
    1561,  1570,     0,  1550,     0,  1573,  1571,  1574,  1572,     0,
    1435,  1427,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,     0,     0,     0,  1580,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1380,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1337,     0,  2051,  2050,     0,     0,     0,     0,
    1298,     0,  1297,  1513,     0,  2661,  2677,     0,  2470,  1430,
    1432,     0,  1205,  1204,  1206,  1217,  1210,  1215,  1208,  1212,
       0,  1264,  2145,  1218,     0,     0,  1246,  2676,  1589,  1247,
    1232,  1237,  1238,     0,  1235,  1236,     0,  1240,     0,  1239,
    1243,  1244,  1245,  1248,     0,     0,     0,     0,  1287,  1292,
    1462,  1189,  2052,     0,     0,   468,   471,   470,  1695,   469,
    1744,     0,  1030,     0,     0,    81,    83,  1919,  1916,  1915,
    1917,  1921,   119,  1926,  1918,     0,  1934,  2192,  2414,  2417,
     293,     0,   266,   265,   267,   290,     0,     0,  2580,     0,
    2561,     0,  2565,  2559,  2563,     0,     0,  2551,     0,  2557,
    1579,  2225,  2309,     0,  1582,  2524,  1710,  2770,  2428,  1961,
    1954,     0,  1973,     0,     0,     0,  1117,   693,     0,  1189,
     502,   501,   500,   499,     0,   515,   497,     0,    77,     0,
       0,  1950,     0,     0,     0,     0,  1073,  1721,     0,     0,
    1701,  1502,  1946,  1940,     0,     0,     0,     0,     0,     0,
       0,  2651,  2669,  2668,  2656,  1189,  1601,  1190,  1190,  2048,
    2485,     0,  2480,  2479,     0,     0,     0,  2498,  2481,     0,
       0,  2448,  2486,  2487,  2490,     0,     0,     0,     0,     0,
    2484,  2411,  2450,  2451,     0,  2456,  2446,  2504,  2505,  2502,
    2503,  2501,  2475,  1850,     0,  1881,  1884,  1885,     0,     0,
    1864,  1858,  1857,  1847,  1859,  1848,  1868,  1867,  1866,  1820,
    1819,  1623,  1624,  2365,  1622,  1614,  1617,  1621,  1620,  1813,
    1874,  1863,  1861,  1845,  1883,  1818,  1817,  1862,  1860,  1797,
    1798,  1799,     0,  1610,     0,  1879,  1852,  1883,  1873,     0,
    1883,  1883,  1865,  1839,  1841,  1043,  1060,  1059,  1055,  1056,
    1061,  1051,  1050,  1522,  1521,     0,  1476,     0,  1478,  1475,
    1474,  1473,     0,  1521,  2756,  2764,  2768,     0,  1610,  2666,
    2664,   579,  1744,  1744,     0,  2078,     0,     0,     0,     0,
       0,     0,     0,   189,   198,     0,     0,   402,   403,  1744,
     401,   444,   445,   448,   449,   450,     0,     0,     0,     0,
       0,     0,     0,     0,   142,   451,  1744,  1744,   398,   424,
     425,   428,   429,   430,   431,   432,   394,     0,   399,   821,
       0,   938,   940,  2716,  2717,  2718,     0,     0,  1084,  1138,
    1130,  1137,  1134,  1149,  1147,  1136,   863,   862,     0,  1150,
     207,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    88,    89,   107,  1699,  1115,  1109,   134,
     821,  1744,  1744,  1744,  1744,   400,   433,   434,   437,   438,
     439,   440,   443,   441,   442,     0,     0,  1871,     0,  2607,
    2608,     0,  2606,     0,  2744,     0,     0,     0,   187,   589,
     874,     0,     0,     0,     0,     0,  1770,     0,  2062,  1777,
    1504,  1781,  1780,     0,  1366,     0,  1407,     0,  1409,  1410,
    1411,     0,     0,     0,     0,     0,  1367,     0,  1312,  1368,
    1369,     0,  1363,     0,  1364,     0,     0,     0,     0,     0,
       0,     0,  1413,     0,  1201,     0,     0,  1315,  1316,  1309,
    1301,     0,  1386,     0,     0,  1317,     0,     0,     0,     0,
    1372,     0,  1387,  1464,     0,  1466,  2052,     0,  1419,  1373,
    1322,     0,  1417,     0,  1323,  1388,  1389,  1390,  1375,  1376,
       0,  1392,     0,  1377,     0,     0,     0,     0,  1325,  1423,
    1421,     0,     0,     0,     0,  1425,  1327,     0,     0,     0,
    1326,     0,     0,     0,     0,     0,     0,     0,  1329,     0,
    1310,  1422,  1424,  1382,     0,  1338,     0,  2670,  1512,  2678,
    1513,     0,     0,  2672,  2662,  2667,  2675,  1302,     0,     0,
    2053,  1211,  1216,  1209,  1213,  2676,     0,     0,     0,     0,
    1230,  1229,     0,     0,     0,  2676,  1589,  1233,     0,     0,
    1403,  1404,  1459,     0,  1687,  1684,  1696,  1745,     0,  2604,
    1032,  1031,  1692,  1030,    84,     0,  1920,  1913,  1935,  1908,
       0,   285,   294,   287,   291,   292,   288,  2620,     0,  2619,
       0,  2599,  2602,  2059,     0,     0,     0,  2534,  2528,  2535,
    2537,  2531,  2536,  2538,  2529,  2530,  2525,  2532,  1583,  1612,
       0,  1962,  1140,  1142,  1143,  1141,  1149,     0,     0,  2513,
    2514,  2512,  2511,   505,     0,   514,     0,   526,     0,   505,
    1952,  1951,     0,  1124,  1127,  1128,  1078,  1077,  1079,  1072,
    1074,  1075,   571,  1727,     0,     0,     0,  1733,  1714,  1724,
       0,  1947,  1943,     0,   263,     0,     0,     0,     0,     0,
       0,  1184,  1504,  1673,  1181,  1169,  1612,  1602,  1168,  1191,
    1187,     0,   820,   819,   818,   816,     0,     0,     0,     0,
    2492,  2493,     0,     0,  2471,  2472,  2473,     0,  2476,  2453,
    2454,     0,  2455,     0,  1880,     0,  1824,     0,  1846,     0,
       0,     0,     0,  1815,     0,  1838,  1794,  1881,  1814,  1582,
    1873,  1811,  1812,  1058,     0,  1041,  1521,  1504,     0,     0,
    1496,  1523,     0,  1523,  1498,  1499,  1504,     0,  1504,  1501,
    1518,     0,     0,  2767,  1603,  2665,     0,     0,   920,   192,
     195,   193,     0,   194,     0,     0,   453,   452,     0,  1871,
     446,   146,   145,   147,   148,  1637,  1638,  1634,  1635,  1633,
    1636,   150,   149,   144,   935,     0,     0,     0,  1871,   426,
     405,   406,   409,   410,   411,  1018,  1744,  1018,     0,  1744,
    1744,  1018,  1744,     0,     0,  1744,  1744,     0,     0,  1744,
       0,     0,  1018,     0,  1744,     0,  1005,     0,     0,  1744,
    1744,  1744,  1744,  1744,  1018,     0,     0,  1744,  1744,   492,
    1744,     0,     0,  1036,     0,     0,  1744,  1744,  1744,  1744,
       0,     0,  1744,  1744,     0,  1744,   952,  1004,   591,   618,
     619,   917,   951,   953,   965,   488,     0,   983,  1007,  1008,
    1006,     0,     0,     0,     0,   156,  2720,  1083,     0,     0,
    1542,   210,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1871,   435,
       0,     0,  1744,   395,   412,   413,   416,   417,   418,   419,
     420,   423,   421,   422,     0,  2611,  2613,     0,     0,   389,
     388,     0,   151,  2738,     0,     0,   673,   123,   479,   488,
     590,   593,     0,     0,   875,     0,     0,     0,  1703,  1780,
    1504,  1582,  2060,  1582,     0,  1779,     0,     0,  1408,  1444,
       0,  1470,     0,  1306,   776,   776,   776,  1453,   761,  1457,
    1448,   776,  1449,   776,  1451,     0,     0,     0,  1266,  1281,
       0,     0,     0,     0,     0,  1415,  1412,     0,     0,     0,
       0,  1438,     0,     0,     0,  1311,     0,  1398,  1420,  1418,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1426,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1299,  1189,  2679,  2681,  1160,     0,
    2671,  2673,   911,  1431,     0,  1227,  1223,     0,  1221,  1588,
    1242,  1241,     0,     0,     0,  1231,  1190,  1394,  1189,     0,
    1460,  2054,  1685,   467,   635,  1683,    82,  1911,     0,     0,
    2617,     0,  2628,     0,     0,     0,     0,     0,     0,     0,
    2523,  1613,  1754,     0,  1149,  1153,  2069,  1966,  2516,  2517,
    2515,     0,   506,   507,   509,  1190,   523,   503,     0,   495,
     498,     0,     0,  1076,  1174,     0,  1746,  1731,  1738,  1732,
       0,     0,     0,  1730,  2044,  2043,  2050,  2654,     0,  1548,
       0,     0,  2544,     0,     0,     0,  2657,  1582,  1582,  1667,
       0,     0,  1166,  1171,  1167,  1170,     0,  1188,  1195,  1194,
    2045,  2052,  2482,     0,     0,     0,     0,  2497,  2491,  2488,
    2489,     0,  2452,  2474,  2458,  2457,  2460,  2462,  1647,  1648,
    1646,  1644,  1645,  1882,  1610,  1834,  1833,  1625,  1616,     0,
    1619,  1618,  1805,  1826,  1828,  1883,  1057,     0,  1064,  1062,
       0,  2661,  1516,     0,  1500,  1497,  1524,     0,  1523,  1523,
    1504,     0,  1480,  1758,  1761,     0,  1479,  1575,  1506,  1174,
    2757,  2769,     0,   634,   633,   197,   196,   202,   203,   473,
     459,   472,   447,   143,   460,   461,   427,     0,   407,  1019,
     908,   587,   987,     0,   674,   587,   859,   864,   864,   587,
       0,     0,  1118,     0,     0,  1705,     0,     0,  1118,     0,
       0,     0,  1744,     0,   998,   947,     0,  1705,     0,  1705,
    1705,   999,     0,     0,   948,  1744,     0,     0,     0,     0,
       0,  1705,  1118,     0,     0,     0,   490,     0,  1118,   967,
    1039,  1038,  1037,     0,  1118,  1118,     0,     0,     0,     0,
     624,   625,   623,     0,     0,     0,   616,   592,   821,   949,
     489,   950,   673,     0,  1033,   670,   676,  2055,     0,     0,
     166,     0,     0,   937,     0,   159,   157,   168,     0,     0,
    1087,     0,  1086,     0,  1545,     0,  1546,  1543,  1544,   108,
      95,    91,   112,   113,    93,    94,    98,    97,    99,   100,
     103,   104,   101,    96,   102,    92,   116,   118,   117,   105,
     114,   115,    90,   466,   465,   464,   463,   436,     0,     0,
       0,  1871,   414,  2612,  2610,  2609,     0,     0,  2745,   392,
     390,   391,     0,     0,   212,   651,   652,   650,   649,     0,
     480,     0,     0,     0,   653,   654,   656,   657,  1977,   487,
     821,   594,   901,   903,   902,   889,   888,   124,   127,   130,
       0,  1582,  1601,  2063,  1773,     0,  1339,  1471,     0,     0,
     777,  1445,   829,  1455,     0,  1456,   763,   762,   778,  1447,
    1450,  1454,  1452,  1305,  1313,  1361,     0,  1279,  1362,     0,
    1385,  1308,  1307,     0,     0,     0,  1345,  1346,     0,  1436,
       0,     0,  1319,     0,  1321,     0,     0,  1400,  1374,  1391,
    1348,  1378,     0,  1324,  1300,     0,  1349,     0,  1354,  1352,
       0,  1328,     0,     0,  1335,     0,  1333,     0,  1334,     0,
    1336,  1381,  1383,  1514,  2680,  1161,     0,     0,  1433,  1219,
       0,  1228,  1225,     0,  1222,  1191,  1405,  1395,     0,  1909,
     302,   297,   305,   299,   301,   300,   306,   307,   308,   309,
     303,   298,   304,   296,   295,  2618,     0,  2549,  2601,  2600,
    2621,  2621,  2621,     0,  1584,     0,  1711,  1144,  1149,  1153,
       0,  1145,  1977,   510,     0,     0,     0,   530,     0,   528,
     496,  1125,  1189,  1728,  1740,     0,  1748,     0,     0,  1725,
    1735,     0,     0,     0,  1734,   492,     0,   264,     0,  2541,
    2542,  2540,  1612,  1590,     0,     0,  1679,     0,  1674,  1182,
       0,  1193,  1192,     0,  2500,  2499,  2495,  2494,  2496,  2477,
       0,     0,  1825,  1615,  1610,  1821,     0,     0,  2667,  1575,
    1508,  1504,  1477,  1504,     0,     0,  1485,  1504,  1481,  1483,
       0,  1582,     0,  1540,  1189,  2047,  1604,  1607,   408,   675,
     909,  1118,     0,     0,     0,   864,   669,   908,   908,   873,
     865,   587,   587,   985,  1014,  1015,     0,     0,   602,   599,
       0,   611,   968,   959,   969,   980,   982,     0,   601,   626,
       0,     0,   614,  1705,     0,   996,     0,     0,   596,     0,
       0,   645,   646,   644,   620,   627,  1016,  1017,   597,   598,
       0,     0,  1597,  1599,  1607,   604,   603,  1658,  1657,   613,
       0,   600,     0,  1002,   975,     0,   642,   640,   637,   639,
     638,   643,   641,   615,   606,   605,   608,   607,   610,   609,
     612,   628,   964,     0,  1018,  1018,   984,     0,  2058,     0,
    1035,   986,     0,   658,   671,   659,     0,     0,   632,  1651,
    1652,  1649,  1650,   631,  1653,   629,   630,   167,   155,     0,
       0,   939,   941,     0,     0,   942,  2722,     0,  2724,  1089,
    1090,     0,     0,  1152,     0,     0,   109,   111,     0,   397,
     462,   415,  2614,     0,   223,  1189,     0,     0,   213,   215,
     216,     0,     0,   477,   474,   673,  1979,  1978,   476,   574,
     595,     0,     0,     0,  1780,  1775,  1626,     0,  1472,     0,
       0,     0,     0,   823,   834,   832,   826,     0,   830,   831,
    1446,     0,     0,   779,  1458,   743,   776,  1276,   761,  1270,
    1272,  1268,     0,   744,  1271,   776,     0,   829,  1275,  1267,
       0,  1416,     0,     0,  1439,     0,     0,     0,     0,     0,
       0,     0,  1303,     0,  1396,     0,     0,     0,     0,     0,
       0,  1332,  1330,  1331,  1612,  2661,   912,  1224,     0,  1406,
       0,     0,     0,  2626,  2626,  2626,  1753,  1752,     0,  1751,
    1755,  1146,  1154,     0,   508,   511,     0,     0,     0,   527,
       0,   572,     0,     0,     0,  1749,  1737,  2658,  1726,  1729,
    2052,  1503,  1549,  2543,  1173,     0,  1585,  1678,  1675,     0,
    1668,  1670,  1672,     0,  2046,  2459,  2461,  1827,  1063,  1065,
    1509,  1507,  1517,     0,  1473,  1504,  1504,     0,  1473,     0,
       0,  1760,  1601,  1762,  1505,  1537,  1519,     0,  1608,  1609,
    1606,   970,     0,   587,   860,   861,   873,   910,     0,   873,
     873,     0,     0,   958,   989,  1106,     0,   963,   817,   621,
       0,   954,   997,  1030,     0,   622,   991,   956,     0,  1600,
     491,   955,   977,   961,  1934,   988,  1034,   841,   757,   706,
     697,   776,   700,   699,   776,   711,   761,   759,   729,   761,
     761,   736,   735,   753,   739,   719,   829,   829,   718,   756,
     829,   740,   738,   742,     0,   744,   761,   749,   737,   741,
     758,   734,   731,   755,   776,   776,   776,   715,   754,   829,
       0,   747,   776,   677,   780,   717,   829,   836,     0,     0,
     776,   778,  2057,   153,   158,   169,   170,   930,  2721,     0,
    2719,     0,  1095,     0,  1148,  1547,   106,     0,     0,     0,
     226,   224,   225,     0,   219,   221,   216,  2732,     0,  2739,
       0,     0,  2737,   481,  2658,   589,   655,   575,     0,     0,
       0,     0,     0,  1771,  1340,   774,   772,   775,   773,   825,
     824,   828,     0,   827,   836,     0,     0,  1278,  1273,   745,
    1277,  1269,  1274,  1365,  1343,  1344,     0,  1437,  1428,  1371,
       0,  1320,  1397,     0,     0,  1379,  1350,  1353,  1351,  1356,
    1357,  1181,  1181,   647,  2674,  1226,  1936,  2629,     0,     0,
    2625,  2623,     0,  2624,  2622,  2592,     0,  2547,  2548,  2546,
    2533,     0,     0,     0,  1189,   516,     0,   533,   532,   529,
    1612,  1739,  1741,  1747,  1736,     0,  1586,  1601,   810,  1671,
       0,  1183,     0,  1486,     0,  1490,  1495,  1491,     0,  1482,
       0,  1626,  1541,     0,  1612,  1607,   972,     0,     0,     0,
       0,     0,     0,  1001,     0,     0,   960,   981,  1003,   995,
     994,     0,     0,  1118,  1598,   976,   978,  1073,     0,     0,
     845,   705,   698,   716,   714,   765,   760,     0,   765,   765,
     725,   743,   720,     0,   829,   733,   724,   745,   748,   750,
     752,   765,     0,   829,   713,   712,   722,   709,   765,   788,
       0,     0,     0,     0,   784,     0,   839,     0,   791,     0,
     678,   781,   783,     0,     0,     0,   746,   829,   702,   837,
     836,   704,   829,   836,   765,   765,     0,   160,   943,   329,
    2723,  1164,     0,  2728,     0,  1096,  1092,  1093,  1088,   110,
     141,  2736,  2746,   223,     0,     0,   164,     0,   214,   817,
     217,   478,   488,     0,   483,     0,  1607,   906,     0,     0,
    2365,  1627,   835,   833,     0,  1440,  1607,     0,  1399,  1401,
    1515,   648,     0,  1912,  2598,  2597,  2596,  2593,     0,     0,
       0,     0,     0,     0,  2627,  2631,  1750,     0,     0,     0,
     524,     0,   520,   522,     0,   558,   573,  1594,  1607,     0,
    1612,     0,  1676,  1669,  1510,     0,     0,     0,     0,     0,
    1759,  1529,  1530,     0,     0,  1535,  1539,  1520,  1605,     0,
       0,   971,   672,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1000,  2021,  1033,   492,   992,   957,     0,
     962,   617,     0,   844,     0,   849,   769,   770,   771,   726,
     766,   768,     0,   728,   696,   721,   751,   727,     0,   723,
     710,   794,   793,  1196,   786,   801,   681,     0,     0,   792,
       0,   782,   790,   785,     0,   701,   703,   707,   708,   694,
     695,  2056,     0,   162,   355,     0,   341,   327,     0,     0,
       0,   331,   171,   174,   172,     0,   173,   179,     0,   180,
     181,   182,   183,   184,   175,   353,   354,   178,   176,   177,
       0,  2072,     0,  2073,  2726,     0,     0,  2725,  1091,     0,
    1098,   190,   220,     0,     0,   156,   165,  2740,   799,  1977,
       0,  2654,   876,     0,   905,     0,   878,   880,  1628,     0,
     764,     0,  1442,  1318,     0,  2594,  2632,  2635,  2633,  2634,
    1630,     0,  2636,  2630,     0,  1501,  1190,     0,   517,   518,
       0,   536,     0,  1744,  1744,     0,     0,  1744,  1744,  1744,
    1744,   551,   559,   561,     0,  1595,  1596,     0,  1591,  1593,
    1587,  1659,   811,  1980,  2661,  1487,     0,  1492,     0,  1484,
    1525,  1525,  1536,   974,     0,     0,     0,   660,     0,     0,
    2023,  2022,   990,   966,  1033,     0,   842,     0,   846,   847,
     848,     0,   840,   767,     0,   913,     0,     0,   800,  1196,
     789,  1189,   798,   797,   795,   796,   161,     0,   154,     0,
       0,   340,   343,     0,     0,   346,   336,   335,   337,     0,
     330,   329,   329,   383,   334,   380,   379,   372,  2658,     0,
       0,     0,  1097,  1102,     0,  1099,  1101,  2747,   222,  1189,
     168,     0,   475,   485,   484,     0,  1744,   125,   877,   897,
     896,   882,     0,  1607,     0,     0,   128,   879,   899,   886,
     131,   881,   898,   884,  1629,  1607,  1937,  1632,  1631,  1756,
    1764,     0,  1967,     0,   525,   524,   521,     0,   534,     0,
       0,  1744,  1744,     0,     0,     0,     0,     0,   531,   560,
    1744,  1607,     0,  1172,     0,  1988,  1511,     0,     0,     0,
    1533,  1531,   973,     0,   666,   876,   662,   664,   993,     0,
     843,     0,     0,   829,     0,   829,  1197,     0,   787,     0,
     163,   356,   367,   370,   362,   342,     0,     0,     0,   332,
     329,     0,   316,   314,   315,   321,   322,   323,   324,   325,
     326,   317,   320,   318,   319,   329,     0,   231,     0,     0,
    2727,     0,  2729,     0,  1094,     0,   200,   199,   191,     0,
     329,  2733,     0,  2741,  2658,   891,     0,  1009,   883,     0,
     904,   907,     0,  1009,   887,  1009,   885,  1441,     0,     0,
     810,   512,   519,   544,   537,   540,     0,   570,   564,     0,
       0,   566,   567,   565,   562,   555,     0,   553,     0,  1592,
    1660,     0,     0,     0,     0,  1981,  1983,     0,  1677,  1489,
    1494,     0,  1526,     0,     0,     0,   668,   876,   661,   878,
     880,     0,   855,     0,   854,     0,   851,   850,   730,   914,
     732,  1198,   682,     0,     0,   329,   363,     0,   338,     0,
       0,     0,     0,   229,   386,     0,   227,   374,   374,  2730,
    2731,  1100,   201,  2748,     0,   170,   190,   486,   890,   126,
    1011,  1010,   895,   894,   892,   893,   900,   129,   132,  1763,
    1765,  1968,   544,     0,   542,     0,   538,   535,   539,   568,
     569,     0,   552,     0,   563,     0,     0,     0,     0,     0,
    1982,     0,     0,  1989,  1991,  1528,  1527,  1542,     0,   667,
     663,   665,   979,   857,   858,   856,     0,     0,   684,   683,
     685,   364,   370,   360,   368,   329,     0,     0,   328,   347,
     382,   230,     0,   384,     0,   329,     0,   373,   375,   377,
       0,   152,  2742,  1013,  1012,  1994,   541,     0,   549,   545,
     547,   550,   558,   557,   554,  1189,  1986,  1987,     0,  1984,
       0,     0,  1990,     0,     0,     0,     0,     0,   689,   679,
     686,   688,     0,   361,     0,     0,   359,   339,   344,   329,
       0,   329,   242,   241,     0,   233,   310,   381,     0,   232,
    2734,   329,     0,  1980,   543,     0,     0,   556,     0,     0,
    1663,  1665,  1985,  1993,  1992,  1534,  1532,   853,   852,   691,
     690,   687,   365,     0,   329,     0,   329,     0,   329,     0,
       0,     0,     0,     0,   228,   329,  2743,     0,  1988,   548,
     546,  1190,  1661,  1189,     0,   357,   329,   345,   350,   387,
       0,   236,   311,   312,     0,   239,  2735,     0,  1996,  1666,
    1664,   329,   329,   346,   349,   385,     0,     0,   234,   235,
     247,   246,   238,     0,  1995,     0,  2000,   329,   329,   351,
     255,   253,   329,   243,   251,   245,     0,   252,   313,   240,
       0,     0,  2007,     0,   237,   254,  1998,  1999,  1997,  2002,
       0,     0,  2004,  2005,     0,  1969,   244,  2006,  2001,     0,
    2008,  2010,     0,  2003,     0,  1189,  2009,     0,  1190,  2011
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    66,   641,  1541,    67,    68,    69,    70,    71,  1385,
      72,   852,  1305,  1825,  1826,    73,   579,    74,  1583,  2123,
    2124,  3425,  3426,  2125,   674,   675,    75,  2159,  3451,  4357,
    3452,  4363,  3453,  4365,  1600,   547,   548,  2063,  2064,  1109,
    3073,  3013,  3897,  3017,  4053,  4198,  4095,  2081,  3415,  3898,
    3899,  4062,   574,  2157,  1555,  4227,  2043,  4348,  2044,    76,
     672,  1082,  1580,  1581,  3437,  3438,  3711,  3439,  3703,  3704,
    3705,  3706,  4515,  4320,  4436,  4516,  4601,  4636,  4642,  4643,
    4564,  4652,  4653,  4654,  4640,   925,  4655,    77,   602,   603,
     927,  1415,  1840,  1416,    78,    79,   573,  1331,  1332,  1333,
    1334,  2336,  1841,  2331,  2332,  3203,  4565,  4638,  4321,  4322,
    4205,  4323,  4065,  4324,  4209,  4325,  4068,  4326,  4327,  4328,
    4329,  4507,  4330,  4204,  4557,  4317,  4318,  4559,  4618,  4634,
    4331,  4075,  4199,  4423,  4076,  4200,  4502,  4313,  4503,  4552,
    4614,  4314,  4424,  4555,  4427,  4332,  4338,  4517,  4333,  4339,
    4334,  4080,  4216,  4337,  4214,  4336,  4561,  4512,  2651,  3072,
     659,   660,   685,  2147,   661,  1098,  1052,  1557,  2076,  2077,
    2520,  2521,  2633,  2634,  2635,  2068,  2069,  2070,  2135,  2136,
    2137,  2050,  2051,  2052,  1561,  2047,  2048,   662,  1053,  1063,
    2071,  2072,  2073,  2639,  2139,  2140,  2141,  2142,  2074,  1818,
    2075,  2920,  2657,  3715,  3714,  2658,  3448,  4101,  4354,  3088,
    3089,  3000,  3360,  2094,    80,   591,   905,  1382,  2378,  1383,
    2801,  2802,  2803,  1880,  1881,  3785,  1885,  2377,  3960,  4265,
    3961,  3962,  2805,  4128,  2809,  3228,  3229,  3538,  3787,  3965,
    4376,  4267,  4467,  4374,  4463,  4375,  4465,  4576,  4529,  4530,
    4278,  4386,  4387,  4471,  4532,  4141,  4142,  4143,  2397,  2814,
    3790,  3718,  2129,  1547,  1548,   549,   550,   551,  3308,  2659,
    2577,  2660,  2661,  3383,  2579,  2580,  2773,  1470,  3373,  3344,
    3761,  3079,  3083,  3084,  3085,  3086,  3087,  4295,  4409,  4410,
    4407,  3393,  3306,  2933,  2934,  3005,  3396,  3673,  3879,  4500,
    4549,  4550,  4551,    81,   902,  3919,  3847,  3862,  3675,  3676,
    3677,  3678,  3679,  3680,  3681,  3115,  3116,  4019,  4020,  4021,
    3110,  3111,  3474,  3880,  3881,  3882,  3920,  4034,  1229,  3467,
    1437,  1438,  3972,  1448,  1449,  2423,  1922,  2424,  1551,  3468,
    3469,  3470,  3891,  3883,  3395,  3840,  4012,  4015,  4182,  4416,
    2935,  3307,  2936,  3311,  1003,   552,  2937,  2938,  2160,  2161,
    4237,  4246,  4250,  4238,  4251,  4247,  4239,  4240,  4241,  4253,
    4249,  3095,  3925,  3926,  3299,  3309,  3178,  4184,    82,   517,
    2079,  1046,  1055,  1051,  1074,   667,  1567,  2082,  2595,  3687,
     649,  2581,  3833,  3605,  3837,  2582,  3323,  2583,  3816,  3991,
    2584,  3622,  3835,  4009,  3324,  3325,  2585,  2586,  2587,  3825,
    3832,  4174,  4449,  4450,  4451,  2939,  1364,   664,   665,  1067,
    1068,  1069,  2322,  3391,  2983,    83,  2010,  2005,    84,  1015,
    1016,  1017,  1516,  1517,  2008,  2009,  2465,  2889,    85,   677,
    1587,    86,  1393,  2389,  2390,  2391,    87,  1075,  1571,  1572,
    2088,  3022,  3421,  3692,  3908,  4090,  3904,  4224,  4225,    88,
      89,   678,  1594,  1595,  1596,    90,  1376,   524,    91,   913,
    1388,  1390,  1391,    92,   671,  1076,  1077,  1078,  1079,  2090,
      93,  1871,  2362,  2363,  2364,  2365,  1577,  2599,  1578,  1579,
    2099,  3221,    94,    95,   638,  2282,   608,   934,   609,   610,
    1916,  2414,  3762,   945,   946,   947,  2842,  1427,  1428,  1429,
    1877,  2847,  4188,  1162,  1159,   816,   817,   818,   819,  1253,
    1254,  3884,   820,  1263,  1784,  3127,  3489,  1645,  1646,   821,
     822,   823,   824,   825,   826,  1811,  3146,  3147,  3504,  2309,
    2310,  2311,   827,  2201,  3133,  2214,   828,  1246,  1769,  1701,
    3496,  3139,  3746,  3935,  1630,  2177,  2695,  3118,  2769,  2276,
    1184,  1185,  1144,  2184,  1636,  2016,  2017,  2018,  2019,  2020,
    3579,  3580,  3975,  3804,  3977,  3808,  2475,  2476,  1900,  1901,
    2021,  2022,  2890,  3802,  4154,  2277,  2278,  2279,  3514,  2891,
    3281,  2908,  2909,  3814,  2466,  2023,  2897,  4290,  3984,  3985,
    4405,  4404,  3986,  3812,  3813,  3584,  3585,  3025,  3026,  3027,
    2828,  1692,  1693,  1699,  1359,  1360,  1631,  2359,  2789,  3797,
    3969,  2300,  3556,  3967,  4148,  2590,  3352,  3353,  2416,  2417,
    2912,  3296,  3590,  1473,  3763,  2791,  1975,  2877,  2878,  3723,
    4122,  4641,  2921,  2873,  3403,  1663,  1664,  3359,  4283,  4475,
    4579,  4580,  4581,  3256,  3257,  3560,  3561,  2418,  2839,  3258,
    3798,  4153,    96,   556,    97,  1823,  2772,  1302,  2328,  1086,
    1395,  1617,  1618,   840,   569,    98,   580,  2360,    99,   598,
    1898,   892,   917,  1396,  1397,  2398,  2815,  2822,  2399,  2827,
    3547,  2817,  3233,  3234,  2317,  2318,  2818,  3236,  3544,  3528,
    3529,  3216,  3782,   100,   626,  3291,  2903,  2904,  4259,  4260,
     918,   101,   555,  1131,  2671,  1623,  2165,  1132,  1133,  2168,
     703,   704,   102,  1020,   622,  1496,  1497,  1498,  1993,   103,
     614,  1004,  2874,  3274,  1969,   909,  1298,  1477,  1007,  1478,
    1955,  2446,  1459,   104,  1042,  1041,   105,   645,  1543,   106,
     107,   108,   109,   110,   111,   112,   113,   853,  1325,  1836,
    2777,  3189,  1326,  1327,  2329,  3943,   114,   599,   922,   923,
    1400,  2402,   115,   593,   910,  1891,   116,   583,   897,  1368,
    1870,   117,   118,   119,   899,  3222,  4370,  4525,   587,  1873,
    1372,  3449,  4285,  4395,  4396,  4398,  4483,  4484,  4573,  4646,
    4668,  4662,  4671,  4672,  4675,  4680,  4681,   830,  1029,   831,
    4003,   832,   833,   834,  2823,  2824,  3297,   835,  2825,   836,
    3006,  1087,  1620,   577,   499,   656,  1030,  2797,   838,  4082,
    1049,  1102,   501,   502,   120,   611,   961,  1453,  1443,  1452,
    1942,  2440,  1946,  2442,  2443,  3270,  2865,  3271,  2866,  1009,
    1938,  1943,  2867,   964,  1931,  1932,  1933,  1934,  2858,  1928,
    1952,   121,   900,   534,  1374,  1375,  2371,   122,   625,   123,
    1361,  1864,  1865,  2356,  2788,  2357,   124,   930,   125,   879,
    1858,   880,  1337,   881,   882,  1351,  1345,  1354,  1348,  3948,
    3774,  3775,  2344,  1301,  1103,  2151,  3066,  1104,  1850,  2338,
    2339,  3523,  3777,  3207,  3954,  3955,   126,   525,   537,   680,
    1093,  1421,   127,   128,   129,   130,  1424,  1536,  2410,  1537,
    2283,  1538,  1539,  2030,  1914,  1765,  1766,  3176,  1243,  1244,
    2286,  2745,  2746,   948,   689,  1119,  1111,   518,   519,   520,
     692,   693,   521,  1072,  1073,  2596,  3019,  3417,  3690,  3691,
    3903,  4087,  1113,  3915,  4444,  4605,  1114,  1115,  3074,  3917,
    4231,  4446,  4571,  1116,  2648,  3434,  4091,  4350,   131,  1031,
     635,  1534,  1529,  1531,  2026,  2483,   132,   133,   134
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -4040
static const int yypact[] =
{
    5405, 54033, 54033, 54033, 54033, 54033, 54033, 54033,  2366,    91,
   -4040,   411,   758, 54033,   782,   540,   540,   470,  3384, -4040,
   -4040, -4040, -4040, -4040,  2872, -4040, 54033,    91,  1064, -4040,
   25152, -4040, -4040,   -50, -4040,    69,   540,    91,   559, -4040,
   54033, -4040,   738,  1569,    91, -4040, -4040, 47136, -4040,   470,
   54033, -4040, -4040,   402, -4040, 47136,   158,   183,   676,   729,
   -4040, -4040, 54033,  1123, -4040,  -173,  1283,  1124, -4040, -4040,
     901, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, 25783, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  1247,
   54033,  1318, 54033,  1280, 54033, 45255, 54033, -4040,  1338, -4040,
   -4040,  1546, -4040, -4040,   540,   470, -4040, -4040, -4040, -4040,
    1046,   411, -4040, -4040, -4040, -4040, -4040,  1668,  1480, -4040,
    1506, 45255, -4040, 54033, -4040, -4040, -4040,  1128, -4040,  1182,
   -4040,  1188,  1551,  1588,  1604,    52, 11690,  1613,  1613,  1613,
    1613,  1536,  1613,  1613, 54033, -4040,  1613, -4040,  1613,   540,
   -4040, -4040, -4040,  1761,  3648, 54033,  1498,   873,  -143, 45255,
     180, 54033,   411,    17, -4040,  1676, -4040, -4040, -4040,   540,
   -4040,  1885,  1769,   258, 54033, -4040, -4040,   540,  1195,   -13,
    1362, -4040, -4040,  1512, -4040,  4380,   175, -4040, -4040, -4040,
    2056, 27676, -4040, -4040,  3875,  1512,  1513,   411,  -154,  1522,
     411, -4040, -4040, 54033,   411,   540,  1695, -4040, -4040,   329,
     329,   329, -4040,   329, -4040,   329, -4040,  -173,  1356, -4040,
   -4040,  1390, 54033,  -147,   851, -4040, -4040,  1360,  1069, -4040,
    1431, 42747, -4040, 54033, -4040, -4040, -4040, -4040,  1667, -4040,
   -4040, -4040,  1713, -4040,  1500,  1235, 54033,  1534, -4040, -4040,
   -4040, 25152,  1422, 54033,  1526, -4040, -4040, 25152, 25152,   177,
      -6,  1623, 54033, 54033,  1881, -4040,  2066, 42747,  1649, -4040,
     162,  1212,  1546,  2080, -4040,  1480, -4040,  1480,  1480,  1480,
   -4040, -4040, -4040, 47763,    52,  1461,  1463,  1466, 16882, -4040,
    1492,  1504,  1518, 11690,  1559,  1564,  1577,  1579,  1590,  1635,
    1673,  1678,  1681,  1683,  1692,  1698,  1701,  1705,  1705,  1710,
    1712,  1716,  1720,  -226,  1722, -4040,  1726,  1734,  1736, -4040,
   -4040,  1742,  1747,  1759, -4040, -4040,  1775,  1791,  1813, 12339,
    1815,  1824,  1826, -4040, 21988,  1829,  1840,  1844,  1847,  1873,
    1877,  1884,  1886,  1893, -4040, -4040, 11690,  1710, -4040, -4040,
    1904, -4040,  1907,  1909,  1912,  1914,  1929,  1931,  1937,  1951,
    1954,  1966,  1968,  1982,  1994,  2005,  2012,  2024,  1710, -4040,
     455,  2033,  2035,   549,  2041, -4040,  2044, -4040,   373,  2063,
    1705,  1710,  1710,  2068,  2072,  2075,  2081,  2083, 16882, 16882,
   16882, 11690, -4040, 54033, -4040, 54033,  1544,  3512, -4040,  2752,
   16882,   169, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  1486,
    1686, -4040, -4040, -4040, -4040, -4040, -4040,  2085,  1538,  2095,
   54033, 54033, 54033, 54033, 54033, 54033, 45255,  1781, 54033, 42747,
   -4040,  1613,  1793,  3994, 30826,  2001,  1962,  1735, -4040, -4040,
   -4040, -4040, -4040,  2128, -4040, -4040,  1996, -4040,  2105, -4040,
   -4040,   357, -4040,    79, -4040, -4040, -4040, -4040, -4040, -4040,
    2214,  2017, -4040, -4040,   117, -4040, -4040, 54033, -4040, -4040,
   -4040, -4040,  2349,  2144, -4040, -4040, -4040,   870,  2632,   192,
   25152, -4040,  2077, 11690,  1634, -4040,  -201, -4040, -4040,  2452,
   -4040, -4040, 42747, 25152, -4040, -4040, -4040, 22621, -4040, -4040,
    2706, -4040,  2119, -4040, -4040,  1686,  3623, -4040,  2001,  2397,
   -4040,  2414,  2328,    -6,  2217, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040,  2162,  2056, -4040, -4040,   382,
    2322,  2165,   425,   435, 38358,   825,   443,    36, 28306, 38985,
    2167, -4040, -4040, -4040,   767,  2331, -4040,  2668, -4040, -4040,
     -10, -4040,  2206,  2427,   -10, 43374,  2583,  1532, -4040,   288,
   -4040,  2664, -4040, -4040, -4040, -4040, -4040,  2334,  2318,  2367,
   -4040,   309,  1941, -4040,   411, -4040,   719, -4040, -4040,  2346,
   -4040,  2583,   -10,  1532, -4040,  2595,  2721,   853,  2698,  -163,
   -4040, -4040, -4040,  -119,  2805, -4040,  2253, -4040, -4040, -4040,
   25152, -4040, -4040, -4040,  2349, -4040, -4040, -4040, -4040,  2261,
   -4040,  2539,  2374, -4040, -4040,     9, -4040,  2274,   -37,  2768,
   -4040,   917, 39612, -4040, -4040, -4040,  2802,  2826,  1705,  2297,
   -4040, -4040, -4040,  2953, -4040, -4040,  2320,  2856,  2856,  2856,
    2969, -4040, -4040, -4040, 25152, -4040, -4040, -4040,  1235, -4040,
   -4040,  2506,  2373, -4040,  1534, 25152,  2744,  2351, -4040, -4040,
    2604, 11690, -4040, -4040, -4040,    51, -4040, -4040,   108, -4040,
    2945,  2562, -4040, -4040, -4040, -4040,  2830, -4040, -4040,  2953,
    2894,  2856,  2785,  2371, -4040, -4040, -4040, -4040, -4040, -4040,
     223, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  1488, -4040,
   -4040, -4040, -4040, -4040,  1534, -4040, 25152, 54033, 54033, 54033,
   25152, -4040,  2381, -4040,  2368, -4040, 11690, 11690,  1571,  2957,
    3019,  3019,  3019,  1544,  2428, 11690, 11690, 11690, 11690, 11690,
   11690, 11690, 11690, 11690, 11690, 11690, 11690,  1609,  2403, -4040,
   -4040,   118, -4040,  2407, 11690, 11690, -4040, 11690, 11690, 26414,
   -4040,  4795, 11690,   761,  2915, 11690, 11690, 11690, 11690,  3040,
   11690, 11690, 11690, 26414,  3052,  2415, -4040,  2419,  1680, 11690,
   11690,  1723, 11690, 11690, 11690, 11690, 11690, -4040, -4040, 11690,
   11690, 11690, 11690, 16882, 11690, 11690, 11690, 11690, 11690,  2421,
   11690,  3019,  3019, 11690, 11690,  1782, -4040, -4040, 11690,  2018,
    2018, -4040, 11690,  8445, 11690, -4040, -4040, -4040, -4040, -4040,
    2422, -4040, -4040, -4040, 26414,  3019,  3019, 11690, 11690,  2957,
    2957,  2957,   152,  2430,   950, 11690, 28936,  2437, -4040, -4040,
   -4040, -4040, 11690, 11690, 11690, -4040, 16882, -4040, -4040,  1278,
   -4040, -4040, -4040, 12988, 16882, 16882,  2448, 16882, 16882, 16882,
   16882, 16882,  2822, 16882, 16882, 17531, 18180, 16882, 16882, 16882,
   16882,  1321,  2957, 45255, 16882, 11690, -4040, -4040, 54033, -4040,
   -4040, -4040,  2451,  2723,  1781, -4040, -4040,   813,  2944, -4040,
   -4040,  2462, 25152, -4040,  2458, -4040,  2831, -4040, -4040,  2832,
    2833,  2834, -4040, -4040, -4040, -4040, -4040,  3071,  2841, -4040,
     411,  2844, -4040, -4040, -4040, -4040,  2482, -4040, -4040, 18829,
   45255, -4040,  2484, -4040,  2968, -4040, -4040, -4040, -4040, -4040,
   -4040,  2588, -4040, -4040, -4040,  2492, -4040, 42747,  2492, -4040,
   -4040,  2492, -4040, -4040,  2492,   850,  3687, -4040, -4040, 54033,
   -4040, 54660, -4040, -4040, 22621,   411, -4040, -4040, 13637, -4040,
   -4040, -4040,  2859,   224,  2493, -4040, 25152, -4040,  1544, -4040,
      68,    68,  2745,  1331, 45255, -4040, -4040,   186,  2494,  2577,
    2501, -4040,  2582, 25152, 25152, -4040, -4040, -4040,  2754, -4040,
     411,   -13, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040,  2505,  2994,  2507, 42747,   984,
   -4040, 54033, -4040,  1786, -4040, -4040, -4040,  2522, -4040, 11690,
   -4040, -4040, 54033, -4040, -4040, -4040, -4040, -4040,  3098, 11690,
   -4040, 42747,   -83,    42,   764,   767, -4040, -4040, -4040, -4040,
   -4040, 54033, 48390,  2528,  9094,  2650,  2931,   411, 11690, -4040,
    2541,  1480, 54033, 54033, 54033, 25152, 54033, 25152, -4040,  1166,
    1166, -4040, 40239, -4040, -4040, -4040, -4040,   -10, 54033, 54033,
     -10, 42747, -4040,  1532,   646, 54033,   -10, -4040,  2932,  2648,
   -4040, -4040, -4040,  3011, -4040, -4040,  3002,  2553, -4040,  3037,
   -4040, -4040,  2688,  1532, -4040, -4040, 25152, -4040, -4040,  1532,
   -4040,  1532,  1532, 11690,   -10,   -10, -4040,   844, -4040, -4040,
   -4040,  2709,  -154, -4040, -4040, -4040,  1156,   329,  2816, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,    62,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040,   130, -4040, -4040,
   -4040,   332,  3078, -4040, 45255,  2683,  1065,    13,  2683,   797,
     411,   821, -4040,   821, -4040, -4040, -4040,  2847,   195, 25152,
   -4040,  2574, -4040,  2824, 49017, 25152, -4040, -4040, -4040,  1516,
    2576,  2579,  1544,  4698, -4040, -4040, 25152, -4040, -4040, -4040,
   -4040,  2634, -4040, -4040, -4040, -4040,  2205, -4040, -4040, -4040,
     154,  1967,  2607,  2630,   196, 42747,  3039, 54033, 54033,  1480,
   54033, 54033, -4040, -4040, -4040, -4040, -4040,  2589, -4040,  2754,
   -4040,  1344, 54033,  3043, 33342, -4040,   230,   846, -4040,  3019,
    2597, -4040,  2598,  2601,  2609, 11690,    70,   188,   867,  -233,
    1418,   922,   262,  1119,   355, -4040,  1455,   409,   413,   436,
     161, -4040,  2610,  2600, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  2615, -4040, -4040, -4040,   490,   533,  1127,  1136,
    2616,  2621, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  3072, -4040,  1476, -4040, -4040, -4040, -4040,  2622,
   -4040, -4040,  1200,   539,   611,   209,  2644,  1508,   648,  1511,
    1524,  2626, 26414, 54033,  3019,  2627,  1205,  1223,  3019,  2641,
     666,  1244,  1582,  1592,  1615,  1246,  1270,   750,  1645,  2694,
    1292,   770,   831,   909,   920, -4040,  1300,  2643,  2647,   941,
     181,  3019,  2649,   221,  2653,  2658,  1316,  9743, 10392, 11041,
     330,   988, -4040,  2661, -4040,  2419,  2662,  2666,   241,  1323,
   -4040, 11690, -4040, -4040,   960,   775,  2729,   141,   764, -4040,
    2807, 54033,  2277,   149, -4040, -4040, -4040, -4040, -4040, -4040,
      46, -4040,  2665, -4040,  2670,  1863,  2675, 11690,  1142,  2675,
    2152,  2442,  2442, 16882,  2759,  2990, 12339,   745, 12339,   745,
    2675,  2675,  2675, -4040, 16882,  2676, 16882, 16882, -4040,  2957,
    1544,  2674,  -258, 54033, 25152,   813, -4040, -4040, -4040, -4040,
     767, 42747,   156, 25152, 45255,  2677, -4040, -4040, -4040, -4040,
   -4040, -4040,   411, -4040, -4040,  4030, 25152,  2766,  2771,  2772,
   -4040, 31456, -4040, -4040, -4040, -4040, 31456,   -35, -4040, 54033,
   -4040,  2777, -4040, -4040, -4040, 23252, 23252, -4040, 23252, -4040,
   -4040,   301,   304,  3483,  2725, -4040, -4040, -4040, 32713,  1544,
   -4040, 25152, -4040,  3109,   638, 25152,  2703, -4040,  2707, -4040,
   -4040, -4040, -4040, -4040,  2146,  2815, -4040,  2710, -4040, 11690,
     411, -4040, 42747, 42747, 25152, 25152,   903, -4040,  1451,  2712,
   -4040, -4040,  3346, -4040,  3623, 18829,  3151,  3164, 23252, 23252,
   23252, -4040, -4040, -4040, -4040, -4040,  1219,  1544, -4040,  2724,
   -4040, 44001, -4040,  1544,   767,  2717,  2718, -4040, -4040,  3095,
     818, -4040,  2728,  2732, -4040,  2730,  2731,  2758, 49644, 11690,
   -4040,    42, -4040, -4040,   767, -4040, -4040, -4040, 16882,  1726,
   -4040,  1544, -4040, -4040,   411,  3178, -4040,  1544,  2736, 54033,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,  3202, -4040,  2918,   660, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040,   -10, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  2985,  2583,  1941,  2931, -4040,   -10,  1532, 25152,
     -10,   -10,  1544, -4040, -4040, -4040, -4040, -4040,  2770, -4040,
    2827, -4040, -4040, -4040, -4040, 54033,  2147,  2936, -4040,  2776,
   -4040, -4040, 25152, -4040,  2779, -4040,  3233,  3380,  2583, -4040,
   -4040, -4040,   767,   767,  3082, -4040,   411,  2912,  2913,  2920,
    2921,  2922,  2956, -4040, -4040,   411,   411, -4040, -4040,   767,
   -4040,  1874, -4040, -4040, -4040, -4040,   411,   411,   411,   411,
    2440,   411,   411,  1654, -4040, -4040,   767,   767, -4040,  2019,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040,  1003, -4040,  6768,
     153, -4040,  3001, -4040, -4040, -4040, 25152,  3253, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  2803, -4040,
   -4040, 11690,  3285,  3289,  3290,  3291,  3293,  3294,  3302,  3307,
    3308,  3310,  3313,  3317,  3318,  3320,  3321,  3323,  3326,  3328,
    3329,  3331,  3332,  2853, -4040, -4040, -4040, -4040, -4040, -4040,
     173,   767,   767,   767,   767, -4040,  2450, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, 45255,  3167,  2003,   669, -4040,
   -4040, 45255, -4040, 54033, -4040,   371, 54033,  2857,  -166,  3526,
    1398,  3131,  3133,  3136, 54033,  2908, -4040, 33342, -4040, -4040,
    1156, -4040,  2858, 14286, -4040,  2864, -4040, 11690, -4040, -4040,
   -4040,  1507, 11690, 11690,  3355,  2273, -4040, 44628, -4040, -4040,
   -4040, 11690, -4040, 11690, -4040, 11690, 11690, 11690, 11690, 44628,
    2273, 11690, -4040,  2868, -4040,  3273,  3274, -4040, -4040, -4040,
   -4040, 11690, -4040, 11690, 11690, -4040, 11690, 11690, 11690, 11690,
   -4040, 11690, -4040, -4040, 16882, -4040,  2869,  2875, -4040, -4040,
   -4040,  2877, -4040, 11690, -4040, -4040, -4040, -4040, -4040, -4040,
   11690, -4040, 11690, -4040, 11690, 11690, 11690, 11690, -4040, -4040,
   -4040, 14935, 11690, 11690,  2878, -4040, -4040, 11690, 11690, 11690,
   -4040, 11690,  1531, 11690,  1641, 11690,  2053, 11690, -4040, 11690,
   -4040, -4040, -4040, -4040, 11690, -4040,  1659, -4040, -4040,  1743,
   -4040,   960,  2882, -4040, -4040,  1786, -4040, -4040, 45255, 11690,
   -4040, -4040, -4040, -4040, -4040, -4040, 16882,   251,  2883, 16882,
   -4040,  2152,  3040,  3040,  2034, 11690,  1142,  2152, 11690,  2886,
    2887, -4040, 11690, 54033, -4040, -4040, -4040, -4040, 45255, -4040,
   -4040, -4040, -4040,   156, -4040,  2458, -4040, -4040,  2703, -4040,
    3366,  2888, -4040, -4040, -4040, -4040, -4040, -4040,  1675, -4040,
   42747,  2885, -4040,  2891,  2970,  2972,  2973, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  2583,
    1451, -4040, -4040,  2889, -4040, -4040,  2604,  2989,  2914,  3267,
    3459, -4040, -4040, 54033, 16882, -4040,  3501,  2905,  2906, 54033,
    1544, -4040,  2986, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040,   765, -4040, -4040,  2925,  2925, 20724, -4040, -4040, -4040,
   54033, -4040, -4040,  3399, -4040,  3185, 42747,  3369,  3370,  3376,
     917, -4040,   200, -4040,   150,  3333,  2583, -4040,  3378, 45882,
   -4040, 33969, -4040, -4040, -4040, -4040,   -83,  3022,  3025,   -64,
   -4040, -4040,  3322,  3156, -4040, -4040, -4040,   767,  1544, -4040,
    2528,  9094,  2937, 29566, -4040,  1068, -4040,    35, -4040, 40866,
    3411, 40866, 40866, -4040,  3222, -4040, -4040,  3178, -4040,  2725,
    1532, -4040, -4040,   844,  1814, -4040, -4040,  1093,  3334,  3335,
   -4040,  3207,  1764,  3207, -4040, -4040,  1093, 26414,  1156,  2754,
   -4040,  2440,  3264, -4040, -4040, -4040, 44001, 41493, -4040, -4040,
   -4040, -4040,  3480, -4040,  3481,   242, -4040, -4040,  2463,    13,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040,   797,  2463,  2463,   821, -4040,
     124, -4040, -4040, -4040, -4040,  2639,   767,  3521,  3206,   767,
     767,  3521,   767,  3209,  3210,   767,   767,  3042,  3464,   767,
    3353,  3065,  2010,  3357,   767,  3219, -4040,  3070,  3478,   767,
     767,   767,   767,   767,  3521,  3225,  3574,   767,   767, -4040,
     767,  3227,  3226,   187,  3230,  3231,   767,   767,   767,   767,
     168, 54033,   767,   767,  3240,   767, -4040, -4040,  4304, -4040,
   -4040, -4040, -4040, -4040, -4040,  1259, 23886, -4040, -4040, -4040,
   -4040,   767,  1147,  1380,  3073,   240,  2996, -4040,   363,  2998,
   50271,  1544,  3000,  2440,   411,   411,  1068,   411,  2440,   411,
     411,   411,   411,   411,   411,   411,  2440,  2440,   411,   147,
    1342,   411,  2440,  4698,   411,  2146,  2463,  2463,  1967, -4040,
    3261,  3436,   767, -4040,  1051, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040,  3092, -4040,   129,  3189,  3006, -4040,
   -4040,    80, -4040, -4040,  1002, 25152, 19462, -4040, -4040,  3256,
   -4040,  2817,   872,   872, -4040, 25152, 25152, 25152, -4040,  3004,
    1156,  2725,  1499,  2725,  3013, -4040, 12339,  1325, -4040,  1544,
   11690,  1544,  1999, -4040,  3009,  3009,  3009, -4040,  3010, -4040,
   -4040,  3009,  3418,  3009,  3419,  3023,  3028,  1750,   366, -4040,
    1783,  2067,  1330,  3029,  3036,  1486, -4040, 11690, 11690,  1341,
    1350,   596,  1021,  1035,   269, -4040,  1359,  2919, -4040, -4040,
    1361,  1375,  1409,  1416,  1058,  1430,  1798, 12339,  1489,  1025,
     322, -4040,  1505,  1149,  1157,  1586, 11690,  1628, 11690,  1653,
   11690,  1658,  1679,  1696, -4040,  2162,  1743, -4040, -4040,  3038,
   -4040, -4040,  3015,  1544,  3041, -4040, -4040, 11690, -4040,   169,
   -4040, -4040, 16882,   344,  3045, -4040,  1544, -4040, -4040,  3047,
    1486, -4040, -4040, -4040, -4040, -4040, -4040,  3063,  3569, 31456,
   -4040, 54033,  -244,  3046, 34596, 42747, 42747, 42747,  3049, 11690,
   -4040, -4040,  3324, 25152, -4040,  3466, -4040, -4040, -4040, -4040,
   -4040,  3055,  3051, -4040, -4040, -4040,  2152,  3428,  3309, -4040,
   -4040,  3057, 42747, -4040,  2056, 26414, -4040,  3059, -4040,  3059,
    1290,  3061,  1803, -4040, -4040, -4040,  3060,  2217,  1836, -4040,
   18829,  3518,  2462, 42747, 42747, 42747, -4040,  2725,  2725,   114,
    3125,  3471, -4040, -4040, -4040, -4040, 50898, -4040, -4040, -4040,
   -4040,  -256, -4040,  3076,  3077,   146,  3299, -4040, -4040, -4040,
   -4040,  9094, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040,  2583, -4040, -4040, -4040, -4040, 40866,
   -4040, -4040, -4040, -4040, -4040,   -10, -4040,  3563, -4040,  3081,
    -223,   775, -4040,  1891, -4040, -4040, -4040,  3473,  3207,  3207,
    1093,  3474,  1132,  3084, -4040,   767, -4040,  1560, -4040,  2056,
   -4040, -4040, 11690, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040,  1003, -4040, -4040,
   27045,  1480, -4040,   176, -4040,  1480, -4040,  1516,  1516,  1480,
   51525, 27045,    91,  1068,  2440,  1613,  2440, 52152,    91,   411,
     411,  2454,   767,  2440, -4040, -4040,  3476,  1613,  3477,  1613,
    1613, -4040, 45255, 54033, -4040,   767,  1277,  2440, 52779,  1068,
    1068,  1613,    91, 26414,  2120,  2594, -4040,   411,    91, -4040,
   -4040, -4040, -4040, 25152,    91,    91,  2082,  2722,  2836,  2884,
   -4040, -4040, -4040,  2440,  2594, 52152, -4040, -4040,  7425, -4040,
   -4040, -4040, 20093, 54033,   315,   163, -4040,  3080, 36477,  3327,
   -4040, 11690, 11690,  3367, 54033,  3368, -4040,  3656, 54033,  3722,
   -4040,   132, -4040, 52152, -4040,  3096, -4040,  3097, -4040,  2440,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  3101, 54033,
    2463,  2003, -4040, -4040, -4040, -4040,   411,  1002, -4040, -4040,
   -4040, -4040,  3377,  3382, 54033, -4040, -4040, -4040, -4040,  3244,
   -4040, 25152,  3104,  3106,  3110, -4040, -4040, -4040,   207, -4040,
    4824, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   33342,  2725,  3374, -4040, -4040,  3040, -4040,  1544, 11690,   476,
   -4040, -4040,   280, -4040,   912, -4040, -4040, -4040,  3113, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040,  3286, -4040, -4040,  2273,
   -4040, -4040, -4040,  3114,  3040,  3040, -4040, -4040,  3714,  3283,
   11690, 11690, -4040, 11690, -4040,   907,  3119,  3146, -4040, -4040,
   -4040, -4040, 11690, -4040, -4040,  3040, -4040, 11690, -4040, -4040,
   11690, -4040, 11690, 11690, -4040,  1732, -4040,  1745, -4040,  1832,
   -4040, -4040, -4040,  2522, -4040, -4040,   950, 54033, -4040, -4040,
    1879, -4040, -4040, 11690, -4040, 45882, -4040, -4040,  3343, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040,  3564, -4040, -4040, -4040,
    -170,  -170,  -170, 15584,  1544,  3620, -4040, -4040, -4040,  3466,
    3507, -4040,    30, -4040, 54033,  3132,  1626, -4040,  1889, -4040,
   -4040, -4040,  2162,  3138, -4040,   767, 15584,  2925,  3301, -4040,
   -4040,  1290, 26414, 33969, -4040, -4040, 54033, -4040, 42747,  2462,
    2462,  2462,  2583,  3570,  2989,  2989, -4040, 30196, -4040, -4040,
    3295, -4040, -4040, 35223, -4040, -4040, -4040, -4040, -4040, -4040,
   29566, 49644, -4040, -4040,  2583, -4040,   411,  2116,  1786,  2271,
   -4040,  1156, -4040,  1093,  3530,  3531, -4040,  1093, -4040, -4040,
   26414,  2725, 15584, -4040,  2162,  1544,  3141,   307, -4040, -4040,
   -4040,    91,  3147,  3532,  3534,  1516, -4040, 27045, 27045, -4040,
   -4040,  1480,  1480, -4040, -4040, -4040,   751, 52152, -4040, -4040,
   27045, -4040, -4040, -4040,  3148, -4040, -4040,  2146, -4040, -4040,
   41493,   411, -4040,  1613, 54033, -4040, 27045, 27045, -4040,  3172,
     411, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   27045, 52152,  3153, -4040,   307, -4040, -4040, -4040, -4040, -4040,
    1885, -4040, 52152, -4040, -4040, 52152, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,  3157,  1528,  2525, -4040,  3155, -4040, 54033,
   -4040, -4040, 25152, -4040, -4040, -4040,  7056, 54033, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  1544,  3040,
    3719, -4040, -4040,  3311,   411,  3659, -4040,  1899, -4040, -4040,
   -4040,  3576,  3162, -4040, 50271,  1916, -4040, -4040,   797, -4040,
   -4040, -4040, -4040,  3314,   969, -4040,  3338,  3166,  3168, -4040,
   -4040,   411,  3171, -4040, -4040, 20093, -4040, -4040, -4040,  3794,
   -4040,  3177,  3179,  3180,  2858, -4040,  3553,   952,  1544,  3183,
    3184,  3186,  3187,  3796,   160, -4040,  3801, 44628, -4040, -4040,
   -4040,  1938,  3475, -4040, -4040, -4040,  3009, -4040,  3010, -4040,
   -4040, -4040,  3776, -4040, -4040,  3009,  3593,   280, -4040, -4040,
    3197, -4040,  3198,  3199, -4040,   329,  3200,  1842,  1161,  1946,
    3511,  3587, -4040,  3429, -4040,  1849,  1334,  1862,  1897,  1902,
    1933, -4040, -4040, -4040,  1464,   775, -4040, -4040,  1956, -4040,
    3568,  3482,   185,  3232,  3232,  3232,  1726,  1544,  2000, -4040,
   -4040, -4040, -4040,  3606, -4040, -4040,  3212,  3218, 54033, -4040,
    3309,  2522, 26414, 15584,  3220,  3217, -4040,   -37, -4040, -4040,
    3214, -4040, -4040,  2462, -4040,  3805,  3639, -4040, -4040, 45255,
    3223, -4040, -4040,  3533, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  2776,  2592,  3270,  1093,  1093,  2904,  3271, 11690,
    3229, -4040,  3374, -4040, -4040,   387,  2522, 11690, -4040, -4040,
   -4040, -4040, 11690,  1480, -4040, -4040, -4040, -4040,  3236, -4040,
   -4040,  3745,  3746, -4040, -4040,  2205, 54033, -4040,  3098, -4040,
   27045,  3148, -4040,   437,  3336, -4040, -4040, -4040, 26414, -4040,
   -4040, -4040, 54033, -4040, 25152, -4040, -4040,  3237, -4040,  3009,
    3009,  3009, -4040, -4040,  3009, -4040,  3010,  3469, -4040,  3010,
    3010, -4040, -4040, -4040, -4040, -4040,   280,   399, -4040, -4040,
     280, -4040, -4040, -4040,    92,   875,  3010, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040,  3009,  3009,  3009, -4040, -4040,   280,
    3009, -4040,  3009, -4040,  3208, -4040,   214,   106,  3009,  3009,
    3009,  3113,  3235, -4040, -4040, -4040, -4040, -4040, -4040, 54033,
   -4040,  1099, 54033,   134, -4040, -4040, -4040,  2440,  2015,   411,
   -4040, -4040, -4040,  3238,  3242, -4040, -4040, -4040,  1380, -4040,
   54033,  7056, -4040, -4040,   -37,  4304, -4040, -4040,  1144, 54033,
   54033, 54033, 42120, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, 44628, -4040,  3857,  3527,  3249, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, 11690, -4040, -4040, -4040,
   11690, -4040, -4040,  3562,  3723, -4040, -4040, -4040, -4040, -4040,
   -4040,   150,   150, -4040, -4040, -4040,  3883, -4040,  3349,  3350,
   -4040, -4040,  3351, -4040, -4040,   109,  2871, -4040, -4040, -4040,
   -4040, 15584,  3643,  3358, -4040, -4040, 54033,  3304, -4040, -4040,
    1464, -4040, -4040, -4040, -4040, 11690, -4040,  3374,  2454, -4040,
   30196, -4040,   950, -4040,  3312, -4040, -4040, -4040,  3319,  1544,
   54033,  3553, -4040,   937,  1464,   307,   804,  1935,  3276,  3278,
   54033,  3279,  3281, -4040,  2938, 27045, -4040, -4040, -4040, -4040,
   -4040, 25152,  7056,    91, -4040, -4040,  3148,   765,  3266, 54033,
    3605, -4040, -4040, -4040, -4040,  1185, -4040,  3282,  1185,  1185,
   -4040,  2322, -4040,  3330,   280, -4040, -4040,  3339, -4040, -4040,
   -4040,  1185,  3287,   280, -4040, -4040, -4040, -4040,  1185, -4040,
   45255,   411,  2540,  3905, -4040,  3344, -4040,  3798,  3674,  3920,
   -4040,  2727, -4040,  3683,  3580,   767, -4040,   280, -4040, -4040,
    3857, -4040,   280,  3857,  1185,  1185, 54033,  3424, -4040, 60303,
   -4040, -4040,  -173,  3337,  2045, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,  1391, 54033, 25152,  3367,  3489, -4040,  3098,
   -4040, -4040,  3256,  3301, -4040,  2048,   307,  3316,  2054,  2060,
    3779,  3487, -4040, -4040,  3325,  3340,   307,  2037, -4040, -4040,
   -4040, -4040,  3814, -4040, -4040, -4040, -4040, -4040,   343,  3578,
    2440,  2440,  2440,   667,  2871, -4040, -4040,  3364, 25152, 16882,
    3426,  2065, -4040, -4040,   137,  3409, -4040,  1377,   307, 11690,
    2583, 41493, -4040, -4040, -4040, 11690,  3345, 11690,  3347,  2098,
   -4040, -4040, -4040,  1516,  1516, -4040,   937, -4040, -4040,  2146,
    3309, -4040, -4040, 54033, 54033,  2108, 54033, 54033,  2766,  2771,
    2772,  1342,  1342, -4040, -4040,   315, -4040, -4040, -4040,  3720,
   -4040, -4040,  2115, -4040,  1032,  3595, -4040, -4040, -4040, -4040,
    1185, -4040,   329, -4040, -4040, -4040, -4040, -4040,   329, -4040,
   -4040, -4040, -4040,  3348, -4040, -4040, -4040,  3604,  3371, -4040,
    3352, -4040, -4040, -4040, 37104, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, 11690,  3811,  3356, 54033,   122, -4040, 61557, 61557,
   54033, -4040, -4040, -4040, -4040,  6261, -4040, -4040,   714, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
    3940, -4040,  3341, -4040, -4040,  3342,   206, -4040, -4040, 54033,
   53406, -4040, -4040,  7056,  3786,   240, -4040, -4040, -4040,   207,
    3354,  2217,  2086, 54033, -4040,  3618,   189,  1436, -4040,  3817,
   -4040, 11690, -4040, -4040,  3934, -4040, -4040, -4040, -4040, -4040,
   -4040,   783, -4040, -4040, 26414,  2754, -4040,  2146, -4040, -4040,
   54033, -4040,  3440,   767,   767,  3861,  3862,   767,   767,   767,
     767,  3359,  3409, -4040,  3841, -4040, -4040, 11690, -4040, -4040,
    1544,  3591, -4040,  3932,   775,  1544, 54033,  1544, 54033, -4040,
    3815,  3815, -4040, -4040,  2125,  2131,  2151, -4040,  2164,  2168,
   -4040, -4040, -4040, -4040,   315,  3363, -4040, 54033, -4040, -4040,
   -4040,    67, -4040, -4040,  2170, -4040,  2179,  1932, -4040,  3348,
   -4040, -4040, -4040, -4040, -4040, -4040,  1544, 11690, -4040, 11690,
    3393, -4040, -4040,  3818, 54033, -4040, -4040, -4040, -4040, 11690,
   -4040, 60303, 60303, -4040, -4040, -4040, -4040,  3981,   -37,  3951,
    3637,  3953, -4040, -4040,  2187, -4040, -4040,  2852, -4040, -4040,
    3656,  7056, -4040, -4040, -4040,   411,   767, -4040,  2086, -4040,
   -4040, -4040,   767,   307,  3372,  3626, -4040,   189, -4040, -4040,
   -4040,  1436, -4040, -4040, -4040,   307, -4040, -4040, -4040,  3373,
   -4040,   767, -4040,  3375, -4040,  3426, -4040,  3381, -4040,   411,
     411,   767,   767,  2787,  2787,  2146, 45255,  3485, -4040, -4040,
     767,   307, 54033, -4040,  1077,  3750, -4040,  2200,  2208,  1597,
   -4040, -4040, -4040,  3592, -4040,  2086, -4040, -4040, -4040,  3309,
   -4040,   936,   936,   280,   329,   280, -4040,  3385, -4040,  3386,
    1544,  1544, -4040,   261, -4040, -4040,  3784,  3876, 11690,  1544,
   57168,  3387, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, 60930, 11690, -4040,   714,  3940,
   -4040,  3661, -4040,  3662, -4040, 53406, -4040, -4040, -4040,  3897,
   60303, -4040,  3899, -4040,   -37, -4040,  2440,   231, -4040, 37731,
   -4040, -4040,  1707,   231, -4040,   231, -4040, -4040, 26414, 15584,
    2454, -4040, -4040,  3402, -4040, -4040,   759, -4040, -4040,   411,
     411, -4040, -4040, -4040, -4040, -4040,  2220, -4040, 45255, -4040,
   -4040,  4000,  4005,  3898,  4008,  1077, -4040,  1162, -4040, -4040,
   -4040,  4010, -4040,  4011,  3415,  3416, -4040,  2086, -4040,   189,
    1436,  2223, -4040,  4059, -4040,   995,  3694,  3696, -4040, -4040,
   -4040, -4040,  -124,  3450, 11690, 60303, -4040,  3912, -4040,  3845,
    2062,  3782,  3425, -4040,  3427,  2071,  3956, 61557, 61557, -4040,
   -4040, -4040, -4040, -4040,  3927, -4040, -4040, -4040, -4040, -4040,
    3804,  4076, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,  2229, -4040, 16233, -4040, -4040, -4040, -4040,
   -4040, 45255, -4040,  3485, -4040,  3443,   329,   329,  4042,   329,
   -4040,  4045,  4047,  1162, -4040, -4040, -4040, 50271, 50271, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040,  3506,  3967, -4040, -4040,
      74, -4040,   267, -4040,  1544, 57795,  4050, 54033, -4040, -4040,
   -4040, -4040, 11690, -4040, 46509, 58422,  3454, -4040, -4040, -4040,
    3638, -4040,  2852, -4040, -4040,  3641, -4040,  3402, -4040,  3465,
   -4040,  2152,  3409, -4040, -4040,  3460, -4040, -4040,   329, -4040,
     329,   329, -4040,  3470,  2239,   936,   936,   411,  3856, -4040,
      74, -4040, 11690, -4040,  3959,  3559, -4040,  3486, -4040, 60303,
    2078, 60303, -4040, -4040,  3907,  3488,   302, -4040,  3472, -4040,
   -4040, 60303,  3896,  3932, -4040, 16233,  3479, -4040, 11690,  3490,
    3494, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  1544,  4073, 60303, 54033, 55287,  3679, 59049,  3935,
   54033,  7056,  3943,  3948, -4040, 60303, -4040,  4086,  3750, -4040,
   -4040,  1544, -4040, -4040,  3584, -4040, 55914, -4040,  2733, -4040,
    3523, -4040, -4040,  4016,  2735, -4040, -4040,   329,  3917, -4040,
   -4040, 60303, 60303, -4040, -4040, -4040, 35850, 11690, -4040, -4040,
   -4040, -4040, -4040,   917, -4040,  3783,  3505, 56541, 59676, -4040,
   -4040, -4040, 32086, -4040, -4040, -4040,  3957, -4040,  1544, -4040,
      25, 21355,  3665, 35850, -4040, -4040, -4040, -4040, -4040, -4040,
   45255,  2248, -4040, -4040, 26414, -4040, -4040, -4040, -4040, 24519,
    3508, -4040,   767, -4040, 26414, -4040, -4040, 15584, -4040, -4040
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4040, -4040, -4040, -4040, -4040,    98, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040,  1843, -4040, -4040, -4040, -4040, -4040,
    1549, -4040,   472, -2359,  -526,  3182, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040,   746,  1664,  3492,
   -4040,   465, -4040,    85, -4040, -4040, -4040, -2910,   -46,  -259,
   -4040, -4040,   259,    19,  3135,  -255, -3985, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040,   481,   482, -4040, -4040,
     282, -4040, -4040, -1133, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  -470,  -428,   353, -4040, -4040, -4040,  4142, -4040,
    3583, -4040, -1808,  2296, -4040, -4040, -4040, -4040, -4040,  2355,
   -1742, -4040, -4040, -4040,  1425, -4040, -4040, -4040,  -286,   308,
   -4040,   311, -4040,   312, -4040,   317, -4040,   318,   319,   321,
     323, -4040,   324, -4040, -4040,  -412, -4040, -4040, -4040, -4040,
     325, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  -277, -4040,
   -4040,   -86, -4040, -4040,  -274,   333, -4040,  -207,   334, -4040,
     335, -4040,  -104, -4040,  -102, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040,  3140, -4040, -4040,
   -4040, -2316, -4040, -4040, -2370,  2679, -4040, -1840, -4040, -4040,
   -1860, -4040, -4040, -1667,  1172, -4040, -4040,   816,   655, -4040,
   -1418, -1947, -1937, -4040, -4040, -4040, -2028, -2015,  -803,  2429,
   -1234, -2318, -4040, -4040, -4040, -4040,   144, -4040, -4040,   326,
    1652,  2166, -4040, -2495, -4040, -4040,   886, -4040, -4040,  1440,
    1870, -4040,  1026,  2874, -1291, -4040, -4040, -4040, -4040, -4040,
   -4040,   123,   298,    -5, -4040, -3015,   718, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -2837, -4040, -4040, -4040,  -316,
   -4040, -4040,  -210, -4040, -4040,  -268, -4040,   125, -2337, -4040,
   -4040, -4040, -4040,  2671, -1382, -4040,  3715, -4040,  -505,   550,
    1690, -2220, -1973, -4040,  -953,  -951, -2894, -4040, -4040, -4040,
   -1887,  1203,  1271, -4040,   827,  1688, -2418, -4040, -4040, -4040,
   -4040, -4040,  1272, -4040, -4040,   453, -4040,   447, -4040, -4040,
   -4040, -4040,  -270, -4040,    93, -3134, -4040, -4040, -4040, -2941,
    1160,   635, -4040, -4040, -4040, -1502, -2949,  -869, -4040,   263,
   -2557, -2465,   608, -4040, -4040,   414, -3896, -4040, -4040,  -601,
   -2113, -2425,   -80, -4040, -4040,   424, -2685,  1810, -4040, -4040,
   -4040, -3316, -3418, -4040,     4, -4040, -4040, -4040, -4040, -4039,
   -4040, -4040, -1548, -2713, -4040, -4040,  4282,  4283, -1559, -3051,
   -3957,  -105,  -103, -4040, -4040, -4040,  2145, -1490,    76,    55,
      61,  1655,  -947,   212,  -395, -2303, -4040,   289, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040,  1731,  -996, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -2298, -2855, -4040, -4040,  1322, -4040,
   -4040, -4040, -2326, -2043, -2038, -2394,  3297, -4040, -4040, -4040,
   -4040,  3254, -2244, -3678, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040,  2804,  1206, -4040, -4040,  1864, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,   488,  1940, -4040, -4040, -4040, -4040,  2242,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,   -16, -4040,
   -4040, -4040,   727,  2737, -4040, -4040, -4040,    -7, -4040, -4040,
   -4040, -4040,  2441, -4040, -4040, -4040, -4040,  2761, -4040, -4040,
   -4040, -4040, -4040, -4040,  1541, -4040,  1971, -4040, -1517, -4040,
   -4040,  1120, -1030,  1928,  -620,  2064,   440, -4040,  3707, -4040,
   -4040, -4040, -1735, -1510, -4040,  3404,  -825, -2575,  2433,  -581,
   -1891,  1171,   171,  1474,   336,  3890, -4040, -1179, -1153, -4040,
   -4040,  -674, -4040, -4040, -4040, -4040, -4040,  2169,  2174,  -636,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040,  1589, -4040, -4040, -4040, -4040, -1271, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040,  2073, -4040, -2098, -4040, -4040,  -468,
   -4040,  3176, -4040, -4040, -4040, -2314, -1974,  1892,  1088, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040,  1900, -4040, -1596, -4040,
   -2739, -4040, -4040, -4040, -4040, -4040,  2091, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -1586, -4040, -1558,   215, -4040,   392,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040,  -108,   956,  -106,
   -2568, -1131,  1729, -4040, -4040, -1328,  3228, -2309, -4040, -4040,
   -4040,  2084, -4040, -4040, -4040, -4040, -4040,   766, -2964,  2849,
   -4040, -4040, -3225,  -961, -2288,  -925, -4040, -1417,  1510,   572,
   -4040, -1837, -1139, -1689, -2784, -2926, -4040,  1397, -4040, -4040,
   -4040, -4040,  -221, -4040, -4040, -4040,   593,  1979, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  -577,  -928,
   -4040, -4040,  2231,  -493, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,  3033,  3005,  2038, -4040, -4040, -2598, -4040,
   -4040,  2006, -4040,   858,  -940,    75,  1168, -4040, -4040,  1170,
   -3214, -4040, -4040, -4040, -4040, -4040, -4040,  1121, -4040,    41,
    3787, -4040, -4040, -4040, -4040, -4040, -4040, -4040,  2788, -1096,
    3710, -4040, -4040, -4040, -4040, -4040, -4040,  2424, -4040, -4040,
   -4040, -4040, -4040, -4040,  2949,  3806,  -606, -1369, -4040,  -814,
    2420,  1964,  -889, -4040, -4040, -4040,  3808, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040,  2590,   799, -4040, -4040, -4040, -4040,  3026,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040,  1202,  -145, -4040,    34,  -177, -4040,   -51, -4040, -4040,
   -4040, -4040, -4040,  -246, -4040, -4040,  -248, -4040, -1024, -1425,
     565, -1301, -2533, -4040,  1196,  3014, -3378,  -702, -1191, -1199,
   -2786,    59, -4040, -4040,  3543,   138,   600,  -299,    -1, -3066,
    -499,  -630, -4040, -2766, -4040, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  2002, -4040, -4040, -4040,  1169, -4040,  3829, -4040,
    2680,  1174,  3838, -1399,  2509,  2021,  2020, -4040, -4040,  2025,
   -1955, -4040, -4040,   170, -4040,  2580, -4040, -4040, -4040, -4040,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040,
    3044,  3851,  3529, -4040,  3102, -4040, -4040, -4040, -4040, -4040,
     512, -4040,  1299, -2265, -1842, -4040, -4040,  2860,  1126, -4040,
    1685,  -206,  -488, -4040, -4040,   507, -4040, -4040,   295,  3858,
    3535, -4040, -4040, -4040, -4040, -4040, -2746,  -915, -4040, -3412,
   -2793, -1731, -4040, -4040, -2189, -3019, -4040, -4040, -1087, -4040,
   -4040, -4040, -4040, -2078, -4040, -4040, -4040,  -203,  3922,  3924,
   -4040, -4040,  -227, -4040,  -458, -4040, -4040, -4040, -4040, -4040,
   -4040, -4040,  3781, -4040, -4040, -4040, -4040,  3788, -4040, -4040,
   -4040, -4040, -4040,  3789, -4040, -4040, -4040, -4040, -4040,  1749,
   -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040, -4040
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2716
static const yytype_int16 yytable[] =
{
     500,   503,   504,   505,   506,   507,   508,  1096,  1006,   903,
     959,  1542,   530,  1002,  1439,  1442,   658,  1037,  1544,  1425,
     571,  1050,  1662,  2166,  1454,   570,  2419,  2420,  1843,   578,
     589,  2098,   529,   682,  2284,  1754,  2588,   597,  1625,   592,
    1504,  2589,   684,  1753,  1297,  1874,   604,  1977,  1706,   607,
    1729,  1474,  1186,  1944,   604,  1976,  2162,  2163,  1842,  2821,
    2095,   627,  2914,  1819,  2976,   841,   842,   843,  3338,   845,
     846,  2790,  1139,   848,  2696,   850,  1474,  1775,  3583,  2775,
     888,  3244,  3404,  1671,  1783,  1468,  2703,  3049,   829,   576,
    1883,  1012,  1525,  1549,  1019,  1550,  2751,  2404,  3280,  2330,
    1085,  1088,  2704,  3411,   647,  2888,  2578,  2932,  3339,  1110,
    1118,  1785,  1786,  1505,  1984,  1789,  1790,  1791,  1792,  2640,
    1794,  1795,  1797,  1799,  1800,  1801,  1802,  1803,  2844,  3619,
    2523,  3117,  2641,  2941,  1997,  3794,  3947,  2945,  3456,  2053,
    2524,  2832,  2000,  2001,  3300,  1281,  1357,  1573,  2960,   527,
    2884,  3889,  1878,  2893,  3419,  3316,  3906,  3515,  3064,  2066,
    2971,  3286,  2902,  3857,   646,  2031,  4547,  1248,  1249,  3473,
    3173,  3742,  1239,  1240,  1241,  1248,  1249,  1588,  1248,  1249,
     616,  2415,  1106,  2138,  1282,  3487,   535,  1248,  1249,  1506,
    1126,  3730,  1127,  1128,  1129,   584,  2673,  4228,  2924,  2925,
    2637,  2747,   679,  1352,  2928,   619,   588,  1248,  1249,  3815,
    2638,  4301,  2875,   596,  1248,  1249,  2980,  2185,  2320,  1300,
    3112,  3113,  3239,  2511,  3069,  3312,  3119,  1889,  3121,  2519,
     968,   950,  1112,  1120,  2182,  1248,  1249,  3302,  2291,  3266,
    1584,   895,  4347, -2059,  1089,  3463, -2663,  1248,  1249,  2592,
    3302,  1283,  2526,  1357,  2148,  1655,  1248,  1249,  3598,  3464,
    3768,  2049,  3674,  4417,  3062,  1519,  3046,  1248,  1249,  4219,
    1546,  3446,  1457,  3465,  3254,  1532,  2629,  1248,  1249, -2595,
    4220,  4235,  1389,  1013,   968,   950,  4498, -1578,  1248,  1249,
    1370,  1358,  3522,   700,  1546,  1248,  1249,  1589,  1925, -2447,
    -919,  1590,  3921,   907,  2654,  1929,   919,   605,  3055,  3056,
    4666,  3463,  1591,  1546,   585,   636,  3933,  1656,   668,  3082,
     694,  2990,   889,  2055,  -576,  3464,  1926,  4172,  4202,  3792,
    3850,  3855,  3070,  3389,  3856,  4353,  2083,  3588,  4408,  3465,
    1166, -1893,  2334,  -577,   606,  1472,  1657,  1296,  1248,  1249,
     968,   950,   701,  3866,  2840, -2663,  1248,  1249,  1303,  2837,
    3888,  2981,  3102,   581,  3104,   526,  1091,  2144,  3936,  1479,
    1248,  1249,  2049,  2855,  1514,  3278,  1025,  -482,  2187,  3303,
     522,  1248,  1249,  2917,  2500,  3020,  1816,  2252,  3206,  2649,
    1485,  3015,  1248,  1249,  2856,  3126,  4131,  2312,  1358,  2312,
     601,  4602,   968,   950,  1609,  2313,  3016,  3263,   601,   612,
     890,   613,  2650,  1605,  2032,  1658,  4132,  3968,  3768,   920,
    1225,  2292,  4603,  2188,  1285,  4425,   262,  2857,   264,  1167,
    3463,  4425,  1610,  3279,  1349,  1248,  1249,  2480,  2838,  1248,
    1249,  3091,  2841,  1592,  3464,  2335,  1092,  3021,  3446,  3769,
    4489,  2067,  3589,  2084,  2027,  1440,  1515,  4236,  3465,  1445,
    1450,  1384,  1248,  1249,   582,   523,  1125,  1670,  1499,   968,
    3851, -2526,  4046, -2447, -2527,  4048,  1471,  1533,  1014,  1930,
     891,  1186,   637,  1927,  1585,   702,  2863,  1605,  4203,  1124,
    3447,  1815,  1371,   921,  1659,  4221,  4298,   673,  2782,  2320,
    2918,  4499,  4667,  2024,  2991,  1939,  4587,  4588, -1893,   650,
    3255,   530,  3390,   530,   657,   663,  1248,  1249,  1520,  3047,
     887,  3300,  3300,  2551, -1578,  1606,  1607,  1608,  3252,  3253,
     896,   652,  1250,   654,  3604,  1251,  2267,  4347,  4025,  2437,
     657,  1593,   663,  1250,  3574,  3819,  1251,  4029,  3578,  1090,
    3612,  3613,  1250,  3770,   997,  1251, -2086,  1026,  1027,  1248,
    1249,  1423,  1284,   663,  3616,  1248,  1249,  3956,  3249,  3250,
    3251,  4045,  1250,  2523,   883,  1251,  4047,   908,   657,  1250,
     893,  1819,  1251,  2524, -2526,  1780,  1107, -2527,  1979, -1538,
    3988,  1982,  3595,   911,  1549,  1985,  1550,  1988,  3304, -2233,
    1250,  1226,  1227,  1251,  1843,  2578,  2640,  3769,  3392, -2258,
     960,  3298,  1250,  3459,  2029,  1251,  1570, -2375,  3811,  2641,
    1458,  1250,  1021,  2321,  1251,  2003,  2004,  1844, -1538,  2459,
    2293,  1788,  1250,  2053,  1842,  1251,  2593,  1248,  1249,  1817,
    2301,  1040,  1250,  3548,  2910,  1251,  2294,  1549,  1809,  1550,
     657,  2304,  1054,  1250,  2307,  3048,  1251,  3541,  2126,  2522,
    1250, -1578,  2876,  1251,   617,   530,  1612,  3447,  3174,   676,
     647,  4302,  1083,  4548,  1248,  1249,   647,   647,  2926,  1639,
    1640,  1097,  1054,  2845,  3071,  1070,   657,  2637,  2013,   620,
    1071,  3431,  1248,  1249,   669,  1999,  3101,  2638,  3674,  2183,
    2298,  4104,  1134,  1353,  1694,  4623,  3853,  1660,  1586,   586,
    3858,  4112,  1707,  1250,  1709,  3771,  1251,  1851,  2138,  3586,
     894,  1250,  3764,  1879,  1251,  1822,  1722,  1723,  1724,  2636,
    1080,  3772,  3473,  4255,  1728,  1250,  3267,   618,  1251,   851,
    3065, -2595,  3430,  4149,  1108,  2375,  1250,  1770,  2031,  1251,
    3551,  3827,   932,  1187,  2054,   676,  3731,  1250,   676,   901,
    1251,  3109,  1022,  1890,  2982,  1586,  3030,   914,  3057,  4281,
   -2595,  3035,  2199,  3460,  1661,  3305,  1248,  1249, -1578,  3043,
    3044,  2927,  1252,  3974,  1808,  3051, -2715,  3420,  1907,  3907,
    1252,  -919,  3455,  1252,  1833,  1023,  1248,  1249,  2143,  1876,
    1250,  2287,  1252,  1251,  1250,   687,  4340,  1251,  1760,  1761,
    3466,  1924,  1245,  1586,  1247,  -576,  1896,  2055,  2200,  2149,
     670,  4245,  1252,  3773,  3829,  1480,   849,  1250,  2150,  1252,
    1251,  1845,  2922,  3970,  -577,  3886,  3805,  3806,  2253,  1290,
     530,  1292,  1293,  1054,   530,   657,  1486,   530,   657,  2795,
    1252,  1983,  3461,  1335,   912,  2014,  2066,  1248,  1249,  2015,
    1291, -1578,  1252,  1350,  1295,  1760,  2218,  1299,  -482,  3109,
    3450,  1252,  1248,  1249,  1902,  3185,  3466,  2256,  2257, -2086,
    2892,  1250,  1252,  2907,  1251,  1888,  1362,  2173,  1695,  3772,
    4312,  1696,  1252,  1248,  1249,  1028,  4501,  2273,  2274,   647,
    1265,  2821,  2144,  1252,  2321,  3608,  3269,  2756,  2757,  3601,
    1252,   657,   647,  2643,  3225,  2901,   647,  3033,  3569,  2191,
    2056,  3117, -2233,  3828,  1250,  3142,  3143,  1251,  1457,  3092,
    1250, -2526, -2258,  1251, -2527,  1248,  1249,  1509,  2368,  1228,
   -2375,  1435,  4447,  3210,  3211,  3212,  1248,  1249,  1248,  1249,
    2033,  1500,   885,   657,  2386,  2588,  1959,   657,   657,  1373,
    2589,  3500, -2526,  1252,  3554, -2527,  2932,  1248,  1249,  3573,
    1366,  1252,  1392,  3577,   657,  4164,  1398,   526,  3159,  3160,
    2523,  1935,  3582,  3553,  2426,  1252,  2268,  4418,  3138,  4420,
    2524,  2960,  4206,  4207,  2959,  3466,  1252, -1538,  4412,  1435,
    3182,  3183,  1250,   528,  2441,  1251,  4096,  1252,  3599,  3600,
    2225,  3737,  2193,  4211,  1248,  1249,  3852,  3671,  4360,   647,
    3740,  1217,  3247,  1328,  1977,  2578,  1977,  1977,  2057,  1441,
    4367,  3490,  2455,  2640,  2880,  2881,  3611,  2330,  2066,  1250,
    2451,  1545,  1251,  4120,  1386, -2086,  2641,  1248,  1249,  3459,
    1252,  1248,  1249,  1936,  1252,  2035,  4389,  1250, -2663,  1855,
    1251,  1248,  1249,   647,  1160,  3462,  2196,  2485,  1474,  2049,
    2197,  2717,  3841,  3842,   647,  2369,  2675,  1252,  2644,  3117,
    4257,  2053,  3117,  3117,  1248,  1249,  2066,  2810, -2233,  3570,
    4466,  2885,  2386,  2198,  1268,  2453,   532,  3093, -2258,  3117,
     533,   531,  2522,  1474,  2156,   536, -2375,  3319,  2458,  3321,
    1218,  2461,  2462,  3867,  2637,  1221,  3332,  2755,  3404,  3887,
    3890,  3892,  3893,  1565,  2638,   647,  1614,  1615,  1616,  1621,
    3345,  1252,   676,  4083,   676,  4494,  1231,  3356,  3358,  3981,
    3075,  1250,   623,  2131,  1251,  1248,  1249,  2205,  2067,   509,
    3375,  3377,  3379,  1248,  1249,  4460,  3380,  3358,  1573,  4258,
    2284,  1250,  1248,  1249,  1251,   628,  3843, -2663,  1187,  3844,
    2306,  2760,  2761,  4212,  1252,  1248,  1249,  1549,  3982,  1550,
    1252,   572,  1187,  1248,  1249,  1613,  1816,  1248,  1249,  1619,
    2206,  2319,  3427,  1908,  1816,  2058,  2216,  1754,  2387,  3863,
    3864,  3865,  2430,  1844,  1222,  2868,  2059,  3868,  2754,  3460,
    2138,  3989,   526,  2060,   590,  3894,  2636,   629,  2764,  3700,
     594,  2806,  1250, -1871,  1283,  1251,  1248,  1249,  3701,  3157,
    2308,  1248,  1249,  1755,  4098,  2645,   621,  1250,  2361,  4178,
    1251,  2632,  3979,   624,  4391,   657,  2323,  3602,  2054,  1248,
    1249,  2049,  1252,  1285,  3318,  4392,  1501,  1937,  1250,  3076,
    4193,  1251,  2382,  2383,  1436,  2055,  3501,  2869,  2217,   511,
    1248,  1249,  1248,  1249,  1856,  2370,  1458,  3219,  1754,  1510,
    3348,  3349,   657,   639,  4411,   526,  2905,  1812,  3471,  1252,
    3818,   630,  4083,  4083,   640,  2006,  1248,  1249,  2374,  2049,
    1250,   647,  1367,  1251,  3232,  2221,  2326,  1252,  4413,  2061,
     886,  1250,  1139,  1250,  1251,  4121,  1251,  2452,  1248,  1249,
     642,  2299,  1436,  2233,  3836,  2324,  1248,  1249,  1187,   657,
    2067,  1697,  1250,  2143,  1698,  1251,  2387,   915,  1099, -1894,
    3284,  3285,  1248,  1249,  2642,  4213,   657,  3404,  3404,  1248,
    1249,  1248,  1249,  3094,  3734,  4234,  1248,  1249,  1860,   686,
    1863,  4286,   997,   647,  1804,  2870,  3702,  1248,  1249,  3830,
    4495,  4518,  4518,  2007,  2388,   647,  1248,  1249,  2067,  1250,
     847,  3924,  1251,   657,  1553,  1248,  1249,  1248,  1249,  3310,
    3310,  1252,   647,   647,  2144,  1277,  1278,  1279,  1280,  3294,
    2643,  1248,  1249,  4414,  2062,    51,  1043,  2240,  1909,  1511,
    1857,  1252,  1250,  3011,  4462,  1251,  1250,   657,  2132,  1251,
    1911,   648,  2425,  1398,  1816,  2412,  1250,  2244,  1919,  1251,
    1286,  1920,  4415,  3404,  1512,  1248,  1249,  4179,  1763,  1817,
     657,  3077,  1248,  1249,  2871,  4083,  4083,  1817,  2280,  1250,
    1940,   960,  1251,  1398,  1977,  2431,  1248,  1249,   676,  3990,
    1966,   530,   530,   530,   647,   530,   647,  4393,  4170,  4171,
    1776,  1978,  1252,  4688,  3341,  2413,  1065,  1980,   530,   735,
     657,  1960,  1961,  1962,   530,  1964,  3054,  1252,  2245,  4381,
    4382,  2472,   651,  3859,  4474,   916,  3860,  2861,  1981,  1294,
     653,  3462,  2174,  1867,  1987,   647, -1894,  2045,  1252,  2522,
    1250,  4173,  2388,  1251,  3288,  1248,  1249,  3009,  1250,   666,
    1967,  1251,   688,  2186,  1963,  1402,  1965,  1250,  4235,  1843,
    1251,  1248,  1249,  1248,  1249,  1284,  4464,  4180,   676,  4468,
    1250,   740,   631,  1251,  1857,  3078,  4152,  3983,  1250,  3342,
    1252,  1251,  1250,   657,  4083,  1251,  1886,  1248,  1249,  1842,
    1586,  1252,  3012,  1252,   632,  1998,  2246,  3010,   647,  4083,
    1248,  1249,    65,  2091,   647,  4453,  3103,  2247,  2190,  3293,
    1805,  2013,  1252,  3181,  4083,   647,  4100,  3901,  4287,  1357,
    4288,  1250,   997,  1628,  1251,  1956,  1250,   633,  2251,  1251,
    1887,  2219,  -673,  1806,   657,  1764,   530,   530,  3724,  2158,
     530,  2027,  1248,  1249,  1250,  2281,  1754,  1251,  2929,  3932,
    1066,  1134,  1986,  2172,  3235,  -218,  2154,  2155,  2085,  1252,
    2930,  1628,  2392,  1044,  2093,  1250,  1107,  1250,  1251,   753,
    1251,  3700,  4394,  2636,  2013,  2269,  2630,  1094,  1095,  3343,
    3701,  3008,  2646,  1777,  1248,  1249,   634,  2872,  2046,  4083,
    1045,  1250,  1252,  2759,  1251,  2559,  1252,  1248,  1249,  1609,
    2412,  4083,  4083,   262, -1578,   264,  1252,  1817,  3140,  1248,
    1249,  3158,  4151,  1250,  1248,  1249,  1251,   511,  1440,  4016,
    4574,  1250,  3141,  4481,  1251,   679,  2054,  1611,  2065,  1252,
    1440,  2795,  1628,  1968,  4236,  1248,  1249,  1250,  3061,   673,
    1251,  1187,  2226,  2562,  1250,  3152,  1250,  1251,   769,  1251,
     681,  1250,  1248,  1249,  1251,  1629,   683,  4482,  2700,  1057,
   -1578,  -673,  1250,  2705,  1358,  1251,   539,  2736,  1475,  4083,
    1071,  1250,   695,  3289,  1251,  1628,  2711,  1472,  2014,  4083,
    1250,   544,  1250,  1251,  3902,  1251,   844,  3310,  1248,  1249,
    1252,  2096, -1578,  1651, -1578,   935,  1250,  1807,  1252,  1251,
    2290,  1248,  1249,  2096,  1754,  2192,  1300,  1252,  2392,  2726,
   -1578,  1058,  3354,  2207,  2284,  2097, -1578,  4017,  3702,  2752,
    1252,  1476,  2208,  4083,  1108,  4083,   697,  2097,  1252,  3923,
    1250, -1578,  1252,  1251,  1628,  4083,  3162,  1250,  1912, -1578,
    1251,  2014,  2314,   647,  3163,  2015, -1578,  4401,  3750,  2774,
     657,  1250,   647,   657,  1251,  2143, -1578,  2643,  4083,  4018,
    4083,  2642,  4083,   698,  1714,   647, -2715,  2959, -1578,  4083,
    1335,  1252,   959, -1578,  2770,  1335,  1252,  2738,  2337,   699,
    4083,  3536, -1578,   839,  2343,  2343,  2215,  2343,  1248,  1249,
    3427,  2229,  1778,  4402,  1252,  4083,  4083,   657,  1248,  1249,
     647,  1059,  1944,  2315,   647,  1248,  1249,  1718,  1779,  2230,
    1250,  4083,  4083,  1251,   884,  1252,  4083,  1252,  1248,  1249,
    2296,   657,   657,   647,   647,  3537,  1250,   936,  1250,  1251,
    2234,  1251,  2238,  3966,  1187,  2394,  2395,  2343,  2343,  2343,
     854,  1252,  1425,  3272,  2342,  2342,  2998,  2342,  1379, -1578,
     657,  1380,  1250,  1248,  1249,  1251,  2239,  3987,  1248,  1249,
    2366,   797,   898,  1252,  1373,  1250,  1741,   960,  1251,  2392,
    1913,  1252, -1578,   904,   262,  3238,   264,  2393,  2243,  1474,
    -673,  3571, -1578,  1392,  2385, -1780,  2248,  1252,  2448,  1248,
    1249,  1248,  1249,  1487,  1252,  3292,  1252,  2342,  2342,  2342,
     676,  1252,  2260,   937,  3457,   906,  3738,  1250,   924,  2275,
    1251,  3106,  1252,  2219, -1578,  2662,  3130,  2425,  1440,  4403,
    3756,  1252,  1094,  1095,  1488,   916,  3275,  3136,   647,  3382,
    1252, -1780,  1252,  3492,  3493,  2468,  3137,  2167,   926,  2663,
    4145,  4146,  1038,  2469,  2467,  3144,  1252,  3148,  1265,  1250,
    1011,   647,  1251,   887,  3506,  1248,  1249,  3422,  2381,  1018,
    2470,  3149,  1250, -1578,  4147,  1251,  1047,  4457,  2066,  4458,
    3821,  3822,  2898,  1754,  1250,   542, -1871,  1251,  1489,  1250,
    1252,  1039,  1251,  1490,  2066,  1056, -1578,  1252,  2460,  2131,
    1064,  2762,  1071,  1248,  1249,  3150,  2394,  2395,  1381,  1655,
    1250,  1252,  3151,  1251,  2189,  1285,  2680,  1081,   935,  1248,
    1249,  2479,  1101,  1060,  1100,   647,  3153,  1250,  1248,  1249,
    1251,  1754,  2444,  1248,  1249,  2131,  3129,  1248,  1249,  2905,
    2929,   509, -1578,  1084,  1248,  1249,  2396,  2486,  2487,  1105,
   -1780,  2194,  2195,  4117,  4118,  4119,  1136,  2887,  1137,  2105,
    2106,  1138,  2049,  1250,  2498,   532,  1251,  -673,  1844,   533,
    1252,  1656,  2212,  1285,  3845,  2119,  1250,  3848,  3849,  1251,
    2469,  2516,  2517,  1285,   657,  3156,  1252,  1140,  1252,  1061,
     657,  1062,  2647,  1676,  3861,   530, -1780,  2470, -1578,  1141,
    1657,  3161,  2674,  2669,  2220,  1285,  2672,  2222,  1285,  2471,
   -1578, -1578,  1252,  1142,  2489,  2652,   595,  3366,  4235,  3367,
    2223,  1712,  3231,  2496,  2497,  1252,   657,  2308,  3607,  1265,
   -1578, -1871, -1578,  2632,  2501,  2502,  2503,  2504,   657,  2512,
    2513,  1288,  1491,  1300,  1300,  1300,  2624,  2625,  2626,  2627,
     936,  1339,  1268,  2956,  1145,  2049, -1578, -1578,  1518,  1146,
   -1578, -1578,  3368,  1250,  1523,  1524,  1251,  1252,  4513,  1658,
    1562,  1563,  1147,  1250,  1148,  4263,  1251,  2899,  2235,  1285,
    1250,  1198,  3164,  1251,  3369,  1149,  4597,  1816,  2236,  1285,
    2472,  2049,  1028,  1250,  1680,  2096,  1251,  2505,  2642,  2740,
    3355,  2468,  1216,  2121,  2122,   938,   939,  2049,   941,  1252,
     943,  2237,  1285,  1603,  1588,  1232,  1233,  1492,  3683,  2097,
    3370,  1289,  1252,  1655,  3166,   944,   937,   657,  1250,  3180,
    1150,  1251,  1340,  1250,  1252,  3543,  1251,  1977,  1341,  1252,
    1357,  2241,  1285,  1248,  1249,  3931,  2474,  1265,  1659,  3168,
    2514,  2515,  2771,  3567,  3170,  2744,  1285,   657,  2684,  2506,
    1252,  3603,   997,   262,  1250,   264,  1250,  1251,  1151,  1251,
    2067,  2780,  2781,  1152,  2132,  3171,  1153,  1252,  1154,   657,
    1816,  1493,  1342,  1754,  2685,  1656,  2067,  1155,  2507,  1474,
    3330,  3235,  3172,  1156,  4236,  3617,  1157,  1681,  3103,  1343,
    1158,  1684,  1270,  1271,  2473,  1161,  3621,  1163,  1685,  3623,
    2132,  1164,  2804,  1252,  1657,  1165,  1816,  1168,  2804,  1032,
    1033,  1169,  1034,  1268,  1035, -1578,  1252,   509,  3511,  1170,
    1250,  1171,  1816,  1251,  1589,  2826,  2469,  1172,  1590,  2829,
    2686,  3512,  1173,  2687,  1304,   657,  3125,  2195,  4524,  1591,
    2133,  2688,  4523,  2470,  1174,   997,  2957,  2508,  2849,  1754,
    2851,  2105,  2106,  2284,  1336,  2471,  3301,  3354,  1250,  2689,
    1175,  1251,  2958,  2474,  3313,  4160,  4161,  2119,  1338,  3128,
    1285, -1578,   960,  1658,  1250,  1358,  1176,  1251,  1978,  1686,
    1978,  1978,  3320,  1250,  3154,  1285,  1251,  1494,  1250,  3241,
    3242,  1251,  1250,  2774,  3334,  1251,  3336,  3337,  1177,  1250,
    1180,  3747,  1251,  1252,  1852, -1578,  1755,  1853,  3350,  1181,
    1854,  1182,  3371,  1252,  1188,   657,   657,  1347,  3513,   510,
    1252, -1578,  3245,  3246,  1495,  1189,  2509, -1578,  3749,  1190,
    1817,  1268,  1191,  1252,  1688,  3755,  2472,   511,   997,  1273,
    1274,  1275,  1276,  1277,  1278,  1279,  1280,  1344,  3757,  4448,
   -1578,  1660,  1659,  4004,   968,   950,  3372, -1578,  1192,  4262,
    2690,  2499,  1193,  1270,  1271,  3517,  1285, -1578,  1252,  1194,
    1592,  1195,  2131,  1252,   997,  3539,  3540, -2706,  1196, -1578,
    1461,  3282,  1346,  3758, -1578,  3688,  3689,  2848,  3759,  1199,
     997,  2134,  1200, -1578,  1201,  2121,  2122,  1202,  3108,  1203,
    2992,  4004,  3696,  3697,  1252,   512,  1252,  2505,   938,   939,
     940,   941,   942,   943,  1204,  3007,  1205,   709,  4306,  3760,
    1363,  3992,  1206,  1817,  3727,  3735,  1355,  1265,   944,  3028,
    1655,  2940,  3751,  1285,  2943,  2944,  1207,  2946,  1462,  1208,
    2949,  2950,  3765,  1285,  2953,  2929,  4248,  4252,  1300,  2962,
    2473,  1209, -1871,  1210,  2966,  2967,  2968,  2969,  2970,  1817,
   -1578,  4509,  2974,  2975,  2691,  2977,  1463,  1211,  1593,  2506,
    1252,  2986,  2987,  2988,  2989,  1817,  1689,  2993,  2994,  1212,
    2996,  1270,  1271, -1578,   647,  3007,  3780,  3781,  1365,   513,
    1213,  1691,  1656, -1578,   647,   647,   647,  1214,  2507,   959,
    3998,  3910,  2515,  2662,  1356,  3499,  2518,   735,  1252,  1215,
    1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  1219,  2474,
    1220,  1657,  1369,  4113,  1252, -1578,  1223,  2663,  2049,  1224,
    2919,  4088,  4089,  1252,  4102,  4103,  2468,  3060,  1252,  2510,
    4106,  4103,  1252,  -673,  3080,  3518,  4107,  4103,  1230,  1252,
    4629,  4129,  4130,  1234,  3097,  3098,  3099,  1235,  2956,  2929,
    1236,  2505,   739,  1377,  3357,  1660,  1237,  2508,  1238,   740,
    1287,  2930,  3031,  3032, -1578,  3034,  1387,  3036,  3037,  3038,
    3039,  3040,  3041,  3042,  4159,  3246,  3045,  4248,  3562,  3050,
    1658,  4252,  3053,  3869,  4167,  4103,  1399, -1578,   744,   745,
    2096,  4176,  4177,  3928,  3929,  2036,  1401,  2692,  1335,  1418,
    2337,  4292,  3540,  1362,   657,   657,   657,  4293,  4103,  2037,
     514,  1268,   647,  2506,  2097,  1264,  1419,  4689,  1273,  1274,
    1275,  1276,  1277,  1278,  1279,  1280,  2806,  4294,  4103,  3870,
    1420,   657,  1426, -1578,  1755,  1423,  2509,  2132,  1431,  3871,
    4296,  4103,  2507,  1816,  4297,  4103,  4303,  4304,  1432,  1187,
    1451,  1440,   657,   657,   657,  4305,  4304,   753,  1455,  1659,
    3610,  2469,  -673,  4344,  4345,  3262,  2693,   539,  1456,  1265,
    4163,  1464,  3218,  2529,  3707,  2530,  4399,  3246,  2470,  2505,
     515,  1460,  3374,  3732,  4400,  3246,  1472,  3872,  1481, -1578,
    2471,  1482,  2505,  3995,  1483,  2694,  4472,  4473,  1978,  4492,
    3540,  1484, -1578,  1503,  2096,  4526,  4527,  -821,  -821,  1507,
    2532,  2508,  1508,  2133, -2706,  4586,  3424,  4632,  4633,  -821,
     764, -1578,  1513, -1578,  4678,  4679,  1521,  1265,  2097,  2535,
    1522,  4033,  3596,  3597,  1265,   768,   769,  2536,  1527,  4248,
    4252,  2506,  1528,   516,  1655,  1754,  1530, -1578, -1578,  3007,
    1535, -1578, -1578,  4261,  2506,  3317,  3940,  3941,  1540,  3315,
    3007,  3327,  1546,  2538,  2036,  4044,  3326,  2958,  1744,  1745,
    2507,  2472,  1552,  2242,  2038,  3557,  3558,  1546,  2037,  1554,
    2539,   657,  3326,  2507,   262,  3351,   264,  3347,  1440,  1556,
    2509,  3362,  1755,  2505,  3803,  1559,  3376,  3364,  3365,  4023,
    4024,  1560,   647,  1564,  3261,   709,  1656,  1465,  4264,  2544,
   -2706,   997,  4027,  1568,  3326,   557,  -838,  1569,  4185,  4030,
    4346,  3007,  3388,  1574,  4185,  3524,  3525,  3406,  1575,  1466,
    1576,  1266,  1597,   530,  1598,  3399,  1599,  3416,  2468,  2508,
    1602,  2505,  3326,  1604,  3378,  4049,  4050,  3331,  1605,  2510,
    2039,  1624,  2508,  3412,  1267,  2506,  3778,  3779,  1622,  1283,
    3340,  1628,  3363,  1268,  2134,  2931,  4165,  4166,  4307,  4168,
    4169,  1467,  1660,   558,   262,  2040,   264,  1635,  3429,  1654,
    3799,  -673,  2548,  1665,  2507,  2473,  1248,  1249,  3998,  1700,
    2549,  1711,  1712,  3440,  1265,   735,  1817,  1735,  1752,  4335,
     647,   559,  1713,  2506,  3400,  2550,  1762,  3328,  3329,  3949,
    1275,  1276,  1277,  1278,  1279,  1280,  1094,  1095,  2509,  3454,
    1771,  1268,  3874,  1787,  1793,  1814,   789,  2628,  1268,  3875,
    3999,  2509,  2507,  4000,  1813,  3361,  1820,   560,  2041,  1821,
    1824,  1094,  1095,  2038,   795,  1827,  1828,  1829,  1830,   797,
     739,  1831,   798,  2508,  2474,  1832,  4383,   740,  1834,  1835,
    3442,  1846,  1847,  2552,  1848,  1265,  3405,  1849,  1872,  3876,
    1875,  1892,  1884,  2469,  1893,  2345,   542,  2346,  1894,  1895,
    1899,  2553,  1904,  3401,  1906,   561,   744,   745,  1905,  1754,
    2470,  1672,  1673,  1674,  1675,  1676,  3516,  4261,  3145,  1915,
    1921,  2508,  2471,  2510,  2849,  1945,  1425,  1953,  4001,  4002,
    1954,  1958,  1989,  1270,  1271,  3950,  3951,  3971,  1269,  2039,
    3952,  3953,  1990,  3959,  3432,  1991,  1992,  2407,  2408,  2409,
    1994,  2042,  2509,  1632,  1633,  1634,  2557,  1995,  2558,  3877,
    2011,  1094,  1095,  2804,  2040,  1996,  2560,  2025,  2034,  2080,
    1652,  2086,  2100,  1440,  2087,   753,  2101,  -680,  -673,  2127,
    2146,  2826,  3550,  2145,  3869,  3552,  2164,   657,  2153,  2170,
    2203,  1270,  1271,  2176,  2178,   600,   657,  2179,  1270,  1271,
    2509,  1715,  2771,  2472,  1719,  2180,  2202,  1272,  1268,   960,
     960,  2204,  2209,  1677,  1678,  1679,  1680,  2210,  2211,  2213,
    4419,  2224,  4085,  2228,  1737,  1738,  3807,  2041,  1742,  1755,
    3870,   -74,  4505,  2219,  3591,  2566,   562,  2232,   764,  2249,
    3871,  3562,  4359,  2250,  2289,  2255,  3007,  3007,  1756,  1757,
    2258,  2510,  4531,   768,   769,  2259,  3326,  2270,  2271,  3007,
   -1265,  4369,  2272,  2848,  2510,  2295,  3878,  2285,  1280,   657,
   -1402,  2305,  1166,  3326,  2325,  3007,  3007,  1217,  1221,  1268,
    1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  3872,  3007,
    3326,  2567,  2568,  2569,  2340,  2358,  2367,  3475,  2570,  4144,
    1586,  3326,  2373,  2376,  3326,  2379,   563,  2400,  2401,  2405,
    2406,  2425,  2427,  2428,  2571,  2429,  3402,  2473,  2572,  1681,
    2042,  1682,  1683,  1684,  2445,  2432,  2449,  2421,  3626,  2433,
    1685,   647,  2447,  2434,  2435,  2450,  3682,  2573,  1273,  1274,
    1275,  1276,  1277,  1278,  1279,  1280,  1274,  1275,  1276,  1277,
    1278,  1279,  1280,  3476,  3568,  2575,  3477,  2454,  1270,  1271,
    3873,  2436,  4531,  3028,  3478,  2510,  4596,  2463,  4598,   564,
    2464,  1250,  2477,  2478,  1251,   565,  2481,  2482,  2484,  2488,
    2490,  2491,  3479,  2495,  3007,   262,  2474,   264,  2492,  2493,
    2494,  3627,  4536,  4537,   566,  4539,  2594,  2598,  2600,  2602,
    2631,  4616,  1754,  2603,  2604,  2605,   657,  2606,  2607,  3609,
    4673,  1686,  1440,  2510,  3090,  1754,  2608,  -838,  3615,   567,
    1754,  2609,  2610,  4682,  2611,  1754,  3480,  2612,  4673,  1270,
    1271,  2613,  2614,  4682,  2615,  2616,   568,  2617,  4647,  4648,
    2618,  4133,  2619,  2620,   789,  2621,  2622,   538,  3999,  4134,
    2623,  4000,  2653,  2665,  4582,  2666,  4583,  4584,  2667,  2670,
    2678,  2674,   795,  2683,  2706,  1687,  1688,   797,  2707,  2708,
     798,  2718,  2313,  2719,  2731,  4135,  4144,  3788,  2750,  2758,
    2778,  1755,  2767,  3481,  2768,  2779,  2793,  2785,  2783,  2786,
    2787,  2798,  3685,  4349,  2784,  2796,  2799,  2800,   657,  2807,
    2808,  1879,  2529,  2812,  2530,  1273,  1274,  1275,  1276,  1277,
    1278,  1279,  1280,  2830,  2831,  2833,  2834,  1094,  1095,  3712,
    2816, -1871,  2835,  3874,  2412,  1929,  4001,  4002,  2853,  2413,
    3875,  2854,   539,  1930,  2864,  2879,  -821,  -821,  2882,  2532,
    2894,  2895,  2896,  4644,  2911,  3326,  2915,  2916,  -821,  3007,
     903,  2929,  2942,  4659,  2952,  2947,  2948,  1755,  2535,  2951,
    2954,  3326,  2955,   647,  2961,  2963,  2536,  2964,  2965,  -869,
    3876,  2972,  2973,  2978,  2979,  3190,  2984,  2985,  1275,  1276,
    1277,  1278,  1279,  1280,  3482,  3191,  2995,  3483,  4351,  3058,
    3014,  3018,  2538,  3023,  4136,  3029,  3059,  2347,  3063,  3067,
    3192,  3068,  2559,  2171,  3109,  3114,  1546,  3100,  1689,  2539,
     855,   856,  3193,  3194,  3195,  3120,  3122,   540,  3177,  3123,
    2348,  1252,  1690,  1691,  3124,  3131,  1255,  1256,  3900,  1403,
    3196,  3905,  3132,  2349,  3175,  3188,  3208,  3179,  2544,  1404,
    3877,  3184,  2175,  3187,  3213,  2350,  3215,  3220,  3224,  3440,
     856,  3223,  1379,  3230,  1405,  3227,  3237,  3240,  3927,  3927,
    3927,  1978,  1257,  3243,  3248,  3484,  1406,  1407,  1408,  3259,
    3260,   657,  3264,  3265,  1258,  4137,  3268,  3276,  3277,  3283,
    3287,  3290,  4685,  3397,  1409,  3333,  3335,  3407,  3414,  3410,
    3413,  3418,  3423,  4138,  3424,  2351,  3428,  2352,  3441,  3435,
    3443,   857,  3444,   262,  3436,   264,  2027,  3445,  3472,  3971,
    3491,  2548,  3494,  3495,  1259,  3502,  4139,  4384,  3503,  2549,
    3520,  3530,  3521,  3532,  2353,  3963,  1260,  2227,  3535,  2392,
    3555,  2231,   858,  3563,  2550,  3542,  3575,  3576,  3587,   657,
     857,  3593,  3592,  3594,  3614,  3606,   859,  3878,  2655,  2829,
    3618,  3625,  3624,  1261,  2254,  2592,  3686,  3684,  3694,  3927,
    3693,  3708,  3709,  3717,  3007,  3710,  4008,  3713,  3699,   860,
     647,   858,  3719,   861,  3720,  3721,  3722,  3911,  4013,  3725,
    3726,  3729,  3727,  3728,   862,   859,  3733,  3739,  4349,  2354,
    3741,  3736,  2552,  3743,  3744,  3745,  3748,  3752,  3753,  3485,
    3766,  3754,  3783,  3795,  3776,  3796,   863,  3784,   860,   657,
    2553,  3767,   861,  3786,  3781,  1262,  3793,  3263,   541,  3801,
    3800, -1488, -1493,   862,  3810,  3823,  3824,  3846,  3486,  2774,
    4006,  3820,  3839,   864,  3912,  4051,  3831,   965,  3896,  3913,
     865,   542,  3889,  3934,  2355,   863,  3735,  3197,  3938,   966,
    3942,  3939,  3957,  4093,   647,  3944,  3945,  3946,  3958,  3964,
     907,   967,  4011,  3976,  3198,  2557,  4144,  2558,  4014,  4036,
    3978,  3993,   864,  3994,  3996,  2560,  3997,  4022,  4038,   865,
     866,   543,  4028,  4039,  -582,   968,   950,   544,  4037,  4040,
     997,  3886,  4042,   969,  4578,  4043,  4052,   647,   970,  4097,
    4026,  1410,  4656,  4108,  4109,  4114,  4140,  4116,  4124,  4086,
     657,  4105,  4533,  4127,  4094,  4189,  4175,  4181,  1411,   866,
    4197,  4110,  4215,   545,   971,  -358,   972,  4190,   973,  4656,
    4229,   546,  3927,  3927,  4244,  3927,  3927,  4111,  4218,   974,
    4156,  4254,  4158,  4187,  2566,  4217,  4256,  4191,  4268,  4032,
    4233,  4271,  4272,  4280,  4277,  4282,  4284,  4125,  4299,  4289,
      21,    22,  4312,  -376,  4315,  4341,  4342,  4343,  4361,  4362,
    4368,  4371,  4578,  4385,  4432,  4397,  4373,  3392,  3199,  1306,
    4428,  4421,  4422,  4195,  4429,  4442, -1871,   975,  4433,  4432,
    4439,  4440,   976,  3200,  4201,   977,  4445,  4462,  4476,  4208,
    2567,  2568,  2569,  4477,  4443,  4478,  4479,  2570,  4485,  4486,
    4487,  4488,  1307,   867,  4493,  1306,  4496,   868,  4497,  4501,
    4506,  4510,   978,  2571,   979,  4508,  4511,  2572,  4222,  4226,
    4520, -2427,   980,   869,   981,  4514,  2551,  2526,  4535,   837,
    4538,   870,  3927,  4540,  4687,  4541,  2573,  1412,  1307,   871,
    4545,  4546,   867,  3201,  4556,  4569, -1662,  4570,  4572,   982,
     983,   984,  4575,  1755,  2575,  4590,  4585,  4593,  4594,  3963,
    4599,  3202,   869,  4604,  4607,  4610,   872,  4615,  4619,  4621,
     870,  1308,   985,  4595,  4627,  4600,  4612,  4624,   871,   873,
     874,  4613,  4625,  4631,  4635,  2829,  4637,  2829,  4645,  4660,
    4661,  4674,  4665,  4210,   986,  4684,  1309,  1413,  2776,  3909,
    1310,  4677,  3052,  3916,  3698,   872,  4300,  1308,  1502,  2923,
    4230,  2656,  4194,  1117,  4352,  1414,  4521,  3914,   873,   874,
    1558,  4522,  3918,  4676,   987,  4092,  4639,   615,  1010,   875,
    2403,  2333,  1309,  4316,  3204,  1311,  1310,  4063,  4269,  4270,
    4064,  4066,  4273,  4274,  4275,  4276,  4067,  4069,  4070,  4432,
    4071,  4649,  4072,  4073,  4074,  4553,  1312,  4426,  4554,  4568,
     876,  4519,  4077,  4078,  4079,  4438,  4437,  2999,   875,  1601,
    1313,  1311,  2078,  4232,  2316,  2576,  3620,  3226,  4099,  2811,
    3534,   837,   877,  4266,   878,  1882,   837,  4126,  3789,  4609,
    4372,   988,  1312,  4534,  4577,  3922,   696,  4279,  2997,   876,
    3433,  2130,  3716,  3387,  3004,   657,  1313,  3394,  4005,  4007,
    4591,  4390,  3854,  4183,  4309,  4606,  3488,   989,  1314,  3895,
    4461,   877,   837,   878,  4031,  4041,  2913,  4406,   990,   991,
     553,   554,   992,   993,  4490,  2664,  4366,  4491,  4364,   837,
    4432,  4356,  4432,  1315,  4358,  4243,  3001,  4186,  3096,  4626,
    3386,  1526,  1566,   994,  1314,  4010,  2012,  2886,  2597,  4441,
    4432,  2813,  3826,  2128,  3217,  2384,  2092,  2794,  2836,  3531,
    2529,  4084,  2530,  1036,  4226,  2749,  4379,  4380,  2411,  1315,
    1430,   837,   837,   837,   837,  4388,  3519,  3186,  4455,  1710,
    4308,  4432,  4432,   837,  2699,  2697,  4664,  1755,   995,  3572,
    2906,  2748,  2900,  4355,  -821,  -821,  4291,  2532,  4162,  4543,
    3695,   996,  4544,  3980,  3834,  1653,  -821,   657,  2028,  3273,
    2765,  3381,  4630,  3973,  2843,  2668,  2535,  1866,  2792,  1897,
    3791,  2819,   928,   856,  2536,  3546,  3545,  4377,  4378,  4459,
    2169,  3581, -2466,  1024,  1135,  2457,   997,  1316,  2456,  1970,
    1005,  2883,  1008,  3838,  3533,  2327,  1317,  1903,  4608,  4480,
    2538,  4628,  4542,  4683,   998,   999,  4686,  4035,  3549,  3565,
     962,  1318,  2862,  1918,  1546,  3566,   837,  2539,  2288,   963,
    2439,  2852,  2859,  1316,  2860,  2372,   931,  1417,  1859,  1319,
    4115,  4123,  1317,  1910,   933,  2152,  3205,     0,  1422,   690,
     657,   691,  1121,     0,     0,     0,  2544,  1318,     0,  1122,
    1123,     0,     0,  1000,     0,     0,  3028,  3028,     0,     0,
       0,     0,     0,   857, -2466,  1319,     0,  4454,     0,     0,
    1320,     0,  1001,  1321,     0,     0,  4558,     0,     0,     0,
       0,     0,     0,  4566,     0,     0,     0,  4469,  4470,     0,
       0,     0,     0,     0,   858,     0,     0,     0,     0,     0,
       0,  1322,     0,     0,     0,     0,  1320,     0,   859,  1321,
       0,   262,     0,   264,     0,     0,     0,     0,     0,  2548,
     532,     0,     0,  1323,   533,     0,     0,  2549,     0,     0,
       0,   860,     0,     0,     0,   861,     0,  1322,     0,     0,
       0,     0,  2550,     0,     0,     0,   862,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1323,
       0,     0,     0,     0,  4617,     0,     0,     0,   863,  4622,
       0,     0,  1324,  1143,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   837,   864,     0,     0,     0,     0,
    2552,     0,   865,     0,     0,  4657,     0,     0,  1324,  1179,
       0,     0,     0,     0,     0,     0,     0,     0,  2553,     0,
       0,     0,     0,     0,     0,     0,  1197,     0,     0,     0,
    1755,     0,  4657,     0,     0,     0,     0,     0,     0,   657,
       0,     0,   866,  1755,     0,     0,     0,     0,  1755,   837,
     837,     0,     0,  1755,     0,  4589,     0,     0,   837,   837,
     837,   837,   837,   837,   837,   837,   837,   837,   837,   837,
       0,  1242,     0,  2557,     0,  2558,     0,   837,   837,     0,
     837,   837,     0,  2560,     0,   837,     0,     0,   837,   837,
     837,   837,     0,   837,   837,   837,     0,     0,     0,     0,
       0,     0,   837,   837,     0,   837,   837,   837,   837,   837,
       0,     0,   837,   837,   837,   837,   837,   837,   837,   837,
     837,   837,     0,   837,     0,     0,   837,   837,     0,     0,
       0,   837,     0,     0,     0,   837,   837,   837,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     837,   837,  2566,     0,     0,     0,     0,     0,   837,     0,
       0,     0,     0,  1378,     0,   837,   837,   837,     0,   837,
       0,     0,     0,     0,     0,   867,   837,   837,   837,   929,
     837,   837,   837,   837,   837,     0,   837,   837,   837,   837,
     837,   837,   837,   837,     0,   869,     0,   837,   837,     0,
       0,     0,     0,   870,     0,     0,     0,     0,  2567,  2568,
    2569,   871,     0,     0,     0,  2570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2529,  2571,  2530,     0,     0,  2572,     0,     0,   872,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   873,   874,     0,  2573,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2532,     0,     0,
       0,     0,  2575,     0,     0,     0,     0,     0,     0,     0,
       0,   837,     0,     0,     0,     0,  2535,     0,     0,     0,
       0,     0,     0,     0,  2536,     0,  1672,  1673,  1674,  1675,
    1676,   875,     0,     0,     0,     0,     0,     0,     0,     0,
    2102,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2538,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   876,     0,  1546,     0,     0,  2539,     0,     0,
       0,  1582,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   837,     0,   877,     0,   878,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2544,   837,     0,     0,
    2103,   837,  2104,  2105,  2106,  2107,  2108,     0,  2109,  2110,
    2111,  2112,  2113,  2114,  2115,  2116,  2117,     0,  2118,  2119,
    2120,     0,     0,     0,     0,     0,  1626,  1627,  1677,  1678,
    1679,  1680,     0,     0,     0,  1637,  1638,     0,     0,  1641,
    1642,  1643,  1644,  1647,  1648,  1649,  1650,     0,     0,     0,
       0,     0,     0,     0,  1666,  1667,   837,  1668,  1669,     0,
       0,   262,     0,   264,     0,  1702,  1703,  1704,  1705,  2548,
       0,  1708,     0,     0,     0,     0,     0,  2549,     0,  1716,
    1717,     0,  1720,  1721,     0,     0,     0,     0,     0,  1725,
    1726,  1727,  2550,     0,  1730,  1731,  1732,  1733,  1734,     0,
    1736,     0,     0,  1739,  1740,     0,     0,     0,  1743,     0,
       0,     0,  1746,  1750,  1751,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1758,  1759,     0,
       0,     0,     0,     0,  1681,  1767,  1682,  1683,  1684,     0,
       0,     0,  1772,  1773,  1774,  1685,     0,  2121,  2122,     0,
    2552,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2553,     0,
       0,     0,     0,     0,     0,  1810,     0,     0,   837,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2557,     0,  2558,  1686,     0,     0,     0,
       0,     0,     0,  2560,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1869,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1687,  1688,     0,     0,     0,     0,     0,     0,     0,     0,
     837,   837,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2566,     0,   837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1917,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1923,
     837,     0,     0,     0,     0,     0,   837,     0,     0,   837,
       0,   837,     0,     0,  1951,     0,     0,   837,  1957,   837,
     837,     0,     0,     0,     0,     0,     0,     0,  2567,  2568,
    2569,     0,     0,     0,     0,  2570,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2571,     0,     0,     0,  2572,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2002,  2573,     0,     0,     0,     1,     2,
       0,     3,     0,     4,     0,     5,     6,     7,     0,     0,
       0,     0,  2575,  1689,     0,     0,     0,     0,     8,     0,
       9,     0,   837,     0,     0,     0,     0,  1690,  1691,     0,
       0,     0,     0,     0,     0,     0,     0,    10,     0,     0,
       0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    12,    13,     0,     0,     0,
       0,     0,     0,    14,     0,     0,     0,     0,    15,    16,
       0,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,   837,     0,     0,     0,     0,     0,     0,     0,    17,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    18,     0,
       0,     0,     0,     0,     0,  2181,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,     0,     0,    20,
      21,    22,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    28,  2591,    29,     0,     0,     0,     0,    30,     0,
       0,     0,    31,     0,     0,     0,     0,  2262,  2264,  2266,
       0,     0,     0,     0,   837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    32,     0,    33,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,  2297,     0,     0,
       0,     0,     0,     0,     0,     0,  2302,     0,  2303,     0,
       0,     0,     0,    35,     0,     0,     0,    36,     0,     0,
       0,     0,  2591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   837,     0,     0,     0,
     837,     0,     0,     0,     0,   837,   837,     0,     0,     0,
       0,     0,     0,     0,   837,     0,   837,     0,   837,   837,
     837,   837,     0,     0,   837,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   837,     0,   837,   837,     0,   837,
     837,   837,   837,     0,   837,     0,     0,   837,     0,     0,
       0,     0,     0,     0,     0,     0,   837,     0,     0,  2380,
       0,     0,     0,   837,     0,   837,     0,   837,   837,   837,
     837,     0,    37,     0,   837,   837,   837,     0,     0,     0,
     837,   837,   837,     0,   837,     0,   837,     0,   837,    38,
     837,    39,   837,     0,     0,     0,     0,   837,     0,     0,
       0,     0,     0,     0,    40,     0,     0,     0,     0,  2438,
       0,     0,   837,     0,     0,    41,     0,     0,     0,   837,
       0,     0,   837,     0,     0,     0,     0,     0,   837,     0,
       0,   837,     0,     0,     0,   837,     0,    42,     0,     0,
      43,     0,    44,     0,     0,    45,     0,     0,    46,    47,
       0,     0,     0,     0,     0,     0,     0,    48,     0,    49,
       0,     0,     0,     0,     0,     0,     0,    50,     0,     0,
       0,     0,     0,    51,     0,     0,     0,     0,     0,     0,
       0,    52,     0,     0,     0,     0,    53,    54,    55,     0,
       0,     0,     0,     0,     0,     0,     0,   837,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    56,     0,
       0,     0,     0,     0,     0,    57,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   837,     0,     0,     0,     0,     0,
      58,  2601,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    59,     0,     0,     0,    60,     0,     0,    61,
       0,     0,     0,     0,     0,    62,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    63,     0,     0,     0,     0,     0,
      64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      65,     0,     0,  2677,     0,     0,     0,  2679,     0,     0,
       0,     0,  2681,  2682,     0,     0,     0,     0,     0,     0,
       0,  1644,     0,  2698,     0,  1644,     0,  2701,  2702,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2709,     0,  2710,     0,     0,  2712,  2713,  2714,  2715,
       0,  2716,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2591,     0,  2720,     0,     0,     0,     0,     0,     0,
    2721,     0,  2722,     0,  2723,  2724,  2725,     0,     0,     0,
       0,  2728,  2729,  2730,     0,     0,     0,  2732,  2733,  2734,
       0,  2735,     0,  2737,     0,  2739,     0,  2741,     0,  2742,
       0,     0,     0,     0,  2743,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2753,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2763,     0,     0,  2766,     0,
       0,     0,     0,     0,  2591,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   837,
       0,     0,     0,   837,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     837,   837,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     2,     0,     3,     0,     4,
     837,     5,     6,     7,     0,     0,     0,     0,     0,   837,
       0,   837,     0,   837,     8,     0,     9,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     837,     0,     0,     0,     0,   837,     0,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    12,    13,     0,     0,     0,     0,     0,     0,    14,
       0,  1951,   837,     0,    15,    16,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    17,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    19,     0,     0,
       0,     0,     0,     0,   837,    20,    21,    22,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    23,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    26,     0,     0,     0,
       0,     0,     0,     0,     0,   837,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    28,     0,    29,
       0,     0,     0,     0,    30,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    32,     0,    33,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2591,     0,     0,     0,     0,     0,     0,     0,    35,
       0,     0,     0,    36,   837,   837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3105,     0,     0,     0,
    3107,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3134,  3135,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3155,     0,     0,
       0,     0,     0,     0,     0,     0,  3165,     0,  3167,     0,
    3169,     0,     0,  2591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,   837,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    38,     0,    39,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3214,
      40,     0,     0,   837,   837,     0,   837,     0,     0,     0,
       0,    41,     0,     0,     0,   837,     0,     0,     0,     0,
     837,     0,     0,   837,     0,   837,   837,     0,     0,     0,
       0,     0,     0,    42,     0,     0,    43,     0,    44,     0,
       0,    45,     0,     0,    46,    47,   837,     0,     0,     0,
       0,     0,     0,    48,     0,    49,     0,     0,     0,     0,
       0,     0,     0,    50,     0,     0,     0,     0,     0,    51,
       0,  1951,     0,     0,     0,     0,   837,    52,     0,     0,
       0,     0,    53,    54,    55,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   837,
       0,     0,     0,     0,  2525,     0,     0,     0,     0,  2526,
       0,  2527,     0,  2528,    56,     0,     0,     0,     0,     0,
       0,    57,  3295,     0,  2529,     0,  2530,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   837,  2531,     0,     0,     0,
       0,  2532,  2533,     0,     0,     0,    58,     0,  2534,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    59,     0,
    2535,     0,    60,     0,     0,    61,     0,     0,  2536,     0,
       0,    62,     0,     0,     0,     0,     0,     0,  2537,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2538,     0,     0,     0,     0,     0,
      63,  3408,  3409,     0,     0,     0,    64,     0,  1546,     0,
       0,  2539,     0,     0,     0,     0,    65,     0,     0,  2540,
    2541,     0,     0,     0,     0,     0,  2542,     0,     0,     0,
       0,     0,     0,     0,  2543,     0,     0,     0,  -946,     0,
    2544,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3458,     0,
       0,     0,     0,     0,     0,   262,     0,   264,     0,     0,
       0,  2547,     0,  2548,     0,     0,     0,     0,     0,     0,
       0,  2549,     0,     0,     0,     0,     0,     0,     0,     0,
    3497,  3498,     0,     0,     0,     0,  2550,     0,     0,     0,
       0,     0,  3505,     0,     0,     0,     0,  3507,     0,     0,
    3508,     0,  3509,  3510,     0,     0,     0,     0,     0,     0,
    2551,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   837,     0,     0,     0,
       0,     0,     0,     0,  2552,     0,     0,     0,     0,     0,
    3628,  3629,     0,  3527,     0,     0,  3630,     0,  3631,     0,
    3632,  3633,  2553,     0,     0,     0,  2554,     0,     0,     0,
       0,     0,   837,     0,     0,     0,  3527,  3475,     0,     0,
     837,     0,     0,     0,     0,   837,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2555,     0,     0,     0,     0,
    2556,     0,     0,     0,     0,     0,     0,  2557,     0,  2558,
       0,     0,     0,     0,  2559,     0,     0,  2560,     0,     0,
       0,     0,  3527,  3634,     0,     0,  3635,     0,     0,     0,
       0,     0,     0,     0,  3636,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2561,     0,
       0,     0,  3637,     0,     0,     0,     0,  3885,     0,     0,
       0,     0,  2562,  2563,  2564,  2565,     0,     0,     0,  3638,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2566,     0,     0,     0,
       0,     0,     0,     0,  3639,     0,  3640,     0,  2591,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3641,
    3642,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   837,
       0,     0,     0,   837,     0,     0,     0,     0,     0,     0,
       0,     0,  2567,  2568,  2569,     0,     0,     0,     0,  2570,
       0,     0,     0,  3643,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   837,  2571,     0,     0,     0,  2572,
       0,     0,     0,     0,     0,     0,     0,     0,   837,     0,
       0,     0,  3644,     0,     0,     0,     0,     0,  2573,     0,
       0,  3645,  3646,  2574,  3647,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2575,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3648,  3649,
    3650,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3651,  3652,  3653,
       0,     0,     0,     0,  3654,     0,     0,  3655,     0,     0,
       0,     0,     0,     0,  3885,     0,     0,     0,     0,  -946,
       0,     0,     0,  3527,  3656,  3657,     0,     0,     0,     0,
       0,  3384,  4081,     0,     0,     0,  2526,     0,  2527,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2529,     0,  2530,     0,     0,     0,     0,     0,  3809,
    3658,  3659,     0,     0,     0,     0,     0,  3295,     0,     0,
       0,     0,  3817,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2531,     0,  3660,     0,     0,  2532,     0,
       0,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   837,     0,     0,     0,     0,  2535,   837,     0,
     837,     0,     0,     0,     0,  2536,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2537,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3661,     0,
       0,  2538,  3662,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1546,  3663,     0,  2539,     0,
       0,     0,     0,     0,     0,     0,  2540,     0,     0,     0,
       0,     0,     0,  3385,     0,     0,     0,     0,     0,     0,
       0,  2543,     0,     0,     0,   837,     0,  2544,     0,     0,
       0,  4081,  4081,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3664,     0,     0,  3665,  2546,     0,  3666,
    3667,  3668,  3669,     0,     0,     0,  3295,     0,     0,     0,
    3937,     0,     0,     0,     0,  4242,     0,     0,     0,  4242,
    4242,     0,     0,     0,   837,     0,     0,     0,     0,     0,
       0,     0,   262,     0,   264,     0,     0,     0,     0,     0,
    2548,  3527,     0,  3670,  3671,     0,     0,     0,  2549,     0,
       0,     0,     0,     0,     0,  3295,     0,     0,     0,     0,
     837,     0,     0,  2550,     0,     0,     0,     0,     0,  3672,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     837,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,  2552,   837,     0,  4081,  4081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2553,
       0,     0,     0,  2554,     0,     0,     0,     0,     0,     0,
       0,  4242,     0,     0,     0,     0,     0,     0,     0,     0,
    4242,     0,     0,     0,  4242,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2556,     0,     0,
       0,     0,     0,     0,  2557,     0,  2558,     0,     0,     0,
       0,     0,     0,     0,  2560,     0,     0,     0,  4242,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4150,
       0,   837,     0,  4081,     0,  4155,     0,  4157,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4081,   837,
    2563,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4081,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2566,     0,  4456,     0,     0,     0,     0,
       0,     0,   837,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4196,     0,     0,     0,     0,     0,     0,     0,
    4242,     0,  4242,  4242,     0,     0,     0,     0,     0,  2567,
    2568,  2569,     0,     0,     0,     0,  2570,   837,  4081,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4081,  4081,  2571,     0,     0,     0,  2572,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3295,     0,     0,     0,  2573,     0,     0,   837,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2575,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3295,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4081,     0,
       0,     0,     0,     0,     0,   837,     0,     0,  4081,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4310,     0,  4311,
       0,     0,     0,     0,     0,   837,     0,     0,     0,  4319,
       0,     0,  4081,     0,  4081,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4081,     0,     0,     0,   837,     0,
       0,   837,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4081,     0,  4081,
       0,  4081,     0,     0,     0,     0,     0,     0,  4081,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4081,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4081,  4081,     0,     0,     0,     0,
     837,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4081,  4081,     0,     0,     0,  4081,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4430,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  4435,     0,     0,     0,
     837,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3527,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4504,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4560,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4592,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,     0,   705,   137,   138,   139,   140,     0,  4611,   141,
       0,     0,     0,   142,     0,     0,   706,     0,   144,   145,
     146,   147,   148,   149,   707,   151,     0,   152,     0,     0,
     708,   153,   709,   710,   711,   154,   712,     0,   155,   156,
     157,  1747,   158,     0,   159,   160,     0,     0,   161,   713,
     714,   162,   163,     0,   164,   715,   716,   166,   167,     0,
     168,   169,   170,   171,   172,   717,   174,  4658,   718,   176,
     719,   720,   721,   722,   723,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   724,   196,     0,   197,   725,   726,   198,     0,     0,
     199,   727,   200,   728,   201,     0,   202,   729,   730,     0,
     203,   204,   205,   731,   732,   733,     0,  3527,     0,     0,
     734,   208,   735,     0,     0,   736,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,   737,     0,   236,   237,   238,   738,   739,   239,   240,
       0,   241,   242,   243,   740,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   741,   251,
     742,     0,   253,     0,   254,     0,   743,     0,   255,   256,
     257,     0,   258,   744,   745,     0,   259,   260,     0,     0,
       0,   746,   262,   263,   264,   747,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   748,   270,   271,
     749,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   750,     0,
    1748,   281,     0,   751,   282,   283,     0,     0,     0,     0,
       0,   752,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   753,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,   754,   310,
     311,   312,   313,   755,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   756,   321,     0,     0,   757,   323,
     758,   324,     0,   325,   759,   760,   761,   762,   763,   330,
     331,   332,   333,   334,     0,   764,   335,   336,     0,     0,
     337,   338,   339,   340,   765,   766,   767,   341,   342,     0,
     768,   769,   343,     0,   344,   345,   770,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,   771,   356,     0,
     357,     0,   358,   359,   772,   361,   362,   363,   364,   773,
     774,   367,   775,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   776,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,   777,   778,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,   779,   403,
     404,   405,   406,   407,   780,   781,   410,   411,   412,   413,
       0,   782,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,   783,   784,   441,   442,     0,   443,   444,
     785,   446,   447,   448,   786,   787,   449,   450,   451,   452,
     788,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,   789,   460,   461,     0,   790,   791,   792,   793,     0,
       0,     0,     0,  1749,   466,   467,   468,     0,   794,   795,
     796,   470,   471,   472,   797,   473,   474,   798,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   799,   483,   484,     0,     0,   800,   801,   802,
     803,   485,     0,     0,   486,   804,     0,   805,   487,   488,
     489,   490,   491,   806,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,     0,   807,     0,
       0,     0,     0,   808,   809,     0,     0,     0,     0,   810,
     811,     0,     0,   812,   813,     0,     0,   814,   815,   135,
       0,   705,   137,   138,   139,   140,  1947,     0,   141,     0,
       0,     0,   142,     0,     0,   706,     0,   144,   145,   146,
     147,   148,   149,   707,   151,     0,   152,     0,     0,  1948,
     153,   709,   710,   711,   154,   712,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,   713,   714,
     162,   163,     0,   164,   715,   716,   166,   167,     0,   168,
     169,   170,   171,   172,   717,   174,     0,   718,   176,   719,
     720,   721,   722,   723,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     724,   196,     0,   197,   725,   726,   198,     0,     0,   199,
     727,   200,   728,   201,     0,   202,   729,   730,     0,   203,
     204,   205,   731,   732,   733,     0,     0,     0,     0,   734,
     208,   735,     0,     0,  1949,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
     737,     0,   236,   237,   238,   738,   739,   239,   240,     0,
     241,   242,   243,   740,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   741,   251,   742,
       0,   253,     0,   254,     0,   743,     0,   255,   256,   257,
       0,   258,   744,   745,     0,   259,   260,     0,     0,     0,
     746,   262,   263,   264,   747,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,   748,   270,   271,   749,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   750,     0,     0,
     281,     0,   751,   282,   283,     0,     0,     0,     0,     0,
     752,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,   753,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   754,   310,   311,
     312,   313,   755,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   756,   321,     0,     0,   757,   323,   758,
     324,     0,   325,   759,   760,   761,   762,   763,   330,   331,
     332,   333,   334,     0,   764,   335,   336,     0,     0,   337,
     338,   339,   340,   765,   766,   767,   341,   342,     0,   768,
     769,   343,     0,   344,   345,   770,  1950,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,   771,   356,     0,   357,
       0,   358,   359,   772,   361,   362,   363,   364,   773,   774,
     367,   775,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   776,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,   777,   778,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,   779,   403,   404,
     405,   406,   407,   780,   781,   410,   411,   412,   413,     0,
     782,   415,     0,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,   783,   784,   441,   442,     0,   443,   444,   785,
     446,   447,   448,   786,   787,   449,   450,   451,   452,   788,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
     789,   460,   461,     0,   790,   791,   792,   793,     0,     0,
       0,     0,     0,   466,   467,   468,     0,   794,   795,   796,
     470,   471,   472,   797,   473,   474,   798,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   799,   483,   484,     0,     0,   800,   801,   802,   803,
     485,     0,     0,   486,   804,     0,   805,   487,   488,   489,
     490,   491,   806,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,     0,   807,     0,     0,
       0,     0,   808,   809,     0,     0,     0,     0,   810,   811,
       0,     0,   812,   813,     0,     0,   814,   815,   135,     0,
     705,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   706,     0,   144,   145,   146,   147,
     148,   149,   707,   151,     0,   152,     0,     0,   708,   153,
     709,   710,   711,   154,   712,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   713,   714,   162,
     163,     0,   164,   715,   716,   166,   167,     0,   168,   169,
     170,   171,   172,   717,   174,     0,   718,   176,   719,   720,
     721,   722,   723,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   724,
     196,     0,   197,   725,   726,   198,     0,     0,   199,   727,
     200,   728,   201,     0,   202,   729,   730,     0,   203,   204,
     205,   731,   732,   733,     0,     0,     0,     0,   734,   208,
     735,     0,     0,   736,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,   737,
       0,   236,   237,   238,   738,   739,   239,   240,     0,   241,
     242,   243,   740,     0,   244,     0,     0,     0,   245,  2261,
     246,     0,   247,     0,   248,   249,   741,   251,   742,     0,
     253,     0,   254,     0,   743,     0,   255,   256,   257,     0,
     258,   744,   745,     0,   259,   260,     0,     0,     0,   746,
     262,   263,   264,   747,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   748,   270,   271,   749,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   750,     0,     0,   281,
       0,   751,   282,   283,     0,     0,     0,     0,     0,   752,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     753,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,   754,   310,   311,   312,
     313,   755,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   756,   321,     0,     0,   757,   323,   758,   324,
       0,   325,   759,   760,   761,   762,   763,   330,   331,   332,
     333,   334,     0,   764,   335,   336,     0,     0,   337,   338,
     339,   340,   765,   766,   767,   341,   342,     0,   768,   769,
     343,     0,   344,   345,   770,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,   771,   356,     0,   357,     0,
     358,   359,   772,   361,   362,   363,   364,   773,   774,   367,
     775,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   776,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,   777,   778,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,   779,   403,   404,   405,
     406,   407,   780,   781,   410,   411,   412,   413,     0,   782,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,   783,   784,   441,   442,     0,   443,   444,   785,   446,
     447,   448,   786,   787,   449,   450,   451,   452,   788,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,   789,
     460,   461,     0,   790,   791,   792,   793,     0,     0,     0,
       0,     0,   466,   467,   468,     0,   794,   795,   796,   470,
     471,   472,   797,   473,   474,   798,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     799,   483,   484,     0,     0,   800,   801,   802,   803,   485,
       0,     0,   486,   804,     0,   805,   487,   488,   489,   490,
     491,   806,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,     0,   807,     0,     0,     0,
       0,   808,   809,     0,     0,     0,     0,   810,   811,     0,
       0,   812,   813,     0,     0,   814,   815,   135,     0,   705,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,     0,     0,   706,     0,   144,   145,   146,   147,   148,
     149,   707,   151,     0,   152,     0,     0,   708,   153,   709,
     710,   711,   154,   712,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   713,   714,   162,   163,
       0,   164,   715,   716,   166,   167,     0,   168,   169,   170,
     171,   172,   717,   174,     0,   718,   176,   719,   720,   721,
     722,   723,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   724,   196,
       0,   197,   725,   726,   198,     0,     0,   199,   727,   200,
     728,   201,     0,   202,   729,   730,     0,   203,   204,   205,
     731,   732,   733,     0,     0,     0,     0,   734,   208,   735,
       0,     0,   736,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,   737,     0,
     236,   237,   238,   738,   739,   239,   240,     0,   241,   242,
     243,   740,     0,   244,     0,     0,     0,   245,  2263,   246,
       0,   247,     0,   248,   249,   741,   251,   742,     0,   253,
       0,   254,     0,   743,     0,   255,   256,   257,     0,   258,
     744,   745,     0,   259,   260,     0,     0,     0,   746,   262,
     263,   264,   747,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,   748,   270,   271,   749,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   750,     0,     0,   281,     0,
     751,   282,   283,     0,     0,     0,     0,     0,   752,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,   753,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,   754,   310,   311,   312,   313,
     755,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   756,   321,     0,     0,   757,   323,   758,   324,     0,
     325,   759,   760,   761,   762,   763,   330,   331,   332,   333,
     334,     0,   764,   335,   336,     0,     0,   337,   338,   339,
     340,   765,   766,   767,   341,   342,     0,   768,   769,   343,
       0,   344,   345,   770,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,   771,   356,     0,   357,     0,   358,
     359,   772,   361,   362,   363,   364,   773,   774,   367,   775,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   776,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,   777,   778,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,   779,   403,   404,   405,   406,
     407,   780,   781,   410,   411,   412,   413,     0,   782,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
     783,   784,   441,   442,     0,   443,   444,   785,   446,   447,
     448,   786,   787,   449,   450,   451,   452,   788,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,   789,   460,
     461,     0,   790,   791,   792,   793,     0,     0,     0,     0,
       0,   466,   467,   468,     0,   794,   795,   796,   470,   471,
     472,   797,   473,   474,   798,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   799,
     483,   484,     0,     0,   800,   801,   802,   803,   485,     0,
       0,   486,   804,     0,   805,   487,   488,   489,   490,   491,
     806,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,     0,   807,     0,     0,     0,     0,
     808,   809,     0,     0,     0,     0,   810,   811,     0,     0,
     812,   813,     0,     0,   814,   815,   135,     0,   705,   137,
     138,   139,   140,     0,     0,   141,     0,     0,     0,   142,
       0,     0,   706,     0,   144,   145,   146,   147,   148,   149,
     707,   151,     0,   152,     0,     0,   708,   153,   709,   710,
     711,   154,   712,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,   713,   714,   162,   163,     0,
     164,   715,   716,   166,   167,     0,   168,   169,   170,   171,
     172,   717,   174,     0,   718,   176,   719,   720,   721,   722,
     723,     0,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,   724,   196,     0,
     197,   725,   726,   198,     0,     0,   199,   727,   200,   728,
     201,     0,   202,   729,   730,     0,   203,   204,   205,   731,
     732,   733,     0,     0,     0,     0,   734,   208,   735,     0,
       0,   736,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   235,   737,     0,   236,
     237,   238,   738,   739,   239,   240,     0,   241,   242,   243,
     740,     0,   244,     0,     0,     0,   245,  2265,   246,     0,
     247,     0,   248,   249,   741,   251,   742,     0,   253,     0,
     254,     0,   743,     0,   255,   256,   257,     0,   258,   744,
     745,     0,   259,   260,     0,     0,     0,   746,   262,   263,
     264,   747,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   748,   270,   271,   749,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   750,     0,     0,   281,     0,   751,
     282,   283,     0,     0,     0,     0,     0,   752,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   753,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,   754,   310,   311,   312,   313,   755,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     756,   321,     0,     0,   757,   323,   758,   324,     0,   325,
     759,   760,   761,   762,   763,   330,   331,   332,   333,   334,
       0,   764,   335,   336,     0,     0,   337,   338,   339,   340,
     765,   766,   767,   341,   342,     0,   768,   769,   343,     0,
     344,   345,   770,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,   771,   356,     0,   357,     0,   358,   359,
     772,   361,   362,   363,   364,   773,   774,   367,   775,     0,
     368,   369,   370,     0,   371,     0,   372,   373,   374,   375,
     376,     0,   776,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,   392,     0,   393,   394,   395,
     777,   778,   396,     0,   397,     0,   398,   399,     0,   400,
     401,   402,     0,     0,   779,   403,   404,   405,   406,   407,
     780,   781,   410,   411,   412,   413,     0,   782,   415,     0,
       0,     0,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,   439,     0,     0,     0,   440,   783,
     784,   441,   442,     0,   443,   444,   785,   446,   447,   448,
     786,   787,   449,   450,   451,   452,   788,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,   789,   460,   461,
       0,   790,   791,   792,   793,     0,     0,     0,     0,     0,
     466,   467,   468,     0,   794,   795,   796,   470,   471,   472,
     797,   473,   474,   798,   475,   476,     0,   477,   478,     0,
       0,   479,     0,     0,   480,     0,   481,     0,   799,   483,
     484,     0,     0,   800,   801,   802,   803,   485,     0,     0,
     486,   804,     0,   805,   487,   488,   489,   490,   491,   806,
       0,     0,     0,     0,     0,     0,   493,   494,     0,   495,
     496,   497,     0,     0,   807,     0,     0,     0,     0,   808,
     809,     0,     0,     0,     0,   810,   811,     0,     0,   812,
     813,     0,     0,   814,   815,   135,     0,   705,   137,   138,
     139,   140,     0,     0,   141,     0,     0,     0,   142,     0,
       0,   706,     0,   144,   145,   146,   147,   148,   149,   707,
     151,     0,   152,     0,     0,   708,   153,   709,   710,   711,
     154,   712,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,   713,   714,   162,   163,     0,   164,
     715,   716,   166,   167,     0,   168,   169,   170,   171,   172,
     717,   174,     0,   718,   176,   719,   720,   721,   722,   723,
       0,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,   724,   196,     0,   197,
     725,   726,   198,     0,     0,   199,   727,   200,   728,   201,
       0,   202,   729,   730,     0,   203,   204,   205,   731,   732,
     733,     0,     0,     0,     0,   734,   208,   735,     0,     0,
     736,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   235,   737,     0,   236,   237,
     238,   738,   739,   239,   240,     0,   241,   242,   243,   740,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   741,   251,   742,     0,   253,     0,   254,
       0,   743,     0,   255,   256,   257,     0,   258,   744,   745,
       0,   259,   260,     0,     0,     0,   746,   262,   263,   264,
     747,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   748,   270,   271,   749,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   750,     0,     0,   281,     0,   751,   282,
     283,     0,     0,     0,     0,     0,   752,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   753,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,   754,   310,   311,   312,   313,   755,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   756,
     321,     0,     0,   757,   323,   758,   324,     0,   325,   759,
     760,   761,   762,   763,   330,   331,   332,   333,   334,     0,
     764,   335,   336,     0,     0,   337,   338,   339,   340,   765,
     766,   767,   341,   342,     0,   768,   769,   343,     0,   344,
     345,   770,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,   771,   356,     0,   357,     0,   358,   359,   772,
     361,   362,   363,   364,   773,   774,   367,   775,     0,   368,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   776,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,   392,     0,   393,   394,   395,   777,
     778,   396,     0,   397,     0,   398,   399,     0,   400,   401,
     402,     0,     0,   779,   403,   404,   405,   406,   407,   780,
     781,   410,   411,   412,   413,     0,   782,   415,     0,     0,
       0,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,   433,     0,     0,     0,
       0,     0,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,   439,     0,     0,     0,   440,   783,   784,
     441,   442,     0,   443,   444,   785,   446,   447,   448,   786,
     787,   449,   450,   451,   452,   788,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,   789,   460,   461,     0,
     790,   791,   792,   793,     0,     0,     0,     0,     0,   466,
     467,   468,     0,   794,   795,   796,   470,   471,   472,   797,
     473,   474,   798,   475,   476,     0,   477,   478,     0,     0,
     479,     0,     0,   480,     0,   481,     0,   799,   483,   484,
       0,     0,   800,   801,   802,   803,   485,     0,     0,   486,
     804,     0,   805,   487,   488,   489,   490,   491,   806,     0,
       0,     0,     0,     0,     0,   493,   494,     0,   495,   496,
     497,     0,     0,   807,     0,     0,     0,     0,   808,   809,
       0,     0,     0,     0,   810,   811,     0,     0,   812,   813,
       0,     0,   814,   815,   135,     0,   705,   137,   138,   139,
     140,     0,     0,   141,     0,     0,     0,   142,     0,     0,
     706,     0,   144,   145,   146,   147,   148,   149,   707,   151,
       0,   152,     0,     0,   708,   153,   709,   710,   711,   154,
     712,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,   713,   714,   162,   163,     0,   164,   715,
     716,   166,   167,     0,   168,   169,   170,   171,   172,   717,
     174,     0,   718,   176,   719,   720,   721,   722,   723,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   724,   196,     0,   197,   725,
     726,   198,     0,     0,   199,   727,   200,   728,   201,     0,
     202,   729,   730,     0,   203,   204,   205,   731,   732,   733,
       0,     0,     0,     0,   734,   208,   735,     0,     0,   736,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,   737,     0,   236,   237,   238,
     738,   739,   239,   240,     0,   241,   242,   243,   740,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   741,   251,   742,     0,   253,     0,   254,     0,
     743,     0,   255,   256,   257,     0,   258,   744,   745,     0,
     259,   260,     0,     0,     0,   746,   262,   263,   264,   747,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,   748,   270,   271,   749,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   750,     0,     0,   281,     0,   751,   282,   283,
       0,     0,     0,     0,     0,   752,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   753,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,   754,   310,   311,   312,   313,   755,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   756,   321,
       0,     0,   757,   323,   758,   324,     0,   325,   759,   760,
     761,   762,   763,   330,   331,   332,   333,   334,     0,   764,
     335,   336,     0,     0,   337,   338,   339,   340,   765,   766,
     767,   341,   342,     0,   768,   769,   343,     0,   344,   345,
     770,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,   771,   356,     0,   357,     0,   358,   359,   772,   361,
     362,   363,   364,   773,   774,   367,   775,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     776,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,   777,   778,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,   779,   403,   404,   405,   406,   407,   780,   781,
     410,   411,   412,   413,     0,   782,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,   783,   784,   441,
     442,     0,   443,   444,   785,   446,   447,   448,   786,   787,
     449,   450,   451,   452,   788,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,   789,   460,   461,     0,   790,
     791,   792,   793,     0,     0,     0,     0,     0,   466,   467,
     468,     0,   794,   795,   796,   470,   471,   472,   797,   473,
     474,   798,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   799,   483,   484,     0,
       0,   800,   801,   802,   803,   485,     0,     0,   486,   804,
       0,   805,   487,   488,   489,   490,   491,   806,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,     0,   807,     0,     0,     0,     0,   808,   809,     0,
       0,     0,     0,   810,  1178,     0,     0,   812,   813,     0,
       0,   814,   815,   135,     0,   705,   137,   138,   139,   140,
    1781,     0,   141,     0,     0,     0,  1782,     0,     0,   706,
       0,   144,   145,   146,   147,   148,   149,   707,   151,     0,
     152,     0,     0,   708,   153,   709,   710,   711,   154,   712,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,   713,   714,   162,   163,     0,   164,   715,   716,
     166,   167,     0,   168,   169,   170,   171,   172,   717,   174,
       0,   718,   176,   719,   720,   721,   722,   723,     0,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
       0,   192,   193,   194,   724,   196,     0,   197,   725,   726,
     198,     0,     0,   199,   727,   200,   728,   201,     0,   202,
     729,   730,     0,   203,   204,   205,   731,   732,   733,     0,
       0,     0,     0,   734,   208,   735,     0,     0,   736,   209,
       0,   210,     0,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   235,   737,     0,   236,   237,   238,   738,
     739,   239,   240,     0,   241,   242,   243,   740,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   741,   251,   742,     0,   253,     0,   254,     0,   743,
       0,   255,   256,   257,     0,   258,   744,   745,     0,   259,
     260,     0,     0,     0,   746,   262,   263,   264,   747,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
     748,   270,   271,   749,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   750,     0,     0,   281,     0,   751,   282,   283,     0,
       0,     0,     0,     0,   752,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,   753,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
     309,   754,   310,   311,   312,   313,   755,   314,   315,     0,
       0,     0,     0,   316,   317,   318,   319,   756,   321,     0,
       0,   757,   323,   758,   324,     0,   325,   759,   760,   761,
     762,   763,   330,   331,   332,   333,   334,     0,   764,   335,
     336,     0,     0,   337,   338,   339,   340,   765,     0,   767,
     341,   342,     0,   768,   769,   343,     0,   344,   345,   770,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
     771,   356,     0,   357,     0,   358,   359,   772,   361,   362,
     363,   364,   773,   774,   367,   775,     0,   368,   369,   370,
       0,   371,     0,   372,   373,   374,   375,   376,     0,   776,
     378,   379,     0,     0,   380,     0,     0,     0,   381,   382,
     383,   384,   385,     0,     0,   386,   387,   388,   389,   390,
       0,   391,   392,     0,   393,   394,   395,   777,   778,   396,
       0,   397,     0,   398,   399,     0,   400,   401,   402,     0,
       0,   779,   403,   404,   405,   406,   407,   780,   781,   410,
     411,   412,   413,     0,   782,   415,     0,     0,     0,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,   431,   432,   433,     0,     0,     0,     0,     0,
       0,   434,   435,     0,   436,     0,     0,   437,     0,     0,
     438,   439,     0,     0,     0,   440,   783,   784,   441,   442,
       0,   443,   444,   785,   446,   447,   448,   786,   787,   449,
     450,   451,   452,   788,   453,   454,     0,   455,     0,   456,
     457,   458,   459,     0,   789,   460,   461,     0,   790,   791,
     792,   793,     0,     0,     0,     0,     0,   466,   467,   468,
       0,   794,   795,   796,   470,   471,   472,   797,   473,   474,
     798,   475,   476,     0,   477,   478,     0,     0,   479,     0,
       0,   480,     0,   481,     0,   799,   483,   484,     0,     0,
     800,   801,   802,   803,   485,     0,     0,   486,   804,     0,
     805,   487,   488,   489,   490,   491,   806,     0,     0,     0,
       0,     0,     0,   493,   494,     0,   495,   496,   497,     0,
       0,   807,     0,     0,     0,     0,   808,   809,     0,     0,
       0,     0,   810,   811,     0,     0,   812,   813,     0,     0,
     814,   815,   135,     0,   705,   137,   138,   139,   140,     0,
       0,   141,     0,     0,     0,   142,     0,     0,   706,     0,
     144,   145,   146,   147,   148,   149,   707,   151,     0,   152,
       0,     0,   708,   153,   709,   710,   711,   154,   712,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,   713,   714,   162,   163,     0,   164,   715,   716,   166,
     167,     0,   168,   169,   170,   171,   172,   717,   174,     0,
     718,   176,   719,   720,   721,   722,   723,     0,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,     0,
     192,   193,   194,   724,   196,     0,   197,   725,   726,   198,
       0,     0,   199,   727,   200,   728,   201,     0,   202,   729,
     730,     0,   203,   204,   205,   731,   732,   733,     0,     0,
       0,     0,   734,   208,   735,     0,     0,   736,   209,     0,
     210,     0,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,   235,   737,     0,   236,   237,   238,   738,   739,
     239,   240,     0,   241,   242,   243,   740,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     741,   251,   742,     0,   253,     0,   254,     0,   743,     0,
     255,   256,   257,     0,   258,   744,   745,     0,   259,   260,
       0,     0,     0,   746,   262,   263,   264,   747,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,   748,
     270,   271,   749,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     750,     0,     0,   281,     0,   751,   282,   283,     0,     0,
       0,     0,     0,   752,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,   753,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
     754,   310,   311,   312,   313,   755,   314,   315,     0,     0,
       0,     0,   316,   317,   318,   319,   756,   321,     0,     0,
     757,   323,   758,   324,     0,   325,   759,   760,   761,   762,
     763,   330,   331,   332,   333,   334,     0,   764,   335,   336,
       0,     0,   337,   338,   339,   340,   765,   766,   767,   341,
     342,     0,   768,   769,   343,     0,   344,   345,   770,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,   771,
     356,     0,   357,     0,   358,   359,   772,   361,   362,   363,
     364,   773,   774,   367,   775,     0,   368,   369,   370,     0,
     371,     0,   372,   373,   374,   375,   376,     0,   776,   378,
     379,     0,     0,   380,     0,     0,     0,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,     0,
     391,   392,     0,   393,   394,   395,   777,   778,   396,     0,
     397,     0,   398,   399,     0,   400,   401,   402,     0,     0,
     779,   403,   404,   405,   406,   407,   780,   781,   410,   411,
     412,   413,     0,   782,   415,     0,     0,     0,   416,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
       0,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,   431,   432,   433,     0,     0,     0,     0,     0,     0,
     434,   435,     0,   436,     0,     0,   437,     0,     0,   438,
     439,     0,     0,     0,   440,   783,   784,   441,   442,     0,
     443,   444,   785,   446,   447,   448,   786,   787,   449,   450,
     451,   452,   788,   453,   454,     0,   455,     0,   456,   457,
     458,   459,     0,   789,   460,   461,     0,   790,   791,   792,
     793,     0,     0,     0,     0,     0,   466,   467,   468,     0,
     794,   795,   796,   470,   471,   472,   797,   473,   474,   798,
     475,   476,     0,   477,   478,     0,     0,   479,     0,     0,
     480,     0,   481,     0,  1868,   483,   484,     0,     0,   800,
     801,   802,   803,   485,     0,     0,   486,   804,     0,   805,
     487,   488,   489,   490,   491,   806,     0,     0,     0,     0,
       0,     0,   493,   494,     0,   495,   496,   497,     0,     0,
     807,     0,     0,     0,     0,   808,   809,     0,     0,     0,
       0,   810,   811,     0,     0,   812,   813,     0,     0,   814,
     815,   135,     0,   705,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   706,     0,   144,
     145,   146,   147,   148,   149,   707,   151,     0,   152,     0,
       0,   708,   153,   709,   710,   711,   154,   712,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
     713,   714,   162,   163,     0,   164,   715,   716,   166,   167,
       0,   168,   169,   170,   171,   172,   717,   174,     0,   718,
     176,   719,   720,   721,   722,   723,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   724,   196,     0,   197,   725,   726,   198,     0,
       0,   199,   727,   200,   728,   201,     0,   202,   729,   730,
       0,   203,   204,   205,   731,   732,   733,     0,     0,     0,
       0,   734,   208,   735,     0,     0,   736,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,   737,     0,   236,   237,   238,   738,   739,   239,
     240,     0,   241,   242,   243,   740,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   741,
     251,   742,     0,   253,     0,   254,     0,   743,     0,   255,
     256,   257,     0,   258,   744,   745,     0,   259,   260,     0,
       0,     0,   746,   262,   263,   264,   747,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,   748,   270,
     271,  2676,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   750,
       0,     0,   281,     0,   751,   282,   283,     0,     0,     0,
       0,     0,   752,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,   753,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,   754,
     310,   311,   312,   313,   755,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   756,   321,     0,     0,   757,
     323,   758,   324,     0,   325,   759,   760,   761,   762,   763,
     330,   331,   332,   333,   334,     0,   764,   335,   336,     0,
       0,   337,   338,   339,   340,   765,   766,   767,   341,   342,
       0,   768,   769,   343,     0,   344,   345,   770,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,   771,   356,
       0,   357,     0,   358,   359,   772,   361,   362,   363,   364,
     773,   774,   367,   775,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   776,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,   777,   778,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,   779,
     403,   404,   405,   406,   407,   780,   781,   410,   411,   412,
     413,     0,   782,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,   783,   784,   441,   442,     0,   443,
     444,   785,   446,   447,   448,   786,   787,   449,   450,   451,
     452,   788,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,   789,   460,   461,     0,   790,   791,   792,   793,
       0,     0,     0,     0,     0,   466,   467,   468,     0,   794,
     795,   796,   470,   471,   472,   797,   473,   474,   798,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   799,   483,   484,     0,     0,   800,   801,
     802,   803,   485,     0,     0,   486,   804,     0,   805,   487,
     488,   489,   490,   491,   806,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   807,
       0,     0,     0,     0,   808,   809,     0,     0,     0,     0,
     810,   811,     0,     0,   812,   813,     0,     0,   814,   815,
     135,     0,   705,   137,   138,   139,   140,     0,     0,   141,
       0,     0,     0,   142,     0,     0,   706,     0,   144,   145,
     146,   147,   148,   149,   707,   151,     0,   152,     0,     0,
     708,   153,   709,   710,   711,   154,   712,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,   713,
     714,   162,   163,     0,   164,   715,   716,   166,   167,     0,
     168,   169,   170,   171,   172,   717,   174,     0,   718,   176,
     719,   720,   721,   722,   723,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   724,   196,     0,   197,   725,   726,   198,     0,     0,
     199,   727,   200,   728,   201,     0,   202,   729,   730,     0,
     203,   204,   205,   731,   732,   733,     0,     0,     0,     0,
     734,   208,   735,     0,     0,   736,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,   737,     0,   236,   237,   238,   738,   739,   239,   240,
       0,   241,   242,   243,   740,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   741,   251,
     742,     0,   253,     0,   254,     0,   743,     0,   255,   256,
     257,     0,   258,   744,   745,     0,   259,   260,     0,     0,
       0,   746,   262,   263,   264,   747,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,   748,   270,   271,
    2727,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   750,     0,
       0,   281,     0,   751,   282,   283,     0,     0,     0,     0,
       0,   752,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,   753,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,   754,   310,
     311,   312,   313,   755,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   756,   321,     0,     0,   757,   323,
     758,   324,     0,   325,   759,   760,   761,   762,   763,   330,
     331,   332,   333,   334,     0,   764,   335,   336,     0,     0,
     337,   338,   339,   340,   765,   766,   767,   341,   342,     0,
     768,   769,   343,     0,   344,   345,   770,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,   771,   356,     0,
     357,     0,   358,   359,   772,   361,   362,   363,   364,   773,
     774,   367,   775,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   776,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,   777,   778,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,   779,   403,
     404,   405,   406,   407,   780,   781,   410,   411,   412,   413,
       0,   782,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,   783,   784,   441,   442,     0,   443,   444,
     785,   446,   447,   448,   786,   787,   449,   450,   451,   452,
     788,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,   789,   460,   461,     0,   790,   791,   792,   793,     0,
       0,     0,     0,     0,   466,   467,   468,     0,   794,   795,
     796,   470,   471,   472,   797,   473,   474,   798,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   799,   483,   484,     0,     0,   800,   801,   802,
     803,   485,     0,     0,   486,   804,     0,   805,   487,   488,
     489,   490,   491,   806,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,     0,   807,     0,
       0,     0,     0,   808,   809,     0,     0,     0,     0,   810,
     811,     0,     0,   812,   813,     0,     0,   814,   815,   135,
       0,   705,   137,   138,   139,   140,     0,     0,   141,     0,
       0,     0,   142,     0,     0,   706,     0,   144,   145,   146,
     147,   148,   149,   707,   151,     0,   152,     0,     0,   708,
     153,   709,   710,   711,   154,   712,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,   713,   714,
     162,   163,     0,   164,   715,   716,   166,   167,     0,   168,
     169,   170,   171,   172,   717,   174,     0,   718,   176,   719,
     720,   721,   722,   723,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     724,   196,     0,   197,   725,   726,   198,     0,     0,   199,
     727,   200,   728,   201,     0,   202,   729,   730,     0,   203,
     204,   205,   731,   732,   733,     0,     0,     0,     0,   734,
     208,   735,     0,     0,  3526,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
     737,     0,   236,   237,   238,   738,   739,   239,   240,     0,
     241,   242,   243,   740,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   741,   251,   742,
       0,   253,     0,   254,     0,   743,     0,   255,   256,   257,
       0,   258,   744,   745,     0,   259,   260,     0,     0,     0,
     746,   262,   263,   264,   747,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,   748,   270,   271,   749,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   750,     0,     0,
     281,     0,   751,   282,   283,     0,     0,     0,     0,     0,
     752,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,   753,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,   754,   310,   311,
     312,   313,   755,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   756,   321,     0,     0,   757,   323,   758,
     324,     0,   325,   759,   760,   761,   762,   763,   330,   331,
     332,   333,   334,     0,   764,   335,   336,     0,     0,   337,
     338,   339,   340,   765,   766,   767,   341,   342,     0,   768,
     769,   343,     0,   344,   345,   770,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,   771,   356,     0,   357,
       0,   358,   359,   772,   361,   362,   363,   364,   773,   774,
     367,   775,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   776,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,   777,   778,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,   779,   403,   404,
     405,   406,   407,   780,   781,   410,   411,   412,   413,     0,
     782,   415,     0,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,   783,   784,   441,   442,     0,   443,   444,   785,
     446,   447,   448,   786,   787,   449,   450,   451,   452,   788,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
     789,   460,   461,     0,   790,   791,   792,   793,     0,     0,
       0,     0,     0,   466,   467,   468,     0,   794,   795,   796,
     470,   471,   472,   797,   473,   474,   798,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   799,   483,   484,     0,     0,   800,   801,   802,   803,
     485,     0,     0,   486,   804,     0,   805,   487,   488,   489,
     490,   491,   806,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,     0,   807,     0,     0,
       0,     0,   808,   809,     0,     0,     0,     0,   810,   811,
       0,     0,   812,   813,     0,     0,   814,   815,   135,     0,
     705,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   706,     0,   144,   145,   146,   147,
     148,   149,   707,   151,     0,   152,     0,     0,   708,   153,
     709,   710,   711,   154,   712,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,   713,   714,   162,
     163,     0,   164,   715,   716,   166,   167,     0,   168,   169,
     170,   171,   172,   717,   174,     0,   718,   176,   719,   720,
     721,   722,   723,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   724,
     196,     0,   197,   725,   726,   198,     0,     0,   199,   727,
     200,   728,   201,     0,   202,   729,   730,     0,   203,   204,
     205,   731,   732,   733,     0,     0,     0,     0,   734,   208,
     735,     0,     0,   736,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,   737,
       0,   236,   237,   238,   738,   739,   239,   240,     0,   241,
     242,   243,   740,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   741,   251,   742,     0,
     253,     0,   254,     0,   743,     0,   255,   256,   257,     0,
     258,   744,   745,     0,   259,   260,     0,     0,     0,   746,
     262,   263,   264,   747,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,   748,   270,   271,   749,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   750,     0,     0,   281,
       0,   751,   282,   283,     0,     0,     0,     0,     0,   752,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
     753,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,   754,   310,   311,   312,
     313,   755,   314,   315,  4528,     0,     0,     0,   316,   317,
     318,   319,   756,   321,     0,     0,   757,   323,   758,   324,
       0,   325,   759,   760,   761,   762,   763,   330,   331,   332,
     333,   334,     0,   764,   335,   336,     0,     0,   337,   338,
     339,   340,   765,     0,   767,   341,   342,     0,   768,   769,
     343,     0,   344,   345,   770,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,   771,   356,     0,   357,     0,
     358,   359,   772,   361,   362,   363,   364,   773,   774,   367,
     775,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   776,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,   777,   778,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,   779,   403,   404,   405,
     406,   407,   780,   781,   410,   411,   412,   413,     0,   782,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,   783,   784,   441,   442,     0,   443,   444,   785,   446,
     447,   448,   786,   787,   449,   450,   451,   452,   788,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,   789,
     460,   461,     0,   790,   791,   792,   793,     0,     0,     0,
       0,     0,   466,   467,   468,     0,   794,   795,   796,   470,
     471,   472,   797,   473,   474,   798,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     799,   483,   484,     0,     0,   800,   801,   802,   803,   485,
       0,     0,   486,   804,     0,   805,   487,   488,   489,   490,
     491,   806,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,     0,   807,     0,     0,     0,
       0,   808,   809,     0,     0,     0,     0,   810,   811,     0,
       0,   812,   813,     0,     0,   814,   815,   135,     0,   705,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,     0,     0,   706,     0,   144,   145,   146,   147,   148,
     149,   707,   151,     0,   152,     0,     0,   708,   153,   709,
     710,   711,   154,   712,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,   713,   714,   162,   163,
       0,   164,   715,   716,   166,   167,     0,   168,   169,   170,
     171,   172,   717,   174,     0,   718,   176,   719,   720,   721,
     722,   723,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   724,   196,
       0,   197,   725,   726,   198,     0,     0,   199,   727,   200,
     728,   201,     0,   202,   729,   730,     0,   203,   204,   205,
     731,   732,   733,     0,     0,     0,     0,   734,   208,   735,
       0,     0,   736,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,   737,     0,
     236,   237,   238,   738,   739,   239,   240,     0,   241,   242,
     243,   740,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   741,   251,   742,     0,   253,
       0,   254,     0,   743,     0,   255,   256,   257,     0,   258,
     744,   745,     0,   259,   260,     0,     0,     0,   746,   262,
     263,   264,   747,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,   748,   270,   271,   749,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   750,     0,     0,   281,     0,
     751,   282,   283,     0,     0,     0,     0,     0,   752,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,   753,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,   754,   310,   311,   312,   313,
     755,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   756,   321,     0,     0,   757,   323,   758,   324,     0,
     325,   759,   760,   761,   762,   763,   330,   331,   332,   333,
     334,     0,   764,   335,   336,     0,     0,   337,   338,   339,
     340,   765,     0,   767,   341,   342,     0,   768,   769,   343,
       0,   344,   345,   770,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,   771,   356,     0,   357,     0,   358,
     359,   772,   361,   362,   363,   364,   773,   774,   367,   775,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   776,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,   777,   778,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,   779,   403,   404,   405,   406,
     407,   780,   781,   410,   411,   412,   413,     0,   782,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
     783,   784,   441,   442,     0,   443,   444,   785,   446,   447,
     448,   786,   787,   449,   450,   451,   452,   788,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,   789,   460,
     461,     0,   790,   791,   792,   793,     0,     0,     0,     0,
       0,   466,   467,   468,     0,   794,   795,   796,   470,   471,
     472,   797,   473,   474,   798,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   799,
     483,   484,     0,     0,   800,   801,   802,   803,   485,     0,
       0,   486,   804,     0,   805,   487,   488,   489,   490,   491,
     806,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,     0,   807,     0,     0,     0,     0,
     808,   809,     0,     0,     0,     0,   810,   811,     0,     0,
     812,   813,     0,     0,   814,   815,   135,     0,   705,   137,
     138,   139,   140,     0,     0,   141,     0,     0,     0,   142,
       0,     0,   706,     0,   144,   145,   146,   147,   148,   149,
     707,   151,     0,   152,     0,     0,   708,   153,   709,   710,
     711,   154,   712,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,   713,   714,   162,   163,     0,
     164,   715,   716,   166,   167,     0,   168,   169,   170,   171,
     172,   717,   174,     0,   718,   176,   719,   720,   721,   722,
     723,     0,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,   724,   196,     0,
     197,   725,   726,   198,     0,     0,   199,   727,   200,   728,
     201,     0,   202,   729,   730,     0,   203,   204,   205,   731,
     732,   733,     0,     0,     0,     0,   734,   208,   735,     0,
       0,   736,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   235,   737,     0,   236,
     237,   238,   738,   739,   239,   240,     0,   241,   242,   243,
     740,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   741,   251,   742,     0,   253,     0,
     254,     0,   743,     0,   255,   256,   257,     0,   258,   744,
     745,     0,   259,   260,     0,     0,     0,   746,   262,   263,
     264,   747,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,   748,   270,   271,  1796,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   750,     0,     0,   281,     0,   751,
     282,   283,     0,     0,     0,     0,     0,   752,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,   753,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,   754,   310,   311,   312,   313,   755,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     756,   321,     0,     0,   757,   323,   758,   324,     0,   325,
     759,   760,   761,   762,   763,   330,   331,   332,   333,   334,
       0,   764,   335,   336,     0,     0,   337,   338,   339,   340,
     765,     0,   767,   341,   342,     0,   768,   769,   343,     0,
     344,   345,   770,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,   771,   356,     0,   357,     0,   358,   359,
     772,   361,   362,   363,   364,   773,   774,   367,   775,     0,
     368,   369,   370,     0,   371,     0,   372,   373,   374,   375,
     376,     0,   776,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,   392,     0,   393,   394,   395,
     777,   778,   396,     0,   397,     0,   398,   399,     0,   400,
     401,   402,     0,     0,   779,   403,   404,   405,   406,   407,
     780,   781,   410,   411,   412,   413,     0,   782,   415,     0,
       0,     0,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,   439,     0,     0,     0,   440,   783,
     784,   441,   442,     0,   443,   444,   785,   446,   447,   448,
     786,   787,   449,   450,   451,   452,   788,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,   789,   460,   461,
       0,   790,   791,   792,   793,     0,     0,     0,     0,     0,
     466,   467,   468,     0,   794,   795,   796,   470,   471,   472,
     797,   473,   474,   798,   475,   476,     0,   477,   478,     0,
       0,   479,     0,     0,   480,     0,   481,     0,   799,   483,
     484,     0,     0,   800,   801,   802,   803,   485,     0,     0,
     486,   804,     0,   805,   487,   488,   489,   490,   491,   806,
       0,     0,     0,     0,     0,     0,   493,   494,     0,   495,
     496,   497,     0,     0,   807,     0,     0,     0,     0,   808,
     809,     0,     0,     0,     0,   810,   811,     0,     0,   812,
     813,     0,     0,   814,   815,   135,     0,   705,   137,   138,
     139,   140,     0,     0,   141,     0,     0,     0,   142,     0,
       0,   706,     0,   144,   145,   146,   147,   148,   149,   707,
     151,     0,   152,     0,     0,   708,   153,   709,   710,   711,
     154,   712,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,   713,   714,   162,   163,     0,   164,
     715,   716,   166,   167,     0,   168,   169,   170,   171,   172,
     717,   174,     0,   718,   176,   719,   720,   721,   722,   723,
       0,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,   724,   196,     0,   197,
     725,   726,   198,     0,     0,   199,   727,   200,   728,   201,
       0,   202,   729,   730,     0,   203,   204,   205,   731,   732,
     733,     0,     0,     0,     0,   734,   208,   735,     0,     0,
     736,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   235,   737,     0,   236,   237,
     238,   738,   739,   239,   240,     0,   241,   242,   243,   740,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   741,   251,   742,     0,   253,     0,   254,
       0,   743,     0,   255,   256,   257,     0,   258,   744,   745,
       0,   259,   260,     0,     0,     0,   746,   262,   263,   264,
     747,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,   748,   270,   271,  1798,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   750,     0,     0,   281,     0,   751,   282,
     283,     0,     0,     0,     0,     0,   752,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,   753,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,   754,   310,   311,   312,   313,   755,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   756,
     321,     0,     0,   757,   323,   758,   324,     0,   325,   759,
     760,   761,   762,   763,   330,   331,   332,   333,   334,     0,
     764,   335,   336,     0,     0,   337,   338,   339,   340,   765,
       0,   767,   341,   342,     0,   768,   769,   343,     0,   344,
     345,   770,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,   771,   356,     0,   357,     0,   358,   359,   772,
     361,   362,   363,   364,   773,   774,   367,   775,     0,   368,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   776,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,   392,     0,   393,   394,   395,   777,
     778,   396,     0,   397,     0,   398,   399,     0,   400,   401,
     402,     0,     0,   779,   403,   404,   405,   406,   407,   780,
     781,   410,   411,   412,   413,     0,   782,   415,     0,     0,
       0,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,   433,     0,     0,     0,
       0,     0,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,   439,     0,     0,     0,   440,   783,   784,
     441,   442,     0,   443,   444,   785,   446,   447,   448,   786,
     787,   449,   450,   451,   452,   788,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,   789,   460,   461,     0,
     790,   791,   792,   793,     0,     0,     0,     0,     0,   466,
     467,   468,     0,   794,   795,   796,   470,   471,   472,   797,
     473,   474,   798,   475,   476,     0,   477,   478,     0,     0,
     479,     0,     0,   480,     0,   481,     0,   799,   483,   484,
       0,     0,   800,   801,   802,   803,   485,     0,     0,   486,
     804,     0,   805,   487,   488,   489,   490,   491,   806,     0,
       0,     0,     0,     0,     0,   493,   494,     0,   495,   496,
     497,     0,     0,   807,     0,     0,     0,     0,   808,   809,
       0,     0,     0,     0,   810,   811,     0,     0,   812,   813,
       0,     0,   814,   815,   135,     0,   136,   137,   138,   139,
     140,     0,     0,   141,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,   709,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   195,   196,     0,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,  1837,
       0,     0,     0,     0,   207,   208,   735,     0,     0,     0,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,   739,   239,   240,     0,   241,   242,   243,   740,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,   744,   745,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,   753,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,   764,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,   768,   769,   343,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,     0,     0,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,   789,   460,   461,     0,  1838,
     463,   464,  1839,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,   795,   469,   470,   471,   472,   797,   473,
     474,   798,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,     0,   498,     0,     0,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,   814,   815,   143,     0,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,  2930,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
     539,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,  2096,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,  2097,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,  3081,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
    2392,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,   542,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,     0,   498,     0,     0,   135,     0,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   143,  3003,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,  2930,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,   539,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,  2096,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,  2097,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
     542,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,     0,   498,     0,     0,   135,
       0,   136,   137,   138,   139,   140,     0,     0,   141,     0,
       0,     0,   142,     0,     0,   143,  3003,   144,   145,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,   167,     0,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     195,   196,     0,   197,     0,     0,   198,     0,     0,   199,
       0,   200,     0,   201,     0,   202,     0,     0,     0,   203,
     204,   205,     0,     0,   206,     0,     0,     0,     0,   207,
     208,     0,     0,     0,     0,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
       0,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
     312,   313,     0,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   320,   321,     0,     0,   322,   323,     0,
     324,     0,   325,     0,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,     0,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,     0,     0,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     414,   415,  2392,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,     0,     0,
       0,     0,     0,   466,   467,   468,     0,     0,     0,   469,
     470,   471,   472,     0,   473,   474,     0,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   487,   488,   489,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,     0,   498,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,   141,
    2820,     0,     0,   142,     0,     0,   143,   815,   144,   145,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   195,   196,     0,   197,     0,     0,   198,     0,     0,
     199,     0,   200,     0,   201,     0,   202,     0,     0,     0,
     203,   204,   205,     0,     0,   206,     0,     0,     0,     0,
     207,   208,     0,     0,     0,     0,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,     0,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,   312,   313,     0,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   320,   321,     0,     0,   322,   323,
       0,   324,     0,   325,     0,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,     0,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,     0,     0,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   414,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   466,   467,   468,     0,     0,     0,
     469,   470,   471,   472,     0,   473,   474,     0,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,     0,   498,     0,
       0,     0,     0,   135,     0,   136,   137,   138,   139,   140,
       0,  4669,   141,     0,     0,     0,   142,  4670,   815,   143,
       0,   144,   145,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,   167,     0,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
       0,   192,   193,   194,   195,   196,     0,   197,     0,     0,
     198,     0,     0,   199,     0,   200,     0,   201,     0,   202,
       0,     0,     0,   203,   204,   205,     0,     0,   206,     0,
       0,     0,     0,   207,   208,     0,     0,     0,     0,   209,
       0,   210,     0,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,     0,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,   312,   313,     0,   314,   315,     0,
       0,     0,     0,   316,   317,   318,   319,   320,   321,     0,
       0,   322,   323,     0,   324,     0,   325,     0,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,     0,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,     0,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,   373,   374,   375,   376,     0,   377,
     378,   379,     0,     0,   380,     0,     0,     0,   381,   382,
     383,   384,   385,     0,     0,   386,   387,   388,   389,   390,
       0,   391,   392,     0,   393,   394,   395,     0,     0,   396,
       0,   397,     0,   398,   399,     0,   400,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,   414,   415,     0,     0,     0,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,   431,   432,   433,     0,     0,     0,     0,     0,
       0,   434,   435,     0,   436,     0,     0,   437,     0,     0,
     438,   439,     0,     0,     0,   440,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,   455,     0,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,     0,     0,     0,     0,     0,   466,   467,   468,
       0,     0,     0,   469,   470,   471,   472,     0,   473,   474,
       0,   475,   476,     0,   477,   478,     0,     0,   479,     0,
       0,   480,     0,   481,     0,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   487,   488,   489,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,   494,     0,   495,   496,   497,     0,
       0,   498,     0,     0,     0,     0,   135,     0,   136,   137,
     138,   139,   140,  1183,     0,   141,     0,     0,     0,   142,
       0,   815,   143,     0,   144,   145,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,   195,   196,     0,
     197,     0,     0,   198,     0,     0,   199,     0,   200,     0,
     201,     0,   202,     0,     0,     0,   203,   204,   205,     0,
       0,   206,     0,     0,     0,     0,   207,   208,     0,     0,
       0,     0,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,     0,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,  1394,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,   312,   313,     0,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     320,   321,     0,     0,   322,   323,     0,   324,     0,   325,
       0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,     0,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,   392,     0,   393,   394,   395,
       0,     0,   396,     0,   397,     0,   398,   399,     0,   400,
     401,   402,     0,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   414,   415,     0,
       0,     0,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,   439,     0,     0,     0,   440,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,     0,     0,     0,     0,     0,
     466,   467,   468,     0,     0,     0,   469,   470,   471,   472,
       0,   473,   474,     0,   475,   476,     0,   477,   478,     0,
       0,   479,     0,     0,   480,     0,   481,     0,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,     0,     0,
     486,     0,     0,     0,   487,   488,   489,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,   494,     0,   495,
     496,   497,     0,     0,   498,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,     0,     0,   143,   575,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,     0,   498,     0,     0,     0,     0,
       0,   135,  2341,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,   575,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,     0,     0,     0,   135,     0,   136,   137,   138,   139,
     140,  3002,     0,   141,     0,     0,     0,   142,     0,  3003,
     143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   195,   196,     0,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,   206,
       0,     0,     0,     0,   207,   208,     0,     0,     0,     0,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,     0,     0,   343,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,     0,     0,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,     0,   469,   470,   471,   472,     0,   473,
     474,     0,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,     0,   498,     0,     0,     0,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,  4670,   815,   143,     0,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,     0,   498,     0,     0,   135,     0,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   143,   575,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   643,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     644,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,     0,   498,     0,     0,   135,
       0,   136,   137,   138,   139,   140,     0,     0,   141,     0,
       0,     0,   142,     0,     0,   143,   575,   144,   145,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,   167,     0,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     195,   196,     0,   197,     0,     0,   198,     0,     0,   199,
       0,   200,     0,   201,     0,   202,     0,     0,     0,   203,
     204,   205,     0,     0,   206,     0,     0,     0,     0,   207,
     208,     0,     0,     0,     0,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
       0,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
     312,   313,     0,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   320,   321,     0,     0,   322,   323,     0,
     324,     0,   325,     0,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,     0,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,     0,     0,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     414,   415,     0,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,     0,     0,
       0,     0,     0,   466,   467,   468,     0,     0,     0,   469,
     470,   471,   472,     0,   473,   474,     0,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   487,   488,   489,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,     0,   498,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,   141,
       0,     0,     0,   142,     0,     0,   143,   815,   144,   145,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   195,   196,     0,   197,     0,     0,   198,     0,     0,
     199,     0,   200,     0,   201,     0,   202,     0,     0,     0,
     203,   204,   205,     0,     0,   206,     0,     0,     0,     0,
     207,   208,     0,     0,     0,     0,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,     0,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,   312,   313,     0,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   320,   321,     0,     0,   322,   323,
       0,   324,     0,   325,     0,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,     0,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,     0,     0,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   414,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   466,   467,   468,     0,     0,     0,
     469,   470,   471,   472,     0,   473,   474,     0,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,     0,   498,     0,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,  3003,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   949,   950,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,   951,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   952,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   953,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   954,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   955,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   956,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   957,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,   958,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   655,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,   526,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,  1444,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   655,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,   526,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,  1768,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   949,   950,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,   951,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   952,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   953,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   954,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   955,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   956,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,   958,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,   655,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,   526,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,  3559,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,  1329,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,  1330,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,     0,   498,
       0,   135,     0,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,     0,  1330,   144,
     145,   146,   147,   148,   149,   150,     0,     0,  -378,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,     0,     0,     0,     0,   161,
    4054,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   168,   169,   170,   171,  4055,   173,   174,     0,   175,
     176,     0,     0,     0,     0,     0,     0,   182,     0,   184,
       0,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,     0,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,     0,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,     0,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,     0,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  4056,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  4057,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  4058,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  4059,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -333,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,     0,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,  4060,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   354,   355,     0,     0,     0,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,     0,     0,     0,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
       0,     0,   393,     0,   395,  -333,     0,   396,     0,     0,
       0,   398,     0,     0,   400,   401,   402,  4061,     0,     0,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,     0,   414,     0,     0,     0,     0,   416,   417,   418,
       0,     0,     0,     0,   420,     0,     0,     0,   421,     0,
       0,   423,     0,     0,   426,   427,     0,   428,     0,   430,
       0,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,     0,
       0,     0,     0,   440,     0,     0,     0,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,     0,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,  -333,     0,     0,
       0,   493,     0,     0,   495,     0,   497,     0,   135,   498,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,  4663,   143,     0,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,  1048,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   655,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,   526,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,     0,   498,   135,     0,   136,
     137,   138,   139,   140,     0,     0,   141,     0,  1230,     0,
     142,     0,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,   135,   498,   136,   137,   138,   139,
     140,     0,  2171,   141,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   195,   196,     0,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,   206,
       0,     0,     0,     0,   207,   208,     0,     0,     0,     0,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,     0,     0,   343,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,     0,     0,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,     0,   469,   470,   471,   472,     0,   473,
     474,     0,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,   135,   498,   136,   137,   138,   139,   140,     0,  2850,
     141,     0,     0,     0,   142,     0,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,   135,   498,
     136,   137,   138,   139,   140,     0,  3209,   141,     0,     0,
       0,   142,     0,     0,   143,     0,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,   135,   498,   136,   137,   138,
     139,   140,     0,  3564,   141,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,   167,     0,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,   195,   196,     0,   197,
       0,     0,   198,     0,     0,   199,     0,   200,     0,   201,
       0,   202,     0,     0,     0,   203,   204,   205,     0,     0,
     206,     0,     0,     0,     0,   207,   208,  2505,     0,     0,
       0,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,  2506,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,     0,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,  2507,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,  2508,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,   312,   313,     0,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   320,
     321,     0,     0,   322,   323,     0,   324,     0,   325,     0,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,     0,   337,   338,   339,   340,  1094,
    1095,     0,   341,   342,     0,     0,  2509,   343,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   377,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,   392,     0,   393,   394,   395,     0,
       0,   396,     0,   397,     0,   398,   399,     0,   400,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   414,   415,     0,     0,
       0,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,   433,     0,     0,  4650,
     600,  4651,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,   439,     0,     0,     0,   440,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,     0,     0,     0,     0,     0,   466,
     467,   468,     0,     0,     0,   469,   470,   471,   472,  2510,
     473,   474,     0,   475,   476,     0,   477,   478,     0,     0,
     479,     0,     0,   480,     0,   481,     0,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,     0,     0,   486,
       0,     0,     0,   487,   488,   489,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,   494,     0,   495,   496,
     497,     0,   135,   498,   136,   137,   138,   139,   140,     0,
       0,   141,     0,     0,     0,   142,     0,     0,   143,     0,
     144,   145,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,     0,
     192,   193,   194,   195,   196,     0,   197,     0,     0,   198,
       0,     0,   199,     0,   200,     0,   201,     0,   202,     0,
       0,     0,   203,   204,   205,     0,     0,   206,     0,     0,
       0,     0,   207,   208,  1655,     0,     0,  3398,   209,     0,
     210,     0,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,  1656,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,     0,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,  3399,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,  3400,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,   312,   313,     0,   314,   315,     0,     0,
       0,     0,   316,   317,   318,   319,   320,   321,     0,     0,
     322,   323,     0,   324,     0,   325,     0,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,     0,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,  3401,   343,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,     0,     0,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,     0,
     391,   392,     0,   393,   394,   395,     0,     0,   396,     0,
     397,     0,   398,   399,     0,   400,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,   414,   415,     0,     0,     0,   416,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
       0,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,   431,   432,   433,     0,     0,     0,     0,     0,     0,
     434,   435,     0,   436,     0,     0,   437,     0,     0,   438,
     439,     0,     0,     0,   440,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,   455,     0,   456,   457,
     458,   459,     0,   526,   460,   461,     0,   462,   463,   464,
     465,     0,     0,     0,     0,     0,   466,   467,   468,     0,
       0,     0,   469,   470,   471,   472,  3402,   473,   474,     0,
     475,   476,     0,   477,   478,     0,     0,   479,     0,     0,
     480,     0,   481,     0,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     487,   488,   489,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,   494,     0,   495,   496,   497,     0,   135,
     498,   136,   137,   138,   139,   140,     0,     0,   141,     0,
       0,     0,   142,     0,     0,   143,     0,   144,   145,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,   167,     0,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     195,   196,     0,   197,     0,     0,   198,     0,     0,   199,
       0,   200,     0,   201,     0,   202,     0,     0,     0,   203,
     204,   205,     0,     0,   206,     0,     0,     0,     0,   207,
     208,  1655,     0,     0,  4192,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,  1656,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
       0,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,  3399,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,  3400,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
     312,   313,     0,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   320,   321,     0,     0,   322,   323,     0,
     324,     0,   325,     0,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,     0,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
    3401,   343,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,     0,     0,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     414,   415,     0,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
     526,   460,   461,     0,   462,   463,   464,   465,     0,     0,
       0,     0,     0,   466,   467,   468,     0,     0,     0,   469,
     470,   471,   472,  3402,   473,   474,     0,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   487,   488,   489,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,   135,   498,   136,   137,
     138,   139,   140,     0,     0,   141,     0,     0,     0,   142,
       0,     0,   143,     0,   144,   145,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,   195,   196,     0,
     197,     0,     0,   198,     0,     0,   199,     0,   200,     0,
     201,     0,   202,     0,     0,     0,   203,   204,   205,     0,
       0,   206,     0,     0,     0,     0,   207,   208,  1655,     0,
       0,  4452,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
    1656,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,     0,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,  3399,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,  3400,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,   312,   313,     0,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     320,   321,     0,     0,   322,   323,     0,   324,     0,   325,
       0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,     0,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,  3401,   343,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,   392,     0,   393,   394,   395,
       0,     0,   396,     0,   397,     0,   398,   399,     0,   400,
     401,   402,     0,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   414,   415,     0,
       0,     0,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,   439,     0,     0,     0,   440,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,   526,   460,   461,
       0,   462,   463,   464,   465,     0,     0,     0,     0,     0,
     466,   467,   468,     0,     0,     0,   469,   470,   471,   472,
    3402,   473,   474,     0,   475,   476,     0,   477,   478,     0,
       0,   479,     0,     0,   480,     0,   481,     0,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,     0,     0,
     486,     0,     0,     0,   487,   488,   489,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,   494,     0,   495,
     496,   497,     0,   135,   498,   136,   137,   138,   139,   140,
       0,     0,   141,     0,     0,     0,   142,     0,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,  1433,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,   167,     0,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
       0,   192,   193,   194,   195,   196,     0,   197,     0,     0,
     198,     0,     0,   199,     0,   200,     0,   201,     0,   202,
       0,     0,     0,   203,   204,   205,     0,     0,   206,     0,
       0,     0,     0,   207,   208,     0,     0,     0,  1434,   209,
       0,   210,     0,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,  1435,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,     0,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   655,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,   312,   313,     0,   314,   315,     0,
       0,     0,     0,   316,   317,   318,   319,   320,   321,     0,
       0,   322,   323,     0,   324,     0,   325,     0,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,     0,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,     0,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,   373,   374,   375,   376,     0,   377,
     378,   379,     0,     0,   380,     0,     0,     0,   381,   382,
     383,   384,   385,     0,     0,   386,   387,   388,   389,   390,
       0,   391,   392,     0,   393,   394,   395,     0,     0,   396,
       0,   397,     0,   398,   399,     0,   400,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,   414,   415,     0,     0,     0,   416,
     417,   418,   419,     0,     0,  1436,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,   431,   432,   433,     0,     0,     0,     0,     0,
       0,   434,   435,     0,   436,     0,     0,   437,     0,     0,
     438,   439,     0,     0,     0,   440,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,   455,     0,   456,
     457,   458,   459,     0,   526,   460,   461,     0,   462,   463,
     464,   465,     0,     0,     0,     0,     0,   466,   467,   468,
       0,     0,     0,   469,   470,   471,   472,     0,   473,   474,
       0,   475,   476,     0,   477,   478,     0,     0,   479,     0,
       0,   480,     0,   481,     0,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   487,   488,   489,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,   494,     0,   495,   496,   497,     0,
     135,   498,   136,   137,   138,   139,   140,     0,     0,   141,
       0,     0,     0,   142,     0,     0,   143,     0,   144,   145,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
    1446,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   195,   196,     0,   197,     0,     0,   198,     0,     0,
     199,     0,   200,     0,   201,     0,   202,     0,     0,     0,
     203,   204,   205,     0,     0,   206,     0,     0,     0,     0,
     207,   208,     0,     0,     0,  1447,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,     0,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   655,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,   312,   313,     0,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   320,   321,     0,     0,   322,   323,
       0,   324,     0,   325,     0,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,     0,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,     0,     0,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   414,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,   526,   460,   461,     0,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   466,   467,   468,     0,     0,     0,
     469,   470,   471,   472,     0,   473,   474,     0,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,   135,   498,   136,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,     0,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,  1025,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
    1026,  1027,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,  1028,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,   135,   498,   136,   137,   138,   139,
     140,     0,     0,   141,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   195,   196,     0,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,   206,
       0,     0,     0,     0,   207,   208,     0,     0,     0,     0,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,  1971,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,     0,  1972,   343,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,   771,   356,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,     0,     0,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,     0,   403,   404,   405,  1973,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,     0,   469,   470,   471,   472,  1974,   473,
     474,     0,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,   135,   498,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,  1971,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,  1972,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,   771,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,  1974,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,   135,   498,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   143,     0,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,  1433,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,  1434,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,   655,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,   526,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,   135,   498,   136,   137,   138,
     139,   140,     0,     0,   141,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,   167,     0,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,   195,   196,     0,   197,
       0,     0,   198,     0,     0,   199,     0,   200,     0,   201,
       0,   202,     0,     0,     0,   203,   204,   205,     0,     0,
     206,     0,     0,     0,     0,   207,   208,     0,     0,     0,
       0,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,     0,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,  1971,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,   312,   313,     0,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   320,
     321,     0,     0,   322,   323,     0,   324,     0,   325,     0,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,     0,   337,   338,   339,   340,     0,
       0,     0,   341,   342,     0,     0,  1972,   343,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,   771,   356,     0,   357,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   377,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,   392,     0,   393,   394,   395,     0,
       0,   396,     0,   397,     0,   398,   399,     0,   400,   401,
     402,     0,     0,     0,   403,   404,   405,  3930,   407,   408,
     409,   410,   411,   412,   413,     0,   414,   415,     0,     0,
       0,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,   433,     0,     0,     0,
       0,     0,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,   439,     0,     0,     0,   440,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,     0,     0,     0,     0,     0,   466,
     467,   468,     0,     0,     0,   469,   470,   471,   472,  1974,
     473,   474,     0,   475,   476,     0,   477,   478,     0,     0,
     479,     0,     0,   480,     0,   481,     0,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,     0,     0,   486,
       0,     0,     0,   487,   488,   489,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,   494,     0,   495,   496,
     497,     0,   135,   498,   136,   137,   138,   139,   140,     0,
       0,   141,     0,     0,     0,   142,     0,     0,   143,     0,
     144,   145,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,     0,
     192,   193,   194,   195,   196,     0,   197,     0,     0,   198,
       0,     0,   199,     0,   200,  1048,   201,     0,   202,     0,
       0,     0,   203,   204,   205,     0,     0,   206,     0,     0,
       0,     0,   207,   208,     0,     0,     0,     0,   209,     0,
     210,     0,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,     0,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,   655,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,   312,   313,     0,   314,   315,     0,     0,
       0,     0,   316,   317,   318,   319,   320,   321,     0,     0,
     322,   323,     0,   324,     0,   325,     0,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,     0,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,     0,     0,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,     0,
     391,   392,     0,   393,   394,   395,     0,     0,   396,     0,
     397,     0,   398,   399,     0,   400,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,   414,   415,     0,     0,     0,   416,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
       0,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,   431,   432,   433,     0,     0,     0,     0,     0,     0,
     434,   435,     0,   436,     0,     0,   437,     0,     0,   438,
     439,     0,     0,     0,   440,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,   455,     0,   456,   457,
     458,   459,     0,   526,   460,   461,     0,   462,   463,   464,
     465,     0,     0,     0,     0,     0,   466,   467,   468,     0,
       0,     0,   469,   470,   471,   472,     0,   473,   474,     0,
     475,   476,     0,   477,   478,     0,     0,   479,     0,     0,
     480,     0,   481,     0,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     487,   488,   489,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,   494,     0,   495,   496,   497,     0,   135,
     498,   136,   137,   138,   139,   140,  1469,     0,   141,     0,
       0,     0,   142,     0,     0,   143,     0,   144,   145,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,   167,     0,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     195,   196,     0,   197,     0,     0,   198,     0,     0,   199,
       0,   200,     0,   201,     0,   202,     0,     0,     0,   203,
     204,   205,     0,     0,   206,     0,     0,     0,     0,   207,
     208,     0,     0,     0,     0,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
       0,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,   655,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
     312,   313,     0,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   320,   321,     0,     0,   322,   323,     0,
     324,     0,   325,     0,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,     0,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,     0,     0,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     414,   415,     0,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
     526,   460,   461,     0,   462,   463,   464,   465,     0,     0,
       0,     0,     0,   466,   467,   468,     0,     0,     0,   469,
     470,   471,   472,     0,   473,   474,     0,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   487,   488,   489,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,   135,   498,   136,   137,
     138,   139,   140,     0,     0,   141,     0,     0,     0,   142,
       0,     0,   143,     0,   144,   145,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,   195,   196,     0,
     197,     0,     0,   198,     0,     0,   199,     0,   200,     0,
     201,     0,   202,     0,     0,     0,   203,   204,   205,     0,
       0,   206,     0,     0,     0,     0,   207,   208,     0,     0,
       0,  2422,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,     0,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,   655,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,   312,   313,     0,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     320,   321,     0,     0,   322,   323,     0,   324,     0,   325,
       0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,     0,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,     0,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,   392,     0,   393,   394,   395,
       0,     0,   396,     0,   397,     0,   398,   399,     0,   400,
     401,   402,     0,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   414,   415,     0,
       0,     0,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,   439,     0,     0,     0,   440,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,   526,   460,   461,
       0,   462,   463,   464,   465,     0,     0,     0,     0,     0,
     466,   467,   468,     0,     0,     0,   469,   470,   471,   472,
       0,   473,   474,     0,   475,   476,     0,   477,   478,     0,
       0,   479,     0,     0,   480,     0,   481,     0,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,     0,     0,
     486,     0,     0,     0,   487,   488,   489,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,   494,     0,   495,
     496,   497,     0,   135,   498,   136,   137,   138,   139,   140,
       0,     0,   141,     0,     0,     0,   142,     0,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,  1433,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,   167,     0,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
       0,   192,   193,   194,   195,   196,     0,   197,     0,     0,
     198,     0,     0,   199,     0,   200,     0,   201,     0,   202,
       0,     0,     0,   203,   204,   205,     0,     0,   206,     0,
       0,     0,     0,   207,   208,     0,     0,     0,     0,   209,
       0,   210,     0,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,     0,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,   655,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,   312,   313,     0,   314,   315,     0,
       0,     0,     0,   316,   317,   318,   319,   320,   321,     0,
       0,   322,   323,     0,   324,     0,   325,     0,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,     0,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,     0,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,   373,   374,   375,   376,     0,   377,
     378,   379,     0,     0,   380,     0,     0,     0,   381,   382,
     383,   384,   385,     0,     0,   386,   387,   388,   389,   390,
       0,   391,   392,     0,   393,   394,   395,     0,     0,   396,
       0,   397,     0,   398,   399,     0,   400,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,   414,   415,     0,     0,     0,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,   431,   432,   433,     0,     0,     0,     0,     0,
       0,   434,   435,     0,   436,     0,     0,   437,     0,     0,
     438,   439,     0,     0,     0,   440,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,   455,     0,   456,
     457,   458,   459,     0,   526,   460,   461,     0,   462,   463,
     464,   465,     0,     0,     0,     0,     0,   466,   467,   468,
       0,     0,     0,   469,   470,   471,   472,     0,   473,   474,
       0,   475,   476,     0,   477,   478,     0,     0,   479,     0,
       0,   480,     0,   481,     0,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   487,   488,   489,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,   494,     0,   495,   496,   497,     0,
     135,   498,   136,   137,   138,   139,   140,     0,     0,   141,
       0,     0,     0,   142,     0,     0,   143,     0,   144,   145,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   195,   196,     0,   197,     0,     0,   198,     0,     0,
     199,     0,   200,     0,   201,     0,   202,     0,     0,     0,
     203,   204,   205,     0,     0,   206,     0,     0,     0,     0,
     207,   208,     0,     0,     0,     0,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,     0,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,   655,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,   312,   313,     0,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   320,   321,     0,     0,   322,   323,
       0,   324,     0,   325,     0,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,     0,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,     0,     0,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   414,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,   526,   460,   461,     0,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   466,   467,   468,     0,     0,     0,
     469,   470,   471,   472,     0,   473,   474,     0,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,   135,   498,   136,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,  2846,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,   526,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,   135,   498,   136,   137,   138,   139,
     140,     0,     0,   141,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   195,   196,  4562,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,   206,
       0,     0,     0,     0,   207,   208,     0,     0,     0,     0,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,     0,  4563,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,     0,     0,   343,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,     0,     0,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,     0,   469,   470,   471,   472,     0,   473,
     474,     0,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,   135,   498,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,   600,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,   135,   498,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   143,     0,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,  1130,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,   135,   498,   136,   137,   138,
     139,   140,     0,     0,   141,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,   167,     0,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,   195,   196,     0,   197,
       0,     0,   198,     0,     0,   199,     0,   200,     0,   201,
       0,   202,     0,     0,     0,   203,   204,   205,     0,     0,
     206,     0,     0,     0,     0,   207,   208,     0,     0,     0,
     951,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,   242,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,     0,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,   312,   313,     0,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   320,
     321,     0,     0,   322,   323,     0,   324,     0,   325,     0,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,     0,   337,   338,   339,   340,     0,
       0,     0,   341,   342,     0,     0,     0,   343,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   377,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,   392,     0,   393,   394,   395,     0,
       0,   396,     0,   397,     0,   398,   399,     0,   400,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   414,   415,     0,     0,
       0,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,   433,     0,     0,     0,
       0,     0,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,   439,     0,     0,     0,   440,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,     0,     0,     0,     0,     0,  1941,
     467,   468,     0,     0,     0,   469,   470,   471,   472,     0,
     473,   474,     0,   475,   476,     0,   477,   478,     0,     0,
     479,     0,     0,   480,     0,   481,     0,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,     0,     0,   486,
       0,     0,     0,   487,   488,   489,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,   494,     0,   495,   496,
     497,     0,   135,   498,   136,   137,   138,   139,   140,     0,
       0,   141,     0,     0,     0,   142,     0,     0,   143,     0,
     144,   145,   146,   147,   148,   149,   150,   151,     0,   152,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,   159,   160,     0,     0,
     161,     0,     0,   162,   163,     0,   164,   165,     0,   166,
     167,     0,   168,   169,   170,   171,   172,   173,   174,     0,
     175,   176,   177,   178,   179,   180,   181,     0,   182,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,     0,
     192,   193,   194,   195,   196,     0,   197,     0,     0,   198,
       0,     0,   199,     0,   200,     0,   201,     0,   202,     0,
       0,     0,   203,   204,   205,     0,     0,   206,     0,     0,
       0,     0,   207,   208,     0,     0,     0,  2089,   209,     0,
     210,     0,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,     0,   217,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,   222,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,   234,   235,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,   244,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,     0,   253,     0,   254,     0,     0,     0,
     255,   256,   257,     0,   258,     0,     0,     0,   259,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,   271,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,   278,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,   312,   313,     0,   314,   315,     0,     0,
       0,     0,   316,   317,   318,   319,   320,   321,     0,     0,
     322,   323,     0,   324,     0,   325,     0,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,     0,   337,   338,   339,   340,     0,     0,     0,   341,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,   350,     0,   351,   352,     0,     0,     0,
       0,     0,     0,     0,     0,   353,   354,   355,     0,     0,
     356,     0,   357,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,     0,     0,   368,   369,   370,     0,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,     0,     0,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,     0,
     391,   392,     0,   393,   394,   395,     0,     0,   396,     0,
     397,     0,   398,   399,     0,   400,   401,   402,     0,     0,
       0,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,     0,   414,   415,     0,     0,     0,   416,   417,
     418,   419,     0,     0,     0,   420,     0,     0,     0,   421,
       0,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     430,   431,   432,   433,     0,     0,     0,     0,     0,     0,
     434,   435,     0,   436,     0,     0,   437,     0,     0,   438,
     439,     0,     0,     0,   440,     0,     0,   441,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,   455,     0,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,     0,     0,     0,     0,     0,   466,   467,   468,     0,
       0,     0,   469,   470,   471,   472,     0,   473,   474,     0,
     475,   476,     0,   477,   478,     0,     0,   479,     0,     0,
     480,     0,   481,     0,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     487,   488,   489,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,   494,     0,   495,   496,   497,     0,   135,
     498,   136,   137,   138,   139,   140,     0,     0,   141,     0,
       0,     0,   142,     0,     0,   143,     0,   144,   145,   146,
     147,   148,   149,   150,   151,     0,   152,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,   159,   160,     0,     0,   161,     0,     0,
     162,   163,     0,   164,   165,     0,   166,   167,     0,   168,
     169,   170,   171,   172,   173,   174,     0,   175,   176,   177,
     178,   179,   180,   181,     0,   182,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
     195,   196,     0,   197,     0,     0,   198,     0,     0,   199,
       0,   200,     0,   201,     0,   202,     0,     0,     0,   203,
     204,   205,     0,     0,   206,     0,     0,     0,     0,   207,
     208,     0,     0,     0,   951,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,   217,     0,     0,   218,   219,   220,     0,     0,     0,
     221,     0,   222,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,   234,   235,
       0,     0,   236,   237,   238,     0,     0,   239,   240,     0,
     241,   242,   243,     0,     0,   244,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
       0,   253,     0,   254,     0,     0,     0,   255,   256,   257,
       0,   258,     0,     0,     0,   259,   260,     0,     0,     0,
     261,   262,   263,   264,     0,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,   271,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,     0,
       0,     0,   277,     0,     0,   278,   279,   280,     0,     0,
     281,     0,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,     0,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
     312,   313,     0,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   320,   321,     0,     0,   322,   323,     0,
     324,     0,   325,     0,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,     0,   337,
     338,   339,   340,     0,     0,     0,   341,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
     350,     0,   351,   352,     0,     0,     0,     0,     0,     0,
       0,     0,   353,   354,   355,     0,     0,   356,     0,   357,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,     0,     0,   368,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,   392,     0,
     393,   394,   395,     0,     0,   396,     0,   397,     0,   398,
     399,     0,   400,   401,   402,     0,     0,     0,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     414,   415,     0,     0,     0,   416,   417,   418,   419,     0,
       0,     0,   420,     0,     0,     0,   421,     0,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   430,   431,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,   439,     0,     0,
       0,   440,     0,     0,   441,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,     0,     0,
       0,     0,     0,   466,   467,   468,     0,     0,     0,   469,
     470,   471,   472,     0,   473,   474,     0,   475,   476,     0,
     477,   478,     0,     0,   479,     0,     0,   480,     0,   481,
       0,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   487,   488,   489,
     490,   491,   492,     0,     0,     0,     0,     0,     0,   493,
     494,     0,   495,   496,   497,     0,   135,   498,   136,   137,
     138,   139,   140,     0,     0,   141,     0,     0,     0,   142,
       0,     0,   143,     0,   144,   145,   146,   147,   148,   149,
     150,   151,     0,   152,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
     159,   160,     0,     0,   161,     0,     0,   162,   163,     0,
     164,   165,     0,   166,   167,     0,   168,   169,   170,   171,
     172,   173,   174,     0,   175,   176,   177,   178,   179,   180,
     181,     0,   182,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,   195,   196,     0,
     197,     0,     0,   198,     0,     0,   199,     0,   200,     0,
     201,     0,   202,     0,     0,     0,   203,   204,   205,     0,
       0,   206,     0,     0,     0,     0,   207,   208,     0,     0,
       0,     0,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,   217,     0,
       0,   218,   219,   220,     0,     0,     0,   221,     0,   222,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,   234,   235,     0,     0,   236,
     237,   238,     0,     0,   239,   240,     0,   241,   242,   243,
       0,     0,   244,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,     0,   253,     0,
     254,     0,     0,     0,   255,   256,   257,     0,   258,     0,
       0,     0,   259,   260,     0,     0,     0,   261,   262,   263,
     264,     0,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,   271,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,     0,     0,     0,   277,
       0,     0,   278,   279,   280,     0,     0,   281,     0,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
       0,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,   312,   313,     0,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     320,   321,     0,     0,   322,   323,     0,   324,     0,   325,
       0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,     0,   337,   338,   339,   340,
       0,     0,     0,   341,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,   350,     0,   351,
     352,     0,     0,     0,     0,     0,     0,     0,     0,   353,
     354,   355,     0,     0,   356,     0,   357,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,     0,     0,
     368,   369,   370,  3024,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,   392,     0,   393,   394,   395,
       0,     0,   396,     0,   397,     0,   398,   399,     0,   400,
     401,   402,     0,     0,     0,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   414,   415,     0,
       0,     0,   416,   417,   418,   419,     0,     0,     0,   420,
       0,     0,     0,   421,     0,   422,   423,   424,   425,   426,
     427,     0,   428,   429,   430,   431,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,   439,     0,     0,     0,   440,     0,
       0,   441,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,     0,     0,     0,     0,     0,
     466,   467,   468,     0,     0,     0,   469,   470,   471,   472,
       0,   473,   474,     0,   475,   476,     0,   477,   478,     0,
       0,   479,     0,     0,   480,     0,   481,     0,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,     0,     0,
     486,     0,     0,     0,   487,   488,   489,   490,   491,   492,
       0,     0,     0,     0,     0,     0,   493,   494,     0,   495,
     496,   497,     0,   135,   498,   136,   137,   138,   139,   140,
       0,     0,   141,     0,     0,     0,   142,     0,     0,   143,
       0,   144,   145,   146,   147,   148,   149,   150,   151,     0,
     152,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,   159,   160,     0,
       0,   161,     0,     0,   162,   163,     0,   164,   165,     0,
     166,   167,     0,   168,   169,   170,   171,   172,   173,   174,
       0,   175,   176,   177,   178,   179,   180,   181,     0,   182,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
       0,   192,   193,   194,   195,   196,     0,   197,     0,     0,
     198,     0,     0,   199,     0,   200,     0,   201,     0,   202,
       0,     0,     0,   203,   204,   205,     0,     0,   206,     0,
       0,     0,     0,   207,   208,     0,     0,     0,     0,   209,
       0,   210,     0,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,     0,   217,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,   222,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,   234,   235,     0,     0,   236,   237,   238,     0,
       0,   239,   240,     0,   241,   242,   243,     0,     0,   244,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,     0,   253,     0,   254,     0,     0,
       0,   255,   256,   257,     0,   258,     0,     0,     0,   259,
     260,     0,     0,     0,   261,   262,   263,   264,     0,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,   271,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,     0,     0,     0,   277,     0,     0,   278,
     279,   280,     0,     0,   281,     0,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,     0,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,   312,   313,     0,   314,   315,     0,
       0,     0,     0,   316,   317,   318,   319,   320,   321,     0,
       0,   322,   323,     0,   324,     0,   325,     0,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,     0,   337,   338,   339,   340,     0,     0,     0,
     341,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,   350,     0,   351,   352,     0,     0,
       0,     0,     0,     0,     0,     0,   353,   354,   355,     0,
       0,   356,     0,   357,     0,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,     0,     0,   368,   369,   370,
       0,   371,     0,   372,   373,   374,   375,   376,     0,   377,
     378,   379,     0,     0,   380,     0,     0,     0,   381,   382,
     383,   384,   385,     0,     0,   386,   387,   388,   389,   390,
       0,   391,   392,     0,   393,   394,   395,     0,     0,   396,
       0,   397,     0,   398,   399,     0,   400,   401,   402,     0,
       0,     0,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,   414,   415,     0,     0,     0,   416,
     417,   418,   419,     0,     0,     0,   420,     0,     0,     0,
     421,     0,   422,   423,   424,   425,   426,   427,     0,   428,
     429,   430,   431,   432,   433,     0,     0,     0,     0,     0,
       0,   434,   435,     0,   436,     0,     0,   437,     0,     0,
     438,   439,     0,     0,     0,   440,     0,     0,   441,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,   455,     0,   456,
     457,   458,   459,     0,   526,   460,   461,     0,   462,   463,
     464,   465,     0,     0,     0,     0,     0,   466,   467,   468,
       0,     0,     0,   469,   470,   471,   472,     0,   473,   474,
       0,   475,   476,     0,   477,   478,     0,     0,   479,     0,
       0,   480,     0,   481,     0,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   487,   488,   489,   490,   491,   492,     0,     0,     0,
       0,     0,     0,   493,   494,     0,   495,   496,   497,     0,
     135,   498,   136,   137,   138,   139,   140,     0,     0,   141,
       0,     0,     0,   142,     0,     0,   143,     0,   144,   145,
     146,   147,   148,   149,   150,   151,     0,   152,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,   159,   160,     0,     0,   161,     0,
       0,   162,   163,     0,   164,   165,     0,   166,   167,     0,
     168,   169,   170,   171,   172,   173,   174,     0,   175,   176,
     177,   178,   179,   180,   181,     0,   182,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,   195,   196,     0,   197,     0,     0,   198,     0,     0,
     199,     0,   200,     0,   201,     0,   202,     0,     0,     0,
     203,   204,   205,     0,     0,   206,     0,     0,     0,     0,
     207,   208,     0,     0,     0,  3314,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,   217,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,   222,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,   234,
     235,     0,     0,   236,   237,   238,     0,     0,   239,   240,
       0,   241,   242,   243,     0,     0,   244,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,     0,   253,     0,   254,     0,     0,     0,   255,   256,
     257,     0,   258,     0,     0,     0,   259,   260,     0,     0,
       0,   261,   262,   263,   264,     0,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,   271,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
       0,     0,     0,   277,     0,     0,   278,   279,   280,     0,
       0,   281,     0,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,     0,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,   312,   313,     0,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   320,   321,     0,     0,   322,   323,
       0,   324,     0,   325,     0,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,     0,
     337,   338,   339,   340,     0,     0,     0,   341,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,   350,     0,   351,   352,     0,     0,     0,     0,     0,
       0,     0,     0,   353,   354,   355,     0,     0,   356,     0,
     357,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,     0,     0,   368,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,   392,
       0,   393,   394,   395,     0,     0,   396,     0,   397,     0,
     398,   399,     0,   400,   401,   402,     0,     0,     0,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   414,   415,     0,     0,     0,   416,   417,   418,   419,
       0,     0,     0,   420,     0,     0,     0,   421,     0,   422,
     423,   424,   425,   426,   427,     0,   428,   429,   430,   431,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,   439,     0,
       0,     0,   440,     0,     0,   441,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   466,   467,   468,     0,     0,     0,
     469,   470,   471,   472,     0,   473,   474,     0,   475,   476,
       0,   477,   478,     0,     0,   479,     0,     0,   480,     0,
     481,     0,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   487,   488,
     489,   490,   491,   492,     0,     0,     0,     0,     0,     0,
     493,   494,     0,   495,   496,   497,     0,   135,   498,   136,
     137,   138,   139,   140,  3322,     0,   141,     0,     0,     0,
     142,     0,     0,   143,     0,   144,   145,   146,   147,   148,
     149,   150,   151,     0,   152,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,   159,   160,     0,     0,   161,     0,     0,   162,   163,
       0,   164,   165,     0,   166,   167,     0,   168,   169,   170,
     171,   172,   173,   174,     0,   175,   176,   177,   178,   179,
     180,   181,     0,   182,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,   195,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,   208,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,   217,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
     222,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,   234,   235,     0,     0,
     236,   237,   238,     0,     0,   239,   240,     0,   241,   242,
     243,     0,     0,   244,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,   255,   256,   257,     0,   258,
       0,     0,     0,   259,   260,     0,     0,     0,   261,   262,
     263,   264,     0,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,   271,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,     0,     0,     0,
     277,     0,     0,   278,   279,   280,     0,     0,   281,     0,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,     0,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,   341,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,   350,     0,
     351,   352,     0,     0,     0,     0,     0,     0,     0,     0,
     353,   354,   355,     0,     0,   356,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,     0,
       0,   368,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,   392,     0,   393,   394,
     395,     0,     0,   396,     0,   397,     0,   398,   399,     0,
     400,   401,   402,     0,     0,     0,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,     0,   414,   415,
       0,     0,     0,   416,   417,   418,   419,     0,     0,     0,
     420,     0,     0,     0,   421,     0,   422,   423,   424,   425,
     426,   427,     0,   428,   429,   430,   431,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,   439,     0,     0,     0,   440,
       0,     0,   441,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,   469,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,   477,   478,
       0,     0,   479,     0,     0,   480,     0,   481,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,     0,     0,     0,     0,   493,   494,     0,
     495,   496,   497,     0,   135,   498,   136,   137,   138,   139,
     140,     0,     0,   141,     0,     0,     0,   142,     0,     0,
     143,     0,   144,   145,   146,   147,   148,   149,   150,   151,
       0,   152,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,   159,   160,
       0,     0,   161,     0,     0,   162,   163,     0,   164,   165,
       0,   166,   167,     0,   168,   169,   170,   171,   172,   173,
     174,     0,   175,   176,   177,   178,   179,   180,   181,     0,
     182,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,   195,   196,     0,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,   206,
       0,     0,     0,     0,   207,   208,     0,     0,     0,  3346,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,   217,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,   222,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,   234,   235,     0,     0,   236,   237,   238,
       0,     0,   239,   240,     0,   241,   242,   243,     0,     0,
     244,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,   255,   256,   257,     0,   258,     0,     0,     0,
     259,   260,     0,     0,     0,   261,   262,   263,   264,     0,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,   271,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,     0,     0,     0,   277,     0,     0,
     278,   279,   280,     0,     0,   281,     0,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,     0,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,   341,   342,     0,     0,     0,   343,     0,   344,   345,
     346,     0,   347,   348,   349,   350,     0,   351,   352,     0,
       0,     0,     0,     0,     0,     0,     0,   353,   354,   355,
       0,     0,   356,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,     0,     0,   368,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,   392,     0,   393,   394,   395,     0,     0,
     396,     0,   397,     0,   398,   399,     0,   400,   401,   402,
       0,     0,     0,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   414,   415,     0,     0,     0,
     416,   417,   418,   419,     0,     0,     0,   420,     0,     0,
       0,   421,     0,   422,   423,   424,   425,   426,   427,     0,
     428,   429,   430,   431,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,   439,     0,     0,     0,   440,     0,     0,   441,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,     0,   469,   470,   471,   472,     0,   473,
     474,     0,   475,   476,     0,   477,   478,     0,     0,   479,
       0,     0,   480,     0,   481,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
       0,     0,     0,     0,   493,   494,     0,   495,   496,   497,
       0,   135,   498,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,   143,     0,   144,
     145,   146,   147,   148,   149,   150,   151,     0,   152,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,   159,   160,     0,     0,   161,
       0,     0,   162,   163,     0,   164,   165,     0,   166,   167,
       0,   168,   169,   170,   171,   172,   173,   174,     0,   175,
     176,   177,   178,   179,   180,   181,     0,   182,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,   195,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,   208,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,   217,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,   222,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
     234,   235,     0,     0,   236,   237,   238,     0,     0,   239,
     240,     0,   241,   242,   243,     0,     0,   244,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,   255,
     256,   257,     0,   258,     0,     0,     0,   259,   260,     0,
       0,     0,   261,   262,   263,   264,     0,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
     271,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,     0,     0,     0,   277,     0,     0,   278,   279,   280,
       0,     0,   281,     0,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,     0,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,   341,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,   350,     0,   351,   352,     0,     0,     0,     0,
       0,     0,     0,     0,   353,   354,   355,     0,     0,   356,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,     0,     0,   368,   369,   370,  4223,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
     392,     0,   393,   394,   395,     0,     0,   396,     0,   397,
       0,   398,   399,     0,   400,   401,   402,     0,     0,     0,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   414,   415,     0,     0,     0,   416,   417,   418,
     419,     0,     0,     0,   420,     0,     0,     0,   421,     0,
     422,   423,   424,   425,   426,   427,     0,   428,   429,   430,
     431,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,   439,
       0,     0,     0,   440,     0,     0,   441,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,   469,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,   477,   478,     0,     0,   479,     0,     0,   480,
       0,   481,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,     0,     0,     0,
       0,   493,   494,     0,   495,   496,   497,     0,   135,   498,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,   143,     0,   144,   145,   146,   147,
     148,   149,   150,   151,     0,   152,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,   159,   160,     0,     0,   161,     0,     0,   162,
     163,     0,   164,   165,     0,   166,   167,     0,   168,   169,
     170,   171,   172,   173,   174,     0,   175,   176,   177,   178,
     179,   180,   181,     0,   182,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,   195,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,   208,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
     217,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,   222,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,   234,   235,     0,
       0,   236,   237,   238,     0,     0,   239,   240,     0,   241,
     242,   243,     0,     0,   244,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,   255,   256,   257,     0,
     258,     0,     0,     0,   259,   260,     0,     0,     0,   261,
     262,   263,   264,     0,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,   271,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,     0,     0,
       0,   277,     0,     0,   278,   279,   280,     0,     0,   281,
       0,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,     0,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,   341,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,   350,
       0,   351,   352,     0,     0,     0,     0,     0,     0,     0,
       0,   353,   354,   355,     0,     0,   356,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
       0,     0,   368,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,   392,     0,   393,
     394,   395,     0,     0,   396,     0,   397,     0,   398,   399,
       0,   400,   401,   402,     0,     0,     0,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   414,
     415,     0,     0,     0,   416,   417,   418,   419,     0,     0,
       0,   420,     0,     0,     0,   421,     0,   422,   423,   424,
     425,   426,   427,     0,   428,   429,   430,   431,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,   439,     0,     0,     0,
     440,     0,     0,   441,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,   469,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,   477,
     478,     0,     0,   479,     0,     0,   480,     0,   481,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,     0,     0,     0,     0,   493,   494,
       0,   495,   496,   497,     0,   135,   498,   136,   137,   138,
     139,   140,     0,     0,   141,     0,     0,     0,   142,     0,
       0,   143,     0,   144,   145,   146,   147,   148,   149,   150,
     151,     0,   152,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,   159,
     160,     0,     0,   161,     0,     0,   162,   163,     0,   164,
     165,     0,   166,   167,     0,   168,   169,   170,   171,   172,
     173,   174,     0,   175,   176,   177,   178,   179,   180,   181,
       0,   182,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,   195,   196,     0,   197,
       0,     0,   198,     0,     0,   199,     0,   200,     0,   201,
       0,   202,     0,     0,     0,   203,   204,   205,     0,     0,
     206,     0,     0,     0,     0,   207,   208,     0,     0,     0,
       0,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,   217,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,   222,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,   234,   235,     0,     0,   236,   237,
     238,     0,     0,   239,   240,     0,   241,  1861,   243,     0,
       0,   244,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,     0,   253,     0,   254,
       0,     0,     0,   255,   256,   257,     0,   258,     0,     0,
       0,   259,   260,     0,     0,     0,   261,   262,   263,   264,
       0,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,   271,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,     0,     0,     0,   277,     0,
       0,   278,   279,   280,     0,     0,   281,     0,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,     0,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,   312,   313,     0,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   320,
     321,     0,     0,   322,   323,     0,   324,     0,   325,     0,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,     0,   337,  1862,   339,   340,     0,
       0,     0,   341,   342,     0,     0,     0,   343,     0,   344,
     345,   346,     0,   347,   348,   349,   350,     0,   351,   352,
       0,     0,     0,     0,     0,     0,     0,     0,   353,   354,
     355,     0,     0,   356,     0,   357,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,     0,     0,   368,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   377,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,   392,     0,   393,   394,   395,     0,
       0,   396,     0,   397,     0,   398,   399,     0,   400,   401,
     402,     0,     0,     0,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   414,   415,     0,     0,
       0,   416,   417,   418,   419,     0,     0,     0,   420,     0,
       0,     0,   421,     0,   422,   423,   424,   425,   426,   427,
       0,   428,   429,   430,   431,   432,   433,     0,     0,     0,
       0,     0,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,   439,     0,     0,     0,   440,     0,     0,
     441,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,     0,     0,     0,     0,     0,   466,
     467,   468,     0,     0,     0,   469,   470,   471,   472,     0,
     473,   474,     0,   475,   476,     0,   477,   478,     0,     0,
     479,     0,     0,   480,     0,   481,     0,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,     0,     0,   486,
       0,     0,     0,   487,   488,   489,   490,   491,   492,     0,
       0,     0,     0,     0,     0,   493,   494,     0,   495,   496,
     497,     0,   135,   498,   136,   137,   138,   139,   140,     0,
       0,   141,     0,     0,     0,   142,     0,     0,     0,     0,
     144,   145,   146,   147,   148,   149,   150,     0,     0,  -378,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,  4054,     0,   162,   163,     0,   164,     0,     0,     0,
       0,     0,   168,   169,   170,   171,  4055,   173,   174,     0,
     175,   176,     0,     0,     0,     0,     0,     0,   182,     0,
     184,     0,   186,   187,   188,   189,     0,   190,   191,     0,
     192,   193,   194,     0,   196,     0,   197,     0,     0,   198,
       0,     0,   199,     0,   200,     0,   201,     0,   202,     0,
       0,     0,   203,   204,   205,     0,     0,   206,     0,     0,
       0,     0,   207,     0,     0,     0,     0,     0,   209,     0,
     210,     0,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,     0,     0,     0,     0,   218,   219,   220,
       0,  -348,  -348,   221,     0,  -348,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,  4056,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,     0,   253,     0,   254,     0,     0,     0,
       0,   256,   257,     0,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,  4057,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,  4058,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,  4059,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,  -333,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,   312,   313,     0,   314,   315,     0,     0,
       0,     0,   316,   317,   318,   319,   320,   321,     0,     0,
     322,   323,     0,   324,     0,   325,     0,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,     0,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,  4060,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   354,   355,     0,     0,
       0,     0,   357,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,     0,     0,   369,   370,     0,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,     0,     0,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,     0,
     391,     0,     0,   393,     0,   395,  -333,     0,   396,     0,
       0,     0,   398,     0,     0,   400,   401,   402,  4061,     0,
       0,     0,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,     0,   414,     0,     0,     0,     0,   416,   417,
     418,     0,     0,     0,     0,   420,     0,     0,     0,   421,
       0,     0,   423,     0,     0,   426,   427,     0,   428,     0,
     430,     0,   432,   433,     0,     0,     0,     0,     0,     0,
     434,   435,     0,   436,     0,     0,   437,     0,     0,   438,
       0,     0,     0,     0,   440,     0,     0,     0,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,   455,     0,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,     0,     0,     0,     0,     0,   466,   467,   468,     0,
       0,     0,     0,   470,   471,   472,     0,   473,   474,     0,
     475,   476,     0,     0,     0,     0,     0,   479,     0,     0,
     480,     0,     0,     0,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     487,   488,   489,   490,   491,   492,     0,     0,  -333,     0,
       0,     0,   493,     0,     0,   495,     0,   497,     0,   135,
     498,   136,   137,   138,   139,   140,     0,     0,   141,     0,
       0,     0,   142,     0,     0,     0,     0,   144,   145,   146,
     147,   148,   149,   150,     0,     0,  -378,     0,     0,     0,
     153,     0,     0,     0,   154,     0,     0,   155,   156,   157,
       0,   158,     0,     0,     0,     0,     0,   161,  4054,     0,
     162,   163,     0,   164,     0,     0,     0,     0,     0,   168,
     169,   170,   171,  4055,   173,   174,     0,   175,   176,     0,
       0,     0,     0,     0,     0,   182,     0,   184,     0,   186,
     187,   188,   189,     0,   190,   191,     0,   192,   193,   194,
       0,   196,     0,   197,     0,     0,   198,     0,     0,   199,
       0,   200,     0,   201,     0,   202,     0,     0,     0,   203,
     204,   205,     0,     0,   206,     0,     0,     0,     0,   207,
       0,     0,     0,     0,     0,   209,     0,   210,     0,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
       0,     0,     0,     0,   218,   219,   220,     0,  -369,     0,
     221,     0,  -369,   223,     0,   224,   225,   226,     0,     0,
     227,   228,     0,   229,   230,   231,   232,   233,     0,     0,
       0,     0,   236,   237,   238,     0,     0,   239,   240,  4056,
     241,   242,   243,     0,     0,     0,     0,     0,     0,   245,
       0,   246,     0,   247,     0,   248,   249,   250,   251,   252,
       0,   253,     0,   254,     0,     0,     0,     0,   256,   257,
       0,     0,     0,     0,     0,     0,   260,     0,     0,     0,
     261,   262,   263,   264,  4057,     0,   265,   266,   267,     0,
     268,     0,   269,     0,     0,     0,     0,   270,     0,     0,
       0,     0,   272,     0,   273,   274,     0,   275,   276,  4058,
       0,     0,   277,     0,     0,     0,   279,   280,     0,     0,
     281,  4059,     0,   282,   283,     0,     0,     0,     0,     0,
     284,   285,     0,   286,     0,   287,     0,   288,   289,     0,
       0,     0,     0,  -333,     0,     0,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,     0,   306,   307,   308,   309,     0,   310,   311,
     312,   313,     0,   314,   315,     0,     0,     0,     0,   316,
     317,   318,   319,   320,   321,     0,     0,   322,   323,     0,
     324,     0,   325,     0,   326,   327,   328,   329,   330,   331,
     332,   333,   334,     0,     0,   335,   336,     0,     0,   337,
     338,   339,   340,     0,     0,     0,     0,   342,     0,     0,
       0,   343,     0,   344,   345,   346,     0,   347,   348,   349,
    4060,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   354,   355,     0,     0,     0,     0,   357,
       0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
       0,     0,     0,     0,   369,   370,     0,   371,     0,   372,
     373,   374,   375,   376,     0,   377,   378,   379,     0,     0,
     380,     0,     0,     0,   381,   382,   383,   384,   385,     0,
       0,   386,   387,   388,   389,   390,     0,   391,     0,     0,
     393,     0,   395,  -333,     0,   396,     0,     0,     0,   398,
       0,     0,   400,   401,   402,  4061,     0,     0,     0,   404,
     405,   406,   407,   408,   409,   410,     0,   412,   413,     0,
     414,     0,     0,     0,     0,   416,   417,   418,     0,     0,
       0,     0,   420,     0,     0,     0,   421,     0,     0,   423,
       0,     0,   426,   427,     0,   428,     0,   430,     0,   432,
     433,     0,     0,     0,     0,     0,     0,   434,   435,     0,
     436,     0,     0,   437,     0,     0,   438,     0,     0,     0,
       0,   440,     0,     0,     0,   442,     0,   443,   444,   445,
     446,   447,   448,     0,     0,   449,   450,   451,   452,     0,
     453,   454,     0,   455,     0,   456,   457,   458,   459,     0,
       0,   460,   461,     0,   462,   463,   464,   465,     0,     0,
       0,     0,     0,   466,   467,   468,     0,     0,     0,     0,
     470,   471,   472,     0,   473,   474,     0,   475,   476,     0,
       0,     0,     0,     0,   479,     0,     0,   480,     0,     0,
       0,   482,   483,   484,     0,     0,     0,     0,     0,     0,
     485,     0,     0,   486,     0,     0,     0,   487,   488,   489,
     490,   491,   492,  -369,     0,  -333,     0,     0,     0,   493,
       0,     0,   495,     0,   497,     0,   135,   498,   136,   137,
     138,   139,   140,     0,     0,   141,     0,     0,     0,   142,
       0,     0,     0,     0,   144,   145,   146,   147,   148,   149,
     150,     0,     0,  -378,     0,     0,     0,   153,     0,     0,
       0,   154,     0,     0,   155,   156,   157,     0,   158,     0,
       0,     0,     0,     0,   161,  4054,     0,   162,   163,     0,
     164,     0,     0,     0,     0,     0,   168,   169,   170,   171,
    4055,   173,   174,     0,   175,   176,     0,     0,     0,     0,
       0,     0,   182,     0,   184,     0,   186,   187,   188,   189,
       0,   190,   191,     0,   192,   193,   194,     0,   196,     0,
     197,     0,     0,   198,     0,     0,   199,     0,   200,     0,
     201,     0,   202,     0,     0,     0,   203,   204,   205,     0,
       0,   206,     0,     0,     0,     0,   207,     0,     0,     0,
       0,     0,   209,     0,   210,     0,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,     0,     0,     0,
       0,   218,   219,   220,     0,  -366,     0,   221,     0,  -366,
     223,     0,   224,   225,   226,     0,     0,   227,   228,     0,
     229,   230,   231,   232,   233,     0,     0,     0,     0,   236,
     237,   238,     0,     0,   239,   240,  4056,   241,   242,   243,
       0,     0,     0,     0,     0,     0,   245,     0,   246,     0,
     247,     0,   248,   249,   250,   251,   252,     0,   253,     0,
     254,     0,     0,     0,     0,   256,   257,     0,     0,     0,
       0,     0,     0,   260,     0,     0,     0,   261,   262,   263,
     264,  4057,     0,   265,   266,   267,     0,   268,     0,   269,
       0,     0,     0,     0,   270,     0,     0,     0,     0,   272,
       0,   273,   274,     0,   275,   276,  4058,     0,     0,   277,
       0,     0,     0,   279,   280,     0,     0,   281,  4059,     0,
     282,   283,     0,     0,     0,     0,     0,   284,   285,     0,
     286,     0,   287,     0,   288,   289,     0,     0,     0,     0,
    -333,     0,     0,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,     0,
     306,   307,   308,   309,     0,   310,   311,   312,   313,     0,
     314,   315,     0,     0,     0,     0,   316,   317,   318,   319,
     320,   321,     0,     0,   322,   323,     0,   324,     0,   325,
       0,   326,   327,   328,   329,   330,   331,   332,   333,   334,
       0,     0,   335,   336,     0,     0,   337,   338,   339,   340,
       0,     0,     0,     0,   342,     0,     0,     0,   343,     0,
     344,   345,   346,     0,   347,   348,   349,  4060,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     354,   355,     0,     0,     0,     0,   357,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,     0,     0,     0,
       0,   369,   370,     0,   371,     0,   372,   373,   374,   375,
     376,     0,   377,   378,   379,     0,     0,   380,     0,     0,
       0,   381,   382,   383,   384,   385,     0,     0,   386,   387,
     388,   389,   390,     0,   391,     0,     0,   393,     0,   395,
    -333,     0,   396,     0,     0,     0,   398,     0,     0,   400,
     401,   402,  4061,     0,     0,     0,   404,   405,   406,   407,
     408,   409,   410,     0,   412,   413,     0,   414,     0,     0,
       0,     0,   416,   417,   418,     0,     0,     0,     0,   420,
       0,     0,     0,   421,     0,     0,   423,     0,     0,   426,
     427,     0,   428,     0,   430,     0,   432,   433,     0,     0,
       0,     0,     0,     0,   434,   435,     0,   436,     0,     0,
     437,     0,     0,   438,     0,     0,     0,     0,   440,     0,
       0,     0,   442,     0,   443,   444,   445,   446,   447,   448,
       0,     0,   449,   450,   451,   452,     0,   453,   454,     0,
     455,     0,   456,   457,   458,   459,     0,     0,   460,   461,
       0,   462,   463,   464,   465,     0,     0,     0,     0,     0,
     466,   467,   468,     0,     0,     0,     0,   470,   471,   472,
       0,   473,   474,     0,   475,   476,     0,     0,     0,     0,
       0,   479,     0,     0,   480,     0,     0,     0,   482,   483,
     484,     0,     0,     0,     0,     0,     0,   485,     0,     0,
     486,     0,     0,     0,   487,   488,   489,   490,   491,   492,
    -366,     0,  -333,     0,     0,     0,   493,     0,     0,   495,
       0,   497,     0,   135,   498,   136,   137,   138,   139,   140,
       0,     0,   141,     0,     0,     0,   142,     0,     0,     0,
       0,   144,   145,   146,   147,   148,   149,   150,     0,     0,
    -378,     0,     0,     0,   153,     0,     0,     0,   154,     0,
       0,   155,   156,   157,     0,   158,     0,     0,     0,     0,
       0,   161,  4054,     0,   162,   163,     0,   164,     0,     0,
       0,     0,     0,   168,   169,   170,   171,  4055,   173,   174,
       0,   175,   176,     0,     0,     0,     0,     0,     0,   182,
       0,   184,     0,   186,   187,   188,   189,     0,   190,   191,
       0,   192,   193,   194,     0,   196,     0,   197,     0,     0,
     198,     0,     0,   199,     0,   200,     0,   201,     0,   202,
       0,     0,     0,   203,   204,   205,     0,     0,   206,     0,
       0,     0,     0,   207,     0,     0,     0,     0,     0,   209,
       0,   210,     0,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,     0,     0,     0,     0,   218,   219,
     220,     0,     0,     0,   221,     0,  4431,   223,     0,   224,
     225,   226,     0,     0,   227,   228,     0,   229,   230,   231,
     232,   233,     0,     0,     0,     0,   236,   237,   238,     0,
       0,   239,   240,  4056,   241,   242,   243,     0,     0,     0,
       0,     0,     0,   245,     0,   246,     0,   247,     0,   248,
     249,   250,   251,   252,     0,   253,     0,   254,     0,     0,
       0,     0,   256,   257,     0,     0,     0,     0,     0,     0,
     260,     0,     0,     0,   261,   262,   263,   264,  4057,     0,
     265,   266,   267,     0,   268,     0,   269,     0,     0,     0,
       0,   270,     0,     0,     0,     0,   272,     0,   273,   274,
       0,   275,   276,  4058,     0,     0,   277,     0,     0,     0,
     279,   280,     0,     0,   281,  4059,     0,   282,   283,     0,
       0,     0,     0,     0,   284,   285,     0,   286,     0,   287,
       0,   288,   289,     0,     0,     0,     0,  -333,     0,     0,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,     0,   306,   307,   308,
     309,     0,   310,   311,   312,   313,     0,   314,   315,     0,
       0,     0,     0,   316,   317,   318,   319,   320,   321,     0,
       0,   322,   323,     0,   324,     0,   325,     0,   326,   327,
     328,   329,   330,   331,   332,   333,   334,     0,     0,   335,
     336,     0,     0,   337,   338,   339,   340,     0,     0,     0,
       0,   342,     0,     0,     0,   343,     0,   344,   345,   346,
       0,   347,   348,   349,  4060,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   354,   355,     0,
       0,     0,     0,   357,     0,   358,   359,   360,   361,   362,
     363,   364,   365,   366,     0,     0,     0,     0,   369,   370,
       0,   371,     0,   372,   373,   374,   375,   376,     0,   377,
     378,   379,     0,     0,   380,     0,     0,     0,   381,   382,
     383,   384,   385,     0,     0,   386,   387,   388,   389,   390,
       0,   391,     0,     0,   393,     0,   395,  -333,     0,   396,
       0,     0,     0,   398,     0,     0,   400,   401,   402,  4061,
       0,     0,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   412,   413,     0,   414,     0,     0,     0,     0,   416,
     417,   418,     0,     0,     0,     0,   420,     0,     0,     0,
     421,     0,     0,   423,     0,     0,   426,   427,     0,   428,
       0,   430,     0,   432,   433,     0,     0,     0,     0,     0,
       0,   434,   435,     0,   436,     0,     0,   437,     0,     0,
     438,     0,     0,     0,     0,   440,     0,     0,     0,   442,
       0,   443,   444,   445,   446,   447,   448,     0,     0,   449,
     450,   451,   452,     0,   453,   454,     0,   455,     0,   456,
     457,   458,   459,     0,     0,   460,   461,     0,   462,   463,
     464,   465,     0,     0,     0,     0,     0,   466,   467,   468,
       0,     0,     0,     0,   470,   471,   472,     0,   473,   474,
       0,   475,   476,     0,     0,     0,     0,     0,   479,     0,
       0,   480,     0,     0,     0,   482,   483,   484,     0,     0,
       0,     0,     0,     0,   485,     0,     0,   486,     0,     0,
       0,   487,   488,   489,   490,   491,   492,     0,     0,  -333,
       0,     0,     0,   493,     0,     0,   495,     0,   497,     0,
     135,   498,   136,   137,   138,   139,   140,     0,     0,   141,
       0,     0,     0,   142,     0,     0,     0,     0,   144,   145,
     146,   147,   148,   149,   150,     0,     0,  -378,     0,     0,
       0,   153,     0,     0,     0,   154,     0,     0,   155,   156,
     157,     0,   158,     0,     0,     0,     0,     0,   161,  4054,
       0,   162,   163,     0,   164,     0,     0,     0,     0,     0,
     168,   169,   170,   171,  4055,   173,   174,     0,   175,   176,
       0,     0,     0,     0,     0,     0,   182,     0,   184,     0,
     186,   187,   188,   189,     0,   190,   191,     0,   192,   193,
     194,     0,   196,     0,   197,     0,     0,   198,     0,     0,
     199,     0,   200,     0,   201,     0,   202,     0,     0,     0,
     203,   204,   205,     0,     0,   206,     0,     0,     0,     0,
     207,     0,     0,     0,     0,     0,   209,     0,   210,     0,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,     0,     0,     0,     0,   218,   219,   220,     0,     0,
       0,   221,     0,  -371,   223,     0,   224,   225,   226,     0,
       0,   227,   228,     0,   229,   230,   231,   232,   233,     0,
       0,     0,     0,   236,   237,   238,     0,     0,   239,   240,
    4056,   241,   242,   243,     0,     0,     0,     0,     0,     0,
     245,     0,   246,     0,   247,     0,   248,   249,   250,   251,
     252,     0,   253,     0,   254,     0,     0,     0,     0,   256,
     257,     0,     0,     0,     0,     0,     0,   260,     0,     0,
       0,   261,   262,   263,   264,  4057,     0,   265,   266,   267,
       0,   268,     0,   269,     0,     0,     0,     0,   270,     0,
       0,     0,     0,   272,     0,   273,   274,     0,   275,   276,
    4058,     0,     0,   277,     0,     0,     0,   279,   280,     0,
       0,   281,  4059,     0,   282,   283,     0,     0,     0,     0,
       0,   284,   285,     0,   286,     0,   287,     0,   288,   289,
       0,     0,     0,     0,  -333,     0,     0,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,     0,   306,   307,   308,   309,     0,   310,
     311,   312,   313,     0,   314,   315,     0,     0,     0,     0,
     316,   317,   318,   319,   320,   321,     0,     0,   322,   323,
       0,   324,     0,   325,     0,   326,   327,   328,   329,   330,
     331,   332,   333,   334,     0,     0,   335,   336,     0,     0,
     337,   338,   339,   340,     0,     0,     0,     0,   342,     0,
       0,     0,   343,     0,   344,   345,   346,     0,   347,   348,
     349,  4060,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   354,   355,     0,     0,     0,     0,
     357,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,     0,     0,     0,     0,   369,   370,     0,   371,     0,
     372,   373,   374,   375,   376,     0,   377,   378,   379,     0,
       0,   380,     0,     0,     0,   381,   382,   383,   384,   385,
       0,     0,   386,   387,   388,   389,   390,     0,   391,     0,
       0,   393,     0,   395,  -333,     0,   396,     0,     0,     0,
     398,     0,     0,   400,   401,   402,  4061,     0,     0,     0,
     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,
       0,   414,     0,     0,     0,     0,   416,   417,   418,     0,
       0,     0,     0,   420,     0,     0,     0,   421,     0,     0,
     423,     0,     0,   426,   427,     0,   428,     0,   430,     0,
     432,   433,     0,     0,     0,     0,     0,     0,   434,   435,
       0,   436,     0,     0,   437,     0,     0,   438,     0,     0,
       0,     0,   440,     0,     0,     0,   442,     0,   443,   444,
     445,   446,   447,   448,     0,     0,   449,   450,   451,   452,
       0,   453,   454,     0,   455,     0,   456,   457,   458,   459,
       0,     0,   460,   461,     0,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   466,   467,   468,     0,     0,     0,
       0,   470,   471,   472,     0,   473,   474,     0,   475,   476,
       0,     0,     0,     0,     0,   479,     0,     0,   480,     0,
       0,     0,   482,   483,   484,     0,     0,     0,     0,     0,
       0,   485,     0,     0,   486,     0,     0,     0,   487,   488,
     489,   490,   491,   492,     0,     0,  -333,     0,     0,     0,
     493,     0,     0,   495,     0,   497,     0,   135,   498,   136,
     137,   138,   139,   140,     0,     0,   141,     0,     0,     0,
     142,     0,     0,     0,     0,   144,   145,   146,   147,   148,
     149,   150,     0,     0,  -378,     0,     0,     0,   153,     0,
       0,     0,   154,     0,     0,   155,   156,   157,     0,   158,
       0,     0,     0,     0,     0,   161,  4054,     0,   162,   163,
       0,   164,     0,     0,     0,     0,     0,   168,   169,   170,
     171,  4055,   173,   174,     0,   175,   176,     0,     0,     0,
       0,     0,     0,   182,     0,   184,     0,   186,   187,   188,
     189,     0,   190,   191,     0,   192,   193,   194,     0,   196,
       0,   197,     0,     0,   198,     0,     0,   199,     0,   200,
       0,   201,     0,   202,     0,     0,     0,   203,   204,   205,
       0,     0,   206,     0,     0,     0,     0,   207,     0,     0,
       0,     0,     0,   209,     0,   210,     0,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,     0,     0,
       0,     0,   218,   219,   220,     0,     0,     0,   221,     0,
    4567,   223,     0,   224,   225,   226,     0,     0,   227,   228,
       0,   229,   230,   231,   232,   233,     0,     0,     0,     0,
     236,   237,   238,     0,     0,   239,   240,  4056,   241,   242,
     243,     0,     0,     0,     0,     0,     0,   245,     0,   246,
       0,   247,     0,   248,   249,   250,   251,   252,     0,   253,
       0,   254,     0,     0,     0,     0,   256,   257,     0,     0,
       0,     0,     0,     0,   260,     0,     0,     0,   261,   262,
     263,   264,  4057,     0,   265,   266,   267,     0,   268,     0,
     269,     0,     0,     0,     0,   270,     0,     0,     0,     0,
     272,     0,   273,   274,     0,   275,   276,  4058,     0,     0,
     277,     0,     0,     0,   279,   280,     0,     0,   281,  4059,
       0,   282,   283,     0,     0,     0,     0,     0,   284,   285,
       0,   286,     0,   287,     0,   288,   289,     0,     0,     0,
       0,  -333,     0,     0,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
       0,   306,   307,   308,   309,     0,   310,   311,   312,   313,
       0,   314,   315,     0,     0,     0,     0,   316,   317,   318,
     319,   320,   321,     0,     0,   322,   323,     0,   324,     0,
     325,     0,   326,   327,   328,   329,   330,   331,   332,   333,
     334,     0,     0,   335,   336,     0,     0,   337,   338,   339,
     340,     0,     0,     0,     0,   342,     0,     0,     0,   343,
       0,   344,   345,   346,     0,   347,   348,   349,  4060,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   354,   355,     0,     0,     0,     0,   357,     0,   358,
     359,   360,   361,   362,   363,   364,   365,   366,     0,     0,
       0,     0,   369,   370,     0,   371,     0,   372,   373,   374,
     375,   376,     0,   377,   378,   379,     0,     0,   380,     0,
       0,     0,   381,   382,   383,   384,   385,     0,     0,   386,
     387,   388,   389,   390,     0,   391,     0,     0,   393,     0,
     395,  -333,     0,   396,     0,     0,     0,   398,     0,     0,
     400,   401,   402,  4061,     0,     0,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   412,   413,     0,   414,     0,
       0,     0,     0,   416,   417,   418,     0,     0,     0,     0,
     420,     0,     0,     0,   421,     0,     0,   423,     0,     0,
     426,   427,     0,   428,     0,   430,     0,   432,   433,     0,
       0,     0,     0,     0,     0,   434,   435,     0,   436,     0,
       0,   437,     0,     0,   438,     0,     0,     0,     0,   440,
       0,     0,     0,   442,     0,   443,   444,   445,   446,   447,
     448,     0,     0,   449,   450,   451,   452,     0,   453,   454,
       0,   455,     0,   456,   457,   458,   459,     0,     0,   460,
     461,     0,   462,   463,   464,   465,     0,     0,     0,     0,
       0,   466,   467,   468,     0,     0,     0,     0,   470,   471,
     472,     0,   473,   474,     0,   475,   476,     0,     0,     0,
       0,     0,   479,     0,     0,   480,     0,     0,     0,   482,
     483,   484,     0,     0,     0,     0,     0,     0,   485,     0,
       0,   486,     0,     0,     0,   487,   488,   489,   490,   491,
     492,     0,     0,  -333,     0,     0,     0,   493,     0,     0,
     495,     0,   497,     0,   135,   498,   136,   137,   138,   139,
     140,     0,     0,   141,     0,     0,     0,   142,     0,     0,
       0,     0,   144,   145,   146,   147,   148,   149,   150,     0,
       0,  -378,     0,     0,     0,   153,     0,     0,     0,   154,
       0,     0,   155,   156,   157,     0,   158,     0,     0,     0,
       0,     0,   161,  4054,     0,   162,   163,     0,   164,     0,
       0,     0,     0,     0,   168,   169,   170,   171,  4055,   173,
     174,     0,   175,   176,     0,     0,     0,     0,     0,     0,
     182,     0,   184,     0,   186,   187,   188,   189,     0,   190,
     191,     0,   192,   193,   194,     0,   196,     0,   197,     0,
       0,   198,     0,     0,   199,     0,   200,     0,   201,     0,
     202,     0,     0,     0,   203,   204,   205,     0,     0,   206,
       0,     0,     0,     0,   207,     0,     0,     0,     0,     0,
     209,     0,   210,     0,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,     0,     0,     0,     0,   218,
     219,   220,     0,     0,     0,   221,     0,  4620,   223,     0,
     224,   225,   226,     0,     0,   227,   228,     0,   229,   230,
     231,   232,   233,     0,     0,     0,     0,   236,   237,   238,
       0,     0,   239,   240,  4056,   241,   242,   243,     0,     0,
       0,     0,     0,     0,   245,     0,   246,     0,   247,     0,
     248,   249,   250,   251,   252,     0,   253,     0,   254,     0,
       0,     0,     0,   256,   257,     0,     0,     0,     0,     0,
       0,   260,     0,     0,     0,   261,   262,   263,   264,  4057,
       0,   265,   266,   267,     0,   268,     0,   269,     0,     0,
       0,     0,   270,     0,     0,     0,     0,   272,     0,   273,
     274,     0,   275,   276,  4058,     0,     0,   277,     0,     0,
       0,   279,   280,     0,     0,   281,  4059,     0,   282,   283,
       0,     0,     0,     0,     0,   284,   285,     0,   286,     0,
     287,     0,   288,   289,     0,     0,     0,     0,  -333,     0,
       0,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,     0,   306,   307,
     308,   309,     0,   310,   311,   312,   313,     0,   314,   315,
       0,     0,     0,     0,   316,   317,   318,   319,   320,   321,
       0,     0,   322,   323,     0,   324,     0,   325,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,     0,     0,
     335,   336,     0,     0,   337,   338,   339,   340,     0,     0,
       0,     0,   342,     0,     0,     0,   343,     0,   344,   345,
     346,     0,   347,   348,   349,  4060,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   354,   355,
       0,     0,     0,     0,   357,     0,   358,   359,   360,   361,
     362,   363,   364,   365,   366,     0,     0,     0,     0,   369,
     370,     0,   371,     0,   372,   373,   374,   375,   376,     0,
     377,   378,   379,     0,     0,   380,     0,     0,     0,   381,
     382,   383,   384,   385,     0,     0,   386,   387,   388,   389,
     390,     0,   391,     0,     0,   393,     0,   395,  -333,     0,
     396,     0,     0,     0,   398,     0,     0,   400,   401,   402,
    4061,     0,     0,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   412,   413,     0,   414,     0,     0,     0,     0,
     416,   417,   418,     0,     0,     0,     0,   420,     0,     0,
       0,   421,     0,     0,   423,     0,     0,   426,   427,     0,
     428,     0,   430,     0,   432,   433,     0,     0,     0,     0,
       0,     0,   434,   435,     0,   436,     0,     0,   437,     0,
       0,   438,     0,     0,     0,     0,   440,     0,     0,     0,
     442,     0,   443,   444,   445,   446,   447,   448,     0,     0,
     449,   450,   451,   452,     0,   453,   454,     0,   455,     0,
     456,   457,   458,   459,     0,     0,   460,   461,     0,   462,
     463,   464,   465,     0,     0,     0,     0,     0,   466,   467,
     468,     0,     0,     0,     0,   470,   471,   472,     0,   473,
     474,     0,   475,   476,     0,     0,     0,     0,     0,   479,
       0,     0,   480,     0,     0,     0,   482,   483,   484,     0,
       0,     0,     0,     0,     0,   485,     0,     0,   486,     0,
       0,     0,   487,   488,   489,   490,   491,   492,     0,     0,
    -333,     0,     0,     0,   493,     0,     0,   495,     0,   497,
       0,   135,   498,   136,   137,   138,   139,   140,     0,     0,
     141,     0,     0,     0,   142,     0,     0,     0,     0,   144,
     145,   146,   147,   148,   149,   150,     0,     0,  -378,     0,
       0,     0,   153,     0,     0,     0,   154,     0,     0,   155,
     156,   157,     0,   158,     0,     0,     0,     0,     0,   161,
    4054,     0,   162,   163,     0,   164,     0,     0,     0,     0,
       0,   168,   169,   170,   171,  4055,   173,   174,     0,   175,
     176,     0,     0,     0,     0,     0,     0,   182,     0,   184,
       0,   186,   187,   188,   189,     0,   190,   191,     0,   192,
     193,   194,     0,   196,     0,   197,     0,     0,   198,     0,
       0,   199,     0,   200,     0,   201,     0,   202,     0,     0,
       0,   203,   204,   205,     0,     0,   206,     0,     0,     0,
       0,   207,     0,     0,     0,     0,     0,   209,     0,   210,
       0,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,     0,     0,     0,     0,   218,   219,   220,     0,
       0,     0,   221,     0,  -352,   223,     0,   224,   225,   226,
       0,     0,   227,   228,     0,   229,   230,   231,   232,   233,
       0,     0,     0,     0,   236,   237,   238,     0,     0,   239,
     240,  4056,   241,   242,   243,     0,     0,     0,     0,     0,
       0,   245,     0,   246,     0,   247,     0,   248,   249,   250,
     251,   252,     0,   253,     0,   254,     0,     0,     0,     0,
     256,   257,     0,     0,     0,     0,     0,     0,   260,     0,
       0,     0,   261,   262,   263,   264,  4057,     0,   265,   266,
     267,     0,   268,     0,   269,     0,     0,     0,     0,   270,
       0,     0,     0,     0,   272,     0,   273,   274,     0,   275,
     276,  4058,     0,     0,   277,     0,     0,     0,   279,   280,
       0,     0,   281,  4059,     0,   282,   283,     0,     0,     0,
       0,     0,   284,   285,     0,   286,     0,   287,     0,   288,
     289,     0,     0,     0,     0,  -333,     0,     0,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,     0,   306,   307,   308,   309,     0,
     310,   311,   312,   313,     0,   314,   315,     0,     0,     0,
       0,   316,   317,   318,   319,   320,   321,     0,     0,   322,
     323,     0,   324,     0,   325,     0,   326,   327,   328,   329,
     330,   331,   332,   333,   334,     0,     0,   335,   336,     0,
       0,   337,   338,   339,   340,     0,     0,     0,     0,   342,
       0,     0,     0,   343,     0,   344,   345,   346,     0,   347,
     348,   349,  4060,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   354,   355,     0,     0,     0,
       0,   357,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,     0,     0,     0,     0,   369,   370,     0,   371,
       0,   372,   373,   374,   375,   376,     0,   377,   378,   379,
       0,     0,   380,     0,     0,     0,   381,   382,   383,   384,
     385,     0,     0,   386,   387,   388,   389,   390,     0,   391,
       0,     0,   393,     0,   395,  -333,     0,   396,     0,     0,
       0,   398,     0,     0,   400,   401,   402,  4061,     0,     0,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   412,
     413,     0,   414,     0,     0,     0,     0,   416,   417,   418,
       0,     0,     0,     0,   420,     0,     0,     0,   421,     0,
       0,   423,     0,     0,   426,   427,     0,   428,     0,   430,
       0,   432,   433,     0,     0,     0,     0,     0,     0,   434,
     435,     0,   436,     0,     0,   437,     0,     0,   438,     0,
       0,     0,     0,   440,     0,     0,     0,   442,     0,   443,
     444,   445,   446,   447,   448,     0,     0,   449,   450,   451,
     452,     0,   453,   454,     0,   455,     0,   456,   457,   458,
     459,     0,     0,   460,   461,     0,   462,   463,   464,   465,
       0,     0,     0,     0,     0,   466,   467,   468,     0,     0,
       0,     0,   470,   471,   472,     0,   473,   474,     0,   475,
     476,     0,     0,     0,     0,     0,   479,     0,     0,   480,
       0,     0,     0,   482,   483,   484,     0,     0,     0,     0,
       0,     0,   485,     0,     0,   486,     0,     0,     0,   487,
     488,   489,   490,   491,   492,     0,     0,  -333,     0,     0,
       0,   493,     0,     0,   495,     0,   497,     0,   135,   498,
     136,   137,   138,   139,   140,     0,     0,   141,     0,     0,
       0,   142,     0,     0,     0,     0,   144,   145,   146,   147,
     148,   149,   150,     0,     0,  -378,     0,     0,     0,   153,
       0,     0,     0,   154,     0,     0,   155,   156,   157,     0,
     158,     0,     0,     0,     0,     0,   161,  4054,     0,   162,
     163,     0,   164,     0,     0,     0,     0,     0,   168,   169,
     170,   171,  4055,   173,   174,     0,   175,   176,     0,     0,
       0,     0,     0,     0,   182,     0,   184,     0,   186,   187,
     188,   189,     0,   190,   191,     0,   192,   193,   194,     0,
     196,     0,   197,     0,     0,   198,     0,     0,   199,     0,
     200,     0,   201,     0,   202,     0,     0,     0,   203,   204,
     205,     0,     0,   206,     0,     0,     0,     0,   207,     0,
       0,     0,     0,     0,   209,     0,   210,     0,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,     0,
       0,     0,     0,   218,   219,   220,     0,     0,     0,   221,
       0,     0,   223,     0,   224,   225,   226,     0,     0,   227,
     228,     0,   229,   230,   231,   232,   233,     0,     0,     0,
       0,   236,   237,   238,     0,     0,   239,   240,  4056,   241,
     242,   243,     0,     0,     0,     0,     0,     0,   245,     0,
     246,     0,   247,     0,   248,   249,   250,   251,   252,     0,
     253,     0,   254,     0,     0,     0,     0,   256,   257,     0,
       0,     0,     0,     0,     0,   260,     0,     0,     0,   261,
     262,   263,   264,  4057,     0,   265,   266,   267,     0,   268,
       0,   269,     0,     0,     0,     0,   270,     0,     0,     0,
       0,   272,     0,   273,   274,     0,   275,   276,  4058,     0,
       0,   277,     0,     0,     0,   279,   280,     0,     0,   281,
    4059,     0,   282,   283,     0,     0,     0,     0,     0,   284,
     285,     0,   286,     0,   287,     0,   288,   289,     0,     0,
       0,     0,  -333,     0,     0,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,     0,   306,   307,   308,   309,     0,   310,   311,   312,
     313,     0,   314,   315,     0,     0,     0,     0,   316,   317,
     318,   319,   320,   321,     0,     0,   322,   323,     0,   324,
       0,   325,     0,   326,   327,   328,   329,   330,   331,   332,
     333,   334,     0,     0,   335,   336,     0,     0,   337,   338,
     339,   340,     0,     0,     0,     0,   342,     0,     0,     0,
     343,     0,   344,   345,   346,     0,   347,   348,   349,  4060,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   354,   355,     0,     0,     0,     0,   357,     0,
     358,   359,   360,   361,   362,   363,   364,   365,   366,     0,
       0,     0,     0,   369,   370,     0,   371,     0,   372,   373,
     374,   375,   376,     0,   377,   378,   379,     0,     0,   380,
       0,     0,     0,   381,   382,   383,   384,   385,     0,     0,
     386,   387,   388,   389,   390,     0,   391,     0,     0,   393,
       0,   395,  -333,     0,   396,     0,     0,     0,   398,     0,
       0,   400,   401,   402,  4061,     0,     0,     0,   404,   405,
     406,   407,   408,   409,   410,     0,   412,   413,     0,   414,
       0,     0,     0,     0,   416,   417,   418,     0,     0,     0,
       0,   420,     0,     0,     0,   421,     0,     0,   423,     0,
       0,   426,   427,     0,   428,     0,   430,     0,   432,   433,
       0,     0,     0,     0,     0,     0,   434,   435,     0,   436,
       0,     0,   437,     0,     0,   438,     0,     0,     0,     0,
     440,     0,     0,     0,   442,     0,   443,   444,   445,   446,
     447,   448,     0,     0,   449,   450,   451,   452,     0,   453,
     454,     0,   455,     0,   456,   457,   458,   459,     0,     0,
     460,   461,     0,   462,   463,   464,   465,     0,     0,     0,
       0,     0,   466,   467,   468,     0,     0,     0,     0,   470,
     471,   472,     0,   473,   474,     0,   475,   476,     0,     0,
       0,     0,     0,   479,     0,     0,   480,     0,     0,     0,
     482,   483,   484,     0,     0,     0,     0,     0,     0,   485,
       0,     0,   486,     0,     0,     0,   487,   488,   489,   490,
     491,   492,     0,     0,  -333,     0,     0,     0,   493,     0,
       0,   495,     0,   497,     0,   135,   498,   136,   137,   138,
     139,   140,     0,     0,   141,     0,     0,     0,   142,     0,
       0,     0,     0,   144,   145,   146,   147,   148,   149,   150,
       0,     0,  -378,     0,     0,     0,   153,     0,     0,     0,
     154,     0,     0,   155,   156,   157,     0,   158,     0,     0,
       0,     0,     0,   161,  4054,     0,   162,   163,     0,   164,
       0,     0,     0,     0,     0,   168,   169,   170,   171,  4055,
     173,   174,     0,   175,   176,     0,     0,     0,     0,     0,
       0,   182,     0,   184,     0,   186,   187,   188,   189,     0,
     190,   191,     0,   192,   193,   194,     0,   196,     0,   197,
       0,     0,   198,     0,     0,   199,     0,   200,     0,   201,
       0,   202,     0,     0,     0,   203,   204,   205,     0,     0,
     206,     0,     0,     0,     0,   207,     0,     0,     0,     0,
       0,   209,     0,   210,     0,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,     0,     0,     0,     0,
     218,   219,   220,     0,     0,     0,   221,     0,     0,   223,
       0,   224,   225,   226,     0,     0,   227,   228,     0,   229,
     230,   231,   232,   233,     0,     0,     0,     0,   236,   237,
     238,     0,     0,   239,   240,  4056,   241,   242,   243,     0,
       0,     0,     0,     0,     0,   245,     0,   246,     0,   247,
       0,   248,   249,   250,   251,   252,     0,   253,     0,   254,
       0,     0,     0,     0,   256,   257,     0,     0,     0,     0,
       0,     0,   260,     0,     0,     0,   261,   262,   263,   264,
    4057,     0,   265,   266,   267,     0,   268,     0,   269,     0,
       0,     0,     0,   270,     0,     0,     0,     0,   272,     0,
     273,   274,     0,   275,   276,  4058,     0,     0,   277,     0,
       0,     0,   279,   280,     0,     0,   281,  4059,     0,   282,
     283,     0,     0,     0,     0,     0,   284,   285,     0,   286,
       0,   287,     0,   288,   289,     0,     0,     0,     0,  -333,
       0,     0,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,     0,   306,
     307,   308,   309,     0,   310,   311,   312,   313,     0,   314,
     315,     0,     0,     0,     0,   316,   317,   318,   319,   320,
     321,     0,     0,   322,   323,     0,   324,     0,   325,     0,
     326,   327,   328,   329,   330,   331,   332,   333,   334,     0,
       0,   335,   336,     0,     0,   337,   338,   339,   340,     0,
       0,     0,     0,   342,     0,     0,     0,   343,     0,   344,
     345,   346,     0,   347,   348,   349,  4060,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   354,
     355,     0,     0,     0,     0,   357,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,     0,     0,     0,     0,
     369,   370,     0,   371,     0,   372,   373,   374,   375,   376,
       0,   377,   378,   379,     0,     0,   380,     0,     0,     0,
     381,   382,   383,   384,   385,     0,     0,   386,   387,   388,
     389,   390,     0,   391,     0,     0,   393,     0,   395,  -333,
       0,   396,     0,     0,     0,   398,     0,     0,   400,   401,
     402,  4061,     0,     0,     0,   404,   405,   406,   407,   408,
     409,   410,     0,   412,   413,     0,   414,     0,     0,     0,
       0,   416,   417,   418,     0,     0,     0,     0,   420,     0,
       0,     0,   421,     0,     0,   423,     0,     0,   426,   427,
       0,   428,     0,   430,     0,   432,   433,     0,     0,     0,
       0,     0,     0,   434,   435,     0,   436,     0,     0,   437,
       0,     0,   438,     0,     0,     0,     0,   440,     0,     0,
       0,   442,     0,   443,   444,   445,   446,   447,   448,     0,
       0,   449,   450,   451,   452,     0,   453,   454,     0,   455,
       0,   456,   457,   458,   459,     0,     0,   460,   461,     0,
     462,   463,   464,   465,     0,     0,     0,     0,     0,   466,
     467,   468,     0,     0,     0,     0,   470,   471,   472,     0,
     473,   474,     0,   475,   476,     0,     0,     0,     0,     0,
     479,     0,     0,  4434,     0,     0,     0,   482,   483,   484,
       0,     0,     0,     0,     0,     0,   485,     0,     0,   486,
       0,     0,     0,   487,   488,   489,   490,   491,   492,     0,
       0,  -333,     0,     0,     0,   493,     0,     0,   495,     0,
     497,     0,   135,   498,   136,   137,   138,   139,   140,     0,
       0,   141,     0,     0,     0,   142,     0,     0,     0,     0,
     144,   145,   146,   147,   148,   149,   150,     0,     0,     0,
       0,     0,     0,   153,     0,     0,     0,   154,     0,     0,
     155,   156,   157,     0,   158,     0,     0,     0,     0,     0,
     161,     0,     0,   162,   163,     0,   164,     0,     0,     0,
       0,     0,   168,   169,   170,   171,     0,   173,   174,     0,
     175,   176,     0,     0,     0,     0,     0,     0,   182,     0,
     184,     0,   186,   187,   188,   189,     0,   190,   191,     0,
     192,   193,   194,     0,   196,     0,   197,     0,     0,   198,
       0,     0,   199,     0,   200,     0,   201,     0,   202,     0,
       0,     0,   203,   204,   205,     0,     0,   206,     0,     0,
       0,     0,   207,     0,     0,     0,     0,     0,   209,     0,
     210,     0,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,     0,     0,     0,     0,   218,   219,   220,
       0,     0,     0,   221,     0,     0,   223,     0,   224,   225,
     226,     0,     0,   227,   228,     0,   229,   230,   231,   232,
     233,     0,     0,     0,     0,   236,   237,   238,     0,     0,
     239,   240,     0,   241,   242,   243,     0,     0,     0,     0,
       0,     0,   245,     0,   246,     0,   247,     0,   248,   249,
     250,   251,   252,     0,   253,     0,   254,     0,     0,     0,
       0,   256,   257,     0,     0,     0,     0,     0,     0,   260,
       0,     0,     0,   261,   262,   263,   264,     0,     0,   265,
     266,   267,     0,   268,     0,   269,     0,     0,     0,     0,
     270,     0,     0,     0,     0,   272,     0,   273,   274,     0,
     275,   276,     0,     0,     0,   277,     0,     0,     0,   279,
     280,     0,     0,   281,     0,     0,   282,   283,     0,     0,
       0,     0,     0,   284,   285,     0,   286,     0,   287,     0,
     288,   289,     0,     0,     0,     0,     0,     0,     0,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,     0,   306,   307,   308,   309,
       0,   310,   311,   312,   313,     0,   314,   315,     0,     0,
       0,     0,   316,   317,   318,   319,   320,   321,     0,     0,
     322,   323,     0,   324,     0,   325,     0,   326,   327,   328,
     329,   330,   331,   332,   333,   334,     0,     0,   335,   336,
       0,     0,   337,   338,   339,   340,     0,     0,     0,     0,
     342,     0,     0,     0,   343,     0,   344,   345,   346,     0,
     347,   348,   349,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   354,   355,     0,     0,
       0,     0,   357,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,     0,     0,     0,     0,   369,   370,     0,
     371,     0,   372,   373,   374,   375,   376,     0,   377,   378,
     379,     0,     0,   380,     0,     0,     0,   381,   382,   383,
     384,   385,     0,     0,   386,   387,   388,   389,   390,     0,
     391,     0,     0,   393,     0,   395,     0,     0,   396,     0,
       0,     0,   398,     0,     0,   400,   401,   402,     0,     0,
       0,     0,   404,   405,   406,   407,   408,   409,   410,     0,
     412,   413,     0,   414,     0,     0,     0,     0,   416,   417,
     418,     0,     0,     0,     0,   420,     0,     0,     0,   421,
       0,     0,   423,     0,     0,   426,   427,     0,   428,     0,
     430,     0,   432,   433,     0,     0,     0,     0,     0,     0,
     434,   435,     0,   436,     0,     0,   437,     0,     0,   438,
       0,     0,     0,     0,   440,     0,     0,     0,   442,     0,
     443,   444,   445,   446,   447,   448,     0,     0,   449,   450,
     451,   452,     0,   453,   454,     0,   455,     0,   456,   457,
     458,   459,     0,     0,   460,   461,     0,   462,   463,   464,
     465,     0,     0,     0,     0,     0,   466,   467,   468,     0,
       0,     0,     0,   470,   471,   472,     0,   473,   474,     0,
     475,   476,     0,     0,     0,     0,     0,   479,     0,     0,
     480,     0,     0,     0,   482,   483,   484,     0,     0,     0,
       0,     0,     0,   485,     0,     0,   486,     0,     0,     0,
     487,   488,   489,   490,   491,   492,     0,     0,     0,     0,
       0,     0,   493,     0,     0,   495,     0,   497,     0,     0,
     498
};

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-4040)))

#define yytable_value_is_error(Yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       1,     2,     3,     4,     5,     6,     7,   681,   614,   590,
     611,  1041,    13,   614,   954,   955,   515,   637,  1042,   934,
      27,   651,  1161,  1619,   964,    26,  1917,  1918,  1329,    30,
      37,  1579,    13,   538,  1765,  1234,  2079,    44,  1134,    40,
    1001,  2079,   541,  1234,   847,  1373,    47,  1472,  1179,    50,
    1203,   976,   754,  1452,    55,  1472,  1615,  1616,  1329,  2396,
    1577,    62,  2487,  1297,  2559,   558,   559,   560,  2962,   562,
     563,  2359,   708,   566,  2187,   568,  1001,  1256,  3292,  2323,
     579,  2827,  3008,  1170,  1263,   974,  2199,  2620,   556,    30,
    1381,   617,  1020,  1046,   620,  1046,  2285,  1905,  2891,  1841,
     677,   678,  2200,  3013,   105,  2464,  2079,  2525,  2963,   690,
     691,  1264,  1265,  1002,  1483,  1268,  1269,  1270,  1271,  2147,
    1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,  2416,  3354,
    2077,  2688,  2147,  2527,  1503,  3547,    27,  2531,  3102,  1557,
    2077,  2406,  1511,  1512,  2930,   819,    29,  1075,  2542,    11,
    2459,    45,    84,  2467,    22,  2941,    22,  3176,    29,    35,
    2554,  2900,  2476,    71,   105,  1547,    92,    26,    27,  3118,
    2745,  3487,   808,   809,   810,    26,    27,    69,    26,    27,
      22,  1916,    20,  1601,   820,  3126,    16,    26,    27,  1003,
     695,    31,   697,   698,   699,   126,  2170,  4093,  2516,  2517,
    2147,  2279,    27,   124,  2520,    22,    36,    26,    27,  3587,
    2147,   144,   177,    43,    26,    27,    29,    29,    62,   849,
    2685,  2686,  2820,  2060,   144,  2938,  2691,    41,  2693,  2069,
      70,    71,   690,   691,   164,    26,    27,    74,   192,    93,
     189,   224,  4227,   386,    67,    31,   283,    26,    27,    96,
      74,    82,    21,    29,    58,   137,    26,    27,  3309,    45,
      75,   248,  3396,  4302,  2634,   384,   119,    26,    27,    63,
     140,   241,   282,    59,   160,   266,  2136,    26,    27,   170,
      74,    92,   912,   437,    70,    71,   410,   170,    26,    27,
      98,   174,   462,   241,   140,    26,    27,   189,   381,   263,
     170,   193,  3714,    45,   470,   263,   319,    48,  2626,  2627,
     285,    31,   204,   140,   245,   488,  3734,   199,   521,  2656,
     547,   153,   142,  1557,   170,    45,   409,  4005,   206,  3543,
    3646,  3647,   252,    18,  3650,  4231,   141,    30,  4295,    59,
     566,   488,   377,   170,    49,   283,   228,   846,    26,    27,
      70,    71,   300,  3669,   204,   392,    26,    27,   851,   159,
    3676,   174,  2671,   413,  2673,   566,   372,  1601,  3746,    81,
      26,    27,   248,   437,   537,   598,    47,   170,   611,   203,
     289,    26,    27,   141,  2051,    22,   373,   206,   632,    18,
      81,   151,    26,    27,   458,    29,   259,   655,   174,   655,
      47,    99,    70,    71,   181,   663,   166,   663,    55,     7,
     230,     9,    41,   657,    82,   297,   279,  3795,    75,   432,
      47,   375,   120,   656,   657,   164,   237,   491,   239,   655,
      31,   164,   209,   656,    77,    26,    27,  2023,  2412,    26,
      27,  2661,   292,   335,    45,   480,   452,    84,   241,   264,
    4407,   327,   145,   258,   392,   954,   619,   268,    59,   958,
     959,   662,    26,    27,   514,   374,   693,  1169,   994,    70,
      71,   170,  3890,   437,   170,  3893,   975,   468,   632,   437,
     300,  1183,   655,   566,   433,   433,  2441,   657,   366,   692,
     460,  1294,   300,   506,   376,   289,  4174,   663,  2340,    62,
     258,   625,   477,  1527,   336,  1445,  4545,  4546,   655,   510,
     396,   512,   197,   514,   515,   516,    26,    27,   637,   372,
     663,  3307,  3308,   292,   300,  1106,  1107,  1108,  2837,  2838,
     513,   512,   391,   514,  3320,   394,   206,  4522,  3854,  1938,
     541,   433,   543,   391,  3283,  3596,   394,  3863,  3287,   372,
    3336,  3337,   391,   368,   541,   394,   174,   228,   229,    26,
      27,   598,   393,   564,  3350,    26,    27,  3781,  2833,  2834,
    2835,  3887,   391,  2520,   575,   394,  3892,   319,   579,   391,
     581,  1815,   394,  2520,   283,  1259,   424,   283,  1477,   202,
    3815,  1480,  3305,   594,  1547,  1484,  1547,  1486,   422,   174,
     391,   228,   229,   394,  1905,  2578,  2634,   264,   445,   174,
     611,  2927,   391,   137,  1539,   394,  1074,   174,  3582,  2634,
     630,   391,   623,   467,   394,  1514,  1515,  1329,   241,  1998,
     584,  1267,   391,  2051,  1905,   394,   483,    26,    27,   626,
    1793,   642,   391,  3241,  2481,   394,   600,  1600,  1284,  1600,
     651,  1804,   653,   391,  1807,   508,   394,  3232,  1586,  2077,
     391,   437,   627,   394,   506,   666,  1124,   460,  2746,   531,
     671,   604,   673,   599,    26,    27,   677,   678,  2518,  1147,
    1148,   682,   683,  2418,   604,   666,   687,  2634,   488,   506,
     528,  3061,    26,    27,   524,  1509,  2670,  2634,  3832,   629,
    1787,  3926,   703,   624,  1172,  4601,  3647,   589,   657,   640,
     618,  3936,  1180,   391,  1182,   530,   394,  1347,  2136,  3294,
     582,   391,  3515,   655,   394,  1302,  1194,  1195,  1196,  2147,
     671,   546,  3681,  4111,  1202,   391,   590,   579,   394,   569,
     611,   632,  3060,  3968,   582,  1884,   391,  1246,  2130,   394,
    3245,  3606,   577,   754,  1557,   617,   596,   391,   620,   589,
     394,   655,   624,   577,   577,   657,  2603,   597,  2628,  4147,
     661,  2608,   611,   297,   656,   599,    26,    27,   661,  2616,
    2617,   657,   641,  3802,  1283,  2622,   624,   655,  1418,   655,
     641,   661,  3101,   641,  1320,   625,    26,    27,  1601,  1376,
     391,   660,   641,   394,   391,   546,  4218,   394,   656,   657,
     596,  1441,   813,   657,   815,   661,  1393,  2051,   657,   623,
     525,   632,   641,   638,  3610,   537,   567,   391,   632,   641,
     394,  1330,  2499,  3797,   661,   621,  3575,  3576,   657,   840,
     841,   842,   843,   844,   845,   846,   537,   848,   849,  2366,
     641,  1481,   376,   854,   595,   655,    35,    26,    27,   659,
     841,   637,   641,   506,   845,   656,   657,   848,   661,   655,
    3090,   641,    26,    27,  1400,  2766,   596,   656,   657,   497,
    2466,   391,   641,  2479,   394,  1384,   887,   657,   127,   546,
     629,   130,   641,    26,    27,   566,   629,   656,   657,   900,
     155,  3238,  2136,   641,   467,  3330,  2861,   656,   657,   158,
     641,   912,   913,  2147,  2805,  2473,   917,  2606,  3277,   657,
     123,  3478,   497,  3608,   391,   656,   657,   394,   282,    57,
     391,   630,   497,   394,   630,    26,    27,    84,   300,   566,
     497,   174,  4354,  2785,  2786,  2787,    26,    27,    26,    27,
    1551,   232,    79,   954,   189,  2998,  1461,   958,   959,   900,
    2998,    54,   661,   641,  3252,   661,  3384,    26,    27,  3283,
     100,   641,   913,  3287,   975,  3990,   917,   566,   656,   657,
    2927,   217,  3291,  3248,  1924,   641,   656,  4303,   392,  4305,
    2927,  3385,  4058,  4059,  2542,   596,   641,   610,    62,   174,
     656,   657,   391,   245,  1944,   394,  3916,   641,  3311,  3312,
    1712,  3476,   657,   299,    26,    27,   617,   618,  4243,  1020,
    3485,   566,  2830,   853,  2449,  2998,  2451,  2452,   231,   204,
    4255,  3129,  1993,  3061,  2451,  2452,  3334,  2779,    35,   391,
     380,  1042,   394,   376,   906,   663,  3061,    26,    27,   137,
     641,    26,    27,   289,   641,  1554,  4281,   391,   283,   209,
     394,    26,    27,  1064,   728,   589,   657,  2028,  1993,   248,
     657,  2224,  3629,  3630,  1075,   437,  2172,   641,   409,  3636,
     297,  2499,  3639,  3640,    26,    27,    35,  2378,   663,  3278,
     331,  2460,   189,   657,   349,  1984,   556,   225,   663,  3656,
     560,   319,  2520,  2028,  1609,   635,   663,  2944,  1997,  2946,
     655,  2000,  2001,  3670,  3061,   566,  2953,  2296,  4044,  3676,
    3677,  3678,  3679,  1064,  3061,  1126,  1127,  1128,  1129,  1130,
    2967,   641,   994,  3899,   996,   140,   800,  2974,  2975,   202,
     138,   391,   413,    92,   394,    26,    27,   657,   327,    21,
    2987,  2988,  2989,    26,    27,  4369,  2993,  2994,  2086,   376,
    2891,   391,    26,    27,   394,    42,  3631,   392,  1169,  3634,
    1806,  2302,  2303,   459,   641,    26,    27,  2130,   241,  2130,
     641,   117,  1183,    26,    27,  1126,   373,    26,    27,  1130,
     657,  1821,  3029,   209,   373,   398,   657,  2396,   433,  3664,
    3665,  3666,   384,  1905,   655,   137,   409,  3672,  2295,   297,
    2628,   407,   566,   416,   655,  3680,  2634,    94,  2305,   250,
     482,  2374,   391,   172,    82,   394,    26,    27,   259,   204,
    1811,    26,    27,  1234,  3919,   566,   560,   391,  1868,   207,
     394,   190,  3810,   514,   167,  1246,  1823,   496,  2051,    26,
      27,   248,   641,   657,  2943,   178,   537,   493,   391,   257,
    4044,   394,  1892,  1893,   497,  2499,   359,   199,   657,   141,
      26,    27,    26,    27,   424,   637,   630,  2794,  2477,   426,
    2969,  2970,  1283,     0,  4299,   566,  2477,  1288,   376,   641,
    3593,   168,  4058,  4059,   170,   451,    26,    27,  1879,   248,
     391,  1302,   432,   394,  2814,   657,  1832,   641,   372,   512,
     437,   391,  1948,   391,   394,   648,   394,   657,    26,    27,
     419,   179,   497,   657,  3622,  1824,    26,    27,  1329,  1330,
     327,   570,   391,  2136,   573,   394,   433,   142,   683,   488,
    2898,  2899,    26,    27,  2147,   631,  1347,  4273,  4274,    26,
      27,    26,    27,   481,  3467,  4101,    26,    27,  1359,   543,
    1361,  4154,   541,  1364,    43,   297,   397,    26,    27,  3613,
     375,  4437,  4438,   529,   609,  1376,    26,    27,   327,   391,
     564,  3718,   394,  1384,  1048,    26,    27,    26,    27,  2937,
    2938,   641,  1393,  1394,  2628,   650,   651,   652,   653,  2909,
    2634,    26,    27,   467,   607,   488,   337,   657,   424,   556,
     560,   641,   391,    33,   655,   394,   391,  1418,   367,   394,
    1421,   174,  1921,  1364,   373,   206,   391,   657,  1429,   394,
     830,  1432,   496,  4359,   581,    26,    27,   405,   488,   626,
    1441,   439,    26,    27,   376,  4211,  4212,   626,   488,   391,
    1451,  1452,   394,  1394,  2879,   637,    26,    27,  1320,   655,
     294,  1462,  1463,  1464,  1465,  1466,  1467,   390,  4001,  4002,
     192,  1472,   641,  4687,   197,   256,   241,  1478,  1479,   137,
    1481,  1462,  1463,  1464,  1485,  1466,  2625,   641,   657,  4273,
    4274,   359,   174,   618,  4388,   300,   621,  2437,  1479,   844,
     220,   589,   656,  1365,  1485,  1506,   655,   442,   641,  2927,
     391,  4006,   609,   394,   382,    26,    27,   370,   391,   181,
     354,   394,   394,   656,  1465,   925,  1467,   391,    92,  2830,
     394,    26,    27,    26,    27,   393,  4373,   505,  1400,  4376,
     391,   199,   419,   394,   560,   543,  3971,   610,   391,   272,
     641,   394,   391,  1554,  4320,   394,   225,    26,    27,  2830,
     657,   641,   182,   641,   441,  1506,   657,   420,  1569,  4335,
      26,    27,   655,  1574,  1575,  4359,  2672,   657,   656,  2907,
     259,   488,   641,  2762,  4350,  1586,  3923,   488,  4156,    29,
    4158,   391,   541,    22,   394,  1457,   391,   474,   657,   394,
     269,   649,    74,   282,  1605,   655,  1607,  1608,   656,  1610,
    1611,   392,    26,    27,   391,   655,  2815,   394,    90,  3732,
     385,  1622,  1484,  1624,  2815,   656,  1607,  1608,  1569,   641,
     102,    22,   488,   564,  1575,   391,   424,   391,   394,   297,
     394,   250,   565,  3061,   488,   657,  2145,   369,   370,   372,
     259,  2591,  2151,   375,    26,    27,   533,   589,   593,  4425,
     591,   391,   641,  2299,   394,   406,   641,    26,    27,   181,
     206,  4437,  4438,   237,   114,   239,   641,   626,   657,    26,
      27,   656,  3970,   391,    26,    27,   394,   141,  2187,   504,
    4527,   391,   657,   531,   394,    27,  2499,   209,  1560,   641,
    2199,  3218,    22,   537,   268,    26,    27,   391,   657,   663,
     394,  1712,  1713,   454,   391,   657,   391,   394,   376,   394,
     240,   391,    26,    27,   394,   154,   220,   565,  2196,    16,
     170,   203,   391,  2201,   174,   394,   208,   206,   206,  4505,
     528,   391,   560,   611,   394,    22,  2214,   283,   655,  4515,
     391,   563,   391,   394,   655,   394,   220,  3305,    26,    27,
     641,   245,   202,   154,   204,    22,   391,   446,   641,   394,
    1771,    26,    27,   245,  2973,   656,  2406,   641,   488,  2247,
     220,    68,  2973,   656,  3515,   269,   226,   602,   397,  2288,
     641,   259,   656,  4559,   582,  4561,   245,   269,   641,   655,
     391,   241,   641,   394,    22,  4571,   657,   391,    22,   249,
     394,   655,  1813,  1814,   657,   659,   256,   220,   657,  2318,
    1821,   391,  1823,  1824,   394,  2628,   266,  3061,  4594,   644,
    4596,  2634,  4598,   245,   154,  1836,   624,  3385,   278,  4605,
    1841,   641,  2443,   283,  2312,  1846,   641,   206,  1849,   245,
    4616,   225,   292,   240,  1855,  1856,   656,  1858,    26,    27,
    3697,   656,   584,   266,   641,  4631,  4632,  1868,    26,    27,
    1871,   158,  3271,  1814,  1875,    26,    27,   154,   600,   656,
     391,  4647,  4648,   394,   386,   641,  4652,   641,    26,    27,
      27,  1892,  1893,  1894,  1895,   269,   391,   154,   391,   394,
     656,   394,   656,  3790,  1905,   615,   616,  1908,  1909,  1910,
     149,   641,  2827,  2874,  1855,  1856,   657,  1858,   284,   359,
    1921,   287,   391,    26,    27,   394,   656,  3814,    26,    27,
    1871,   589,   256,   641,  1875,   391,   154,  1938,   394,   488,
     154,   641,   382,    58,   237,   655,   239,   496,   656,  2874,
     422,  3279,   392,  1894,  1895,   611,   656,   641,  1959,    26,
      27,    26,    27,    22,   641,  2905,   641,  1908,  1909,  1910,
    1832,   641,   656,   230,  3105,   206,  3478,   391,   616,   656,
     394,   656,   641,   649,   424,   587,   656,  2486,  2487,   392,
     656,   641,   369,   370,    53,   300,  2885,   656,  1999,  2995,
     641,   657,   641,  3134,  3135,   114,   656,   663,   496,   611,
     633,   634,   656,   249,  2015,   656,   641,   656,   155,   391,
     507,  2022,   394,   663,  3155,    26,    27,  3023,  1890,   507,
     266,   656,   391,   473,   657,   394,   605,  4363,    35,  4365,
    3599,  3600,   278,  3242,   391,   517,   172,   394,   107,   391,
     641,   661,   394,   112,    35,   388,   496,   641,  1999,    92,
     560,    27,   528,    26,    27,   656,   615,   616,   434,   137,
     391,   641,   656,   394,   656,   657,   569,   655,    22,    26,
      27,  2022,    16,   370,   203,  2086,   656,   391,    26,    27,
     394,  3290,  1954,    26,    27,    92,    29,    26,    27,  3290,
      90,    21,   542,   577,    26,    27,   655,  2032,  2033,   460,
     611,   656,   657,  3950,  3951,  3952,   655,   303,   655,   305,
     306,   655,   248,   391,  2049,   556,   394,   599,  2830,   560,
     641,   199,   656,   657,  3636,   321,   391,  3639,  3640,   394,
     249,  2066,  2067,   657,  2145,   656,   641,   655,   641,   436,
    2151,   438,  2153,   135,  3656,  2156,   657,   266,   598,   655,
     228,   656,   663,  2164,   656,   657,  2167,   656,   657,   278,
     610,   611,   641,   655,  2036,  2156,   607,    95,    92,    97,
     656,   657,  2812,  2045,  2046,   641,  2187,  2768,  3327,   155,
     630,   172,   632,   190,  2056,  2057,  2058,  2059,  2199,  2061,
    2062,   663,   261,  2833,  2834,  2835,  2131,  2132,  2133,  2134,
     154,   476,   349,   203,   655,   248,   656,   657,  1012,   655,
     660,   661,   140,   391,  1018,  1019,   394,   641,   157,   297,
    1058,  1059,   655,   391,   655,  4126,   394,   473,   656,   657,
     391,   767,   656,   394,   162,   655,   168,   373,   656,   657,
     359,   248,   566,   391,   236,   245,   394,   137,  3061,   206,
     140,   114,   788,   449,   450,   522,   523,   248,   525,   641,
     527,   656,   657,  1101,    69,   801,   802,   336,  3409,   269,
     198,   186,   641,   137,   656,   542,   230,  2288,   391,  2757,
     655,   394,   557,   391,   641,  3235,   394,  3722,   563,   641,
      29,   656,   657,    26,    27,  3722,   542,   155,   376,   656,
     656,   657,  2313,  3274,   656,   656,   657,  2318,    45,   199,
     641,  3317,   541,   237,   391,   239,   391,   394,   655,   394,
     327,   656,   657,   655,   367,   656,   655,   641,   655,  2340,
     373,   400,   607,  3542,    71,   199,   327,   655,   228,  3274,
    2951,  3542,   656,   655,   268,  3351,   655,   339,  3454,   624,
     655,   343,   499,   500,   473,   655,  3362,   655,   350,  3365,
     367,   655,  2373,   641,   228,   655,   373,   655,  2379,   630,
     631,   655,   633,   349,   635,   114,   641,    21,   656,   655,
     391,   655,   373,   394,   189,  2396,   249,   655,   193,  2400,
     127,   656,   655,   130,   611,  2406,   656,   657,  4451,   204,
     443,   138,  4450,   266,   655,   541,   406,   297,  2419,  3618,
    2421,   305,   306,  4154,   423,   278,  2931,  3618,   391,   156,
     655,   394,   422,   542,  2939,  3983,  3984,   321,   476,   656,
     657,   170,  2443,   297,   391,   174,   655,   394,  2449,   431,
    2451,  2452,  2945,   391,   656,   657,   394,   516,   391,   656,
     657,   394,   391,  2962,  2957,   394,  2959,  2960,   655,   391,
     655,  3495,   394,   641,  1348,   204,  2477,  1351,  2971,   655,
    1354,   655,   400,   641,   655,  2486,  2487,   382,   656,   123,
     641,   220,   656,   657,   553,   655,   376,   226,   656,   655,
     626,   349,   655,   641,   486,   656,   359,   141,   541,   646,
     647,   648,   649,   650,   651,   652,   653,   389,   656,  4356,
     249,   589,   376,  3824,    70,    71,   444,   256,   655,  4125,
     257,   657,   655,   499,   500,   656,   657,   266,   641,   655,
     335,   655,    92,   641,   541,   656,   657,   181,   655,   278,
     123,   660,   556,   656,   283,   656,   657,  2419,   656,   655,
     541,   594,   655,   292,   655,   449,   450,   655,   569,   655,
    2571,  3872,   656,   657,   641,   209,   641,   137,   522,   523,
     524,   525,   526,   527,   655,  2586,   655,    47,   656,   656,
     241,   656,   655,   626,   656,   657,   382,   155,   542,  2600,
     137,  2526,   656,   657,  2529,  2530,   655,  2532,   181,   655,
    2535,  2536,   656,   657,  2539,    90,  4106,  4107,  3248,  2544,
     473,   655,   172,   655,  2549,  2550,  2551,  2552,  2553,   626,
     359,   569,  2557,  2558,   361,  2560,   209,   655,   433,   199,
     641,  2566,  2567,  2568,  2569,   626,   628,  2572,  2573,   655,
    2575,   499,   500,   382,  2655,  2656,   656,   657,   514,   293,
     655,   643,   199,   392,  2665,  2666,  2667,   655,   228,  3270,
     130,   656,   657,   587,   657,  3143,   657,   137,   641,   655,
     646,   647,   648,   649,   650,   651,   652,   653,   655,   542,
     655,   228,    60,   656,   641,   424,   655,   611,   248,   655,
     237,   656,   657,   641,   656,   657,   114,  2632,   641,   589,
     656,   657,   641,    74,  2655,  3183,   656,   657,   655,   641,
    4611,   656,   657,   655,  2665,  2666,  2667,   655,   203,    90,
     655,   137,   192,   656,   140,   589,   655,   297,   655,   199,
     655,   102,  2604,  2605,   473,  2607,   294,  2609,  2610,  2611,
    2612,  2613,  2614,  2615,   656,   657,  2618,  4247,  3257,  2621,
     297,  4251,  2624,    36,   656,   657,    60,   496,   228,   229,
     245,   656,   657,  3720,  3721,    92,   657,   504,  2779,   382,
    2781,   656,   657,  2784,  2785,  2786,  2787,   656,   657,   106,
     424,   349,  2793,   199,   269,    43,   382,  4688,   646,   647,
     648,   649,   650,   651,   652,   653,  3959,   656,   657,    82,
     482,  2812,   650,   542,  2815,   598,   376,   367,   496,    92,
     656,   657,   228,   373,   656,   657,   656,   657,   663,  2830,
     663,  3330,  2833,  2834,  2835,   656,   657,   297,   507,   376,
    3333,   249,   203,   656,   657,  2846,   573,   208,   180,   155,
    3989,   424,  2793,    36,  3435,    38,   656,   657,   266,   137,
     494,   655,   140,  3464,   656,   657,   283,   140,   204,   598,
     278,   537,   137,  3820,   556,   602,   656,   657,  2879,   656,
     657,   514,   611,   537,   245,   656,   657,    70,    71,   294,
      73,   297,   171,   443,   528,   656,   657,   164,   165,    82,
     360,   630,   204,   632,   656,   657,   101,   155,   269,    92,
     657,   371,  3307,  3308,   155,   375,   376,   100,   657,  4409,
    4410,   199,   383,   557,   137,  4124,   552,   656,   657,  2930,
     656,   660,   661,  4124,   199,  2942,  3761,  3762,   170,  2940,
    2941,  2948,   140,   126,    92,  3885,  2947,   422,  1219,  1220,
     228,   359,   126,   259,   271,  3254,  3255,   140,   106,   662,
     143,  2962,  2963,   228,   237,  2972,   239,  2968,  3467,    16,
     376,  2978,  2973,   137,   382,   655,   140,  2984,  2985,  3848,
    3849,   125,  2983,    14,  2846,    47,   199,   560,  4127,   172,
     624,   541,  3861,   487,  2995,   123,   269,   624,  4022,  3868,
     148,  3002,  3003,   259,  4028,  3211,  3212,  3008,   657,   582,
     406,   259,    67,  3014,   452,   228,   186,  3018,   114,   297,
     126,   137,  3023,   238,   140,  3894,  3895,  2952,   657,   589,
     347,   663,   297,  3014,   282,   199,  3524,  3525,   657,    82,
    2965,    22,  2983,   349,   594,   406,  3993,  3994,  4187,  3996,
    3997,   624,   589,   181,   237,   372,   239,   629,  3059,   656,
    3559,   422,   245,   656,   228,   473,    26,    27,   130,   154,
     253,    19,   657,  3074,   155,   137,   626,   656,   656,  4212,
    3081,   209,   663,   199,   297,   268,   656,  2949,  2950,   218,
     648,   649,   650,   651,   652,   653,   369,   370,   376,  3100,
     663,   349,   375,   655,   282,   382,   566,   657,   349,   382,
     570,   376,   228,   573,   663,  2977,   172,   245,   435,   657,
     662,   369,   370,   271,   584,   294,   294,   294,   294,   589,
     192,    60,   592,   297,   542,   294,  4275,   199,   294,   657,
    3081,   657,   174,   326,   556,   155,  3008,   655,   289,   422,
     657,   657,   407,   249,   577,  1856,   517,  1858,   657,   577,
     406,   344,   657,   376,   657,   293,   228,   229,   174,  4368,
     266,   131,   132,   133,   134,   135,  3177,  4368,   259,   657,
      82,   297,   278,   589,  3185,   657,  4101,   537,   648,   649,
     259,   650,   260,   499,   500,   324,   325,  3798,   446,   347,
     329,   330,   554,  3784,  3066,   194,   204,  1908,  1909,  1910,
     657,   528,   376,  1140,  1141,  1142,   399,   180,   401,   492,
     511,   369,   370,  3224,   372,   537,   409,   411,   150,   382,
    1157,   657,   656,  3732,   410,   297,   657,    29,   599,   605,
     610,  3242,  3243,   636,    36,  3246,   657,  3248,   209,   206,
     650,   499,   500,   656,   656,   520,  3257,   656,   499,   500,
     376,  1188,  3263,   359,  1191,   656,   656,   515,   349,  3270,
    3271,   656,   656,   233,   234,   235,   236,   656,   206,   657,
    4304,   655,  3902,   656,  1211,  1212,   382,   435,  1215,  3290,
      82,   419,  4425,   649,  3301,   478,   424,   656,   360,   656,
      92,  3800,  4242,   656,   497,   656,  3307,  3308,  1235,  1236,
     657,   589,  4465,   375,   376,   657,  3317,   656,   656,  3320,
     655,  4261,   656,  3185,   589,   655,   599,   598,   653,  3330,
     656,   655,   566,  3334,   657,  3336,  3337,   566,   566,   349,
     646,   647,   648,   649,   650,   651,   652,   653,   140,  3350,
    3351,   534,   535,   536,   577,   630,   247,    71,   541,  3965,
     657,  3362,   655,   548,  3365,   655,   494,   655,    22,   218,
     206,  3870,   655,   655,   557,   280,   589,   473,   561,   339,
     528,   341,   342,   343,   206,   657,   184,   663,  3389,   657,
     350,  3392,   656,   663,   663,   477,  3397,   580,   646,   647,
     648,   649,   650,   651,   652,   653,   647,   648,   649,   650,
     651,   652,   653,   127,  3276,   598,   130,   432,   499,   500,
     212,   663,  4575,  3424,   138,   589,  4559,   657,  4561,   557,
     603,   391,   496,   657,   394,   563,   657,   204,    58,   357,
     528,   528,   156,   487,  3445,   237,   542,   239,   528,   528,
     528,  3392,  4476,  4477,   582,  4479,   455,   204,   655,   174,
     293,  4594,  4661,   174,   174,   174,  3467,   174,   174,  3331,
    4661,   431,  3971,   589,   657,  4674,   174,   269,  3340,   607,
    4679,   174,   174,  4674,   174,  4684,   200,   174,  4679,   499,
     500,   174,   174,  4684,   174,   174,   624,   174,  4631,  4632,
     174,    92,   174,   174,   566,   174,   174,   123,   570,   100,
     657,   573,   655,   382,  4538,   382,  4540,  4541,   382,   611,
     656,   663,   584,   168,   656,   485,   486,   589,   255,   255,
     592,   656,   663,   656,   656,   126,  4142,  3538,   656,   656,
     174,  3542,   656,   257,   657,   657,   657,   577,   663,   577,
     577,   637,  3414,  4227,   663,   566,   289,    98,  3559,    58,
     655,   655,    36,   577,    38,   646,   647,   648,   649,   650,
     651,   652,   653,   174,   389,   206,   206,   369,   370,  3441,
     655,   172,   206,   375,   206,   263,   648,   649,   566,   256,
     382,   566,   208,   437,   657,   184,    70,    71,   376,    73,
     266,   266,   395,  4627,   340,  3606,   126,   126,    82,  3610,
    4191,    90,   406,  4643,   150,   406,   406,  3618,    92,   577,
     267,  3622,   557,  3624,   267,   406,   100,   557,   150,   245,
     422,   406,    58,   406,   408,    66,   406,   406,   648,   649,
     650,   651,   652,   653,   358,    76,   406,   361,  4229,   388,
     577,   655,   126,   655,   245,   655,   220,   174,   566,   470,
      91,   655,   406,   650,   655,   655,   140,   663,   628,   143,
      22,    23,   103,   104,   105,   257,   257,   293,   663,   656,
     197,   641,   642,   643,   656,   656,   174,   175,  3689,    66,
     121,  3692,   656,   210,   656,   632,   650,   656,   172,    76,
     492,   656,  1629,   656,   655,   222,   382,   241,   657,  3710,
      23,   656,   284,   656,    91,   406,   657,   656,  3719,  3720,
    3721,  3722,   210,   663,   206,   439,   103,   104,   105,   604,
     259,  3732,   656,   656,   222,   326,   437,   174,   657,   266,
     266,   657,  4682,   663,   121,   269,   269,   420,    92,   382,
     382,    29,   656,   344,   657,   272,   655,   274,   514,   382,
     656,   113,   656,   237,   382,   239,   392,   657,   655,  4370,
     656,   245,    58,   490,   262,   656,   367,  4276,   632,   253,
     437,   161,   218,   276,   301,  3786,   274,  1714,   656,   488,
     220,  1718,   144,   498,   268,   657,   266,   266,   657,  3800,
     113,   269,   655,   269,   632,   657,   158,   599,   282,  3810,
     657,   656,   655,   301,  1741,    96,   157,   506,   656,  3820,
     244,   483,   656,    29,  3825,   657,  3833,   656,   514,   181,
    3831,   144,   655,   185,   655,   655,   283,  3699,  3839,   656,
     656,    45,   656,   656,   196,   158,    45,    71,  4522,   366,
     257,   376,   326,   656,   656,   656,   656,   346,   271,   573,
     292,   432,   256,    58,   632,   226,   218,   655,   181,  3870,
     344,   389,   185,   655,   657,   363,   656,   663,   494,   346,
     657,   611,   611,   196,   655,   140,   140,   418,   602,  4388,
    3831,   655,   655,   245,   656,  3896,   560,    22,   663,   657,
     252,   517,    45,   376,   421,   218,   657,   338,   346,    34,
      27,   188,   269,  3914,  3915,   566,   566,   566,   560,   615,
      45,    46,   656,   611,   355,   399,  4532,   401,   323,    24,
     611,   655,   245,   655,   655,   409,   655,   655,   140,   252,
     292,   557,   655,   269,   560,    70,    71,   563,   604,    29,
     541,   621,   269,    78,  4535,   375,   532,  3958,    83,   470,
     621,   338,  4636,   184,   477,   151,   557,   389,   604,   632,
    3971,   655,  4471,   547,  3915,   371,   256,   382,   355,   292,
     169,   656,    42,   599,   109,   629,   111,   616,   113,  4663,
     204,   607,  3993,  3994,   376,  3996,  3997,   657,   656,   124,
     655,   184,   655,   655,   478,   664,    72,   655,   568,  3871,
     656,   150,   150,   172,   655,   424,    84,  3958,   655,   204,
     145,   146,   629,    42,   206,    74,   389,    74,   656,   403,
     657,   656,  4613,   548,  4320,   285,   655,   445,   469,    45,
     256,   656,   656,  4044,   168,   148,   171,   172,   661,  4335,
     389,   389,   177,   484,  4055,   180,   157,   655,    58,  4060,
     534,   535,   536,    58,  4350,   167,    58,   541,    58,    58,
     655,   655,    78,   425,    15,    45,   382,   429,   382,   629,
     168,   299,   207,   557,   209,   240,   661,   561,  4089,  4090,
     163,   664,   217,   445,   219,   139,   292,    21,   655,   556,
      58,   453,  4103,    58,  4685,    58,   580,   484,    78,   461,
     604,   144,   425,   544,    64,   661,   656,   479,   477,   244,
     245,   246,   657,  4124,   598,   269,   656,   168,   569,  4130,
     223,   562,   445,   661,   238,   656,   488,    64,   459,   204,
     453,   147,   267,   657,    58,   657,   656,   204,   461,   501,
     502,   657,   204,   569,   631,  4156,   140,  4158,   241,   376,
     655,   496,   205,  4065,   289,   657,   172,   544,  2325,  3697,
     176,  4670,  2623,  3708,  3428,   488,  4177,   147,   996,  2515,
    4095,   655,  4044,   691,  4230,   562,  4445,  3706,   501,   502,
    1055,  4446,  3710,  4663,   319,  3913,  4624,    55,   615,   551,
    1904,  1846,   172,  4204,  2779,   211,   176,  3899,  4133,  4134,
    3899,  3899,  4137,  4138,  4139,  4140,  3899,  3899,  3899,  4505,
    3899,  4633,  3899,  3899,  3899,  4502,   232,  4313,  4502,  4515,
     582,  4438,  3899,  3899,  3899,  4339,  4338,  2585,   551,  1099,
     246,   211,  1563,  4099,  1815,  2079,  3360,  2807,  3922,  2379,
    3224,   708,   604,  4130,   606,  1381,   713,  3959,  3540,  4575,
    4265,   386,   232,  4473,  4532,  3715,   551,  4142,  2578,   582,
    3067,  1600,  3445,  3002,  2586,  4276,   246,  3005,  3825,  3832,
    4550,  4282,  3647,  4020,  4191,  4571,  3126,   412,   294,  3681,
    4370,   604,   749,   606,  3870,  3881,  2486,  4293,   423,   424,
      18,    18,   427,   428,  4409,  2160,  4251,  4410,  4247,   766,
    4596,  4236,  4598,   319,  4238,  4103,  2585,  4028,  2663,  4605,
    2998,  1024,  1068,   448,   294,  3837,  1522,  2463,  2086,  4345,
    4616,  2391,  3605,  1596,  2793,  1894,  1575,  2366,  2410,  3219,
      36,  3901,    38,   636,  4345,  2281,  4271,  4272,  1915,   319,
     946,   808,   809,   810,   811,  4280,  3185,  2768,  4359,  1183,
    4189,  4647,  4648,   820,  2195,  2191,  4652,  4368,   493,  3281,
    2478,  2280,  2472,  4235,    70,    71,  4161,    73,  3986,  4487,
    3424,   506,  4488,  3811,  3618,  1157,    82,  4388,  1539,  2879,
    2306,  2994,  4613,  3800,  2415,  2164,    92,  1364,  2360,  1394,
    3542,  2395,    22,    23,   100,  3237,  3236,  4269,  4270,  4368,
    1622,  3290,   537,   626,   704,  1995,   541,   423,  1994,  1470,
     614,  2457,   614,  3624,  3222,  1835,   432,  1401,  4573,  4395,
     126,  4608,  4483,  4679,   559,   560,  4684,  3872,  3242,  3270,
     611,   447,  2440,  1429,   140,  3271,   903,   143,  1768,   611,
    1941,  2426,  2432,   423,  2433,  1875,   605,   928,  1356,   465,
    3948,  3954,   432,  1419,   606,  1605,  2781,    -1,   933,   547,
    4471,   547,   691,    -1,    -1,    -1,   172,   447,    -1,   691,
     691,    -1,    -1,   608,    -1,    -1,  4487,  4488,    -1,    -1,
      -1,    -1,    -1,   113,   619,   465,    -1,  4359,    -1,    -1,
     506,    -1,   627,   509,    -1,    -1,  4507,    -1,    -1,    -1,
      -1,    -1,    -1,  4514,    -1,    -1,    -1,  4379,  4380,    -1,
      -1,    -1,    -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,
      -1,   537,    -1,    -1,    -1,    -1,   506,    -1,   158,   509,
      -1,   237,    -1,   239,    -1,    -1,    -1,    -1,    -1,   245,
     556,    -1,    -1,   559,   560,    -1,    -1,   253,    -1,    -1,
      -1,   181,    -1,    -1,    -1,   185,    -1,   537,    -1,    -1,
      -1,    -1,   268,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   559,
      -1,    -1,    -1,    -1,  4595,    -1,    -1,    -1,   218,  4600,
      -1,    -1,   608,   713,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1081,   245,    -1,    -1,    -1,    -1,
     326,    -1,   252,    -1,    -1,  4636,    -1,    -1,   608,   749,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   766,    -1,    -1,    -1,
    4661,    -1,  4663,    -1,    -1,    -1,    -1,    -1,    -1,  4670,
      -1,    -1,   292,  4674,    -1,    -1,    -1,    -1,  4679,  1136,
    1137,    -1,    -1,  4684,    -1,  4547,    -1,    -1,  1145,  1146,
    1147,  1148,  1149,  1150,  1151,  1152,  1153,  1154,  1155,  1156,
      -1,   811,    -1,   399,    -1,   401,    -1,  1164,  1165,    -1,
    1167,  1168,    -1,   409,    -1,  1172,    -1,    -1,  1175,  1176,
    1177,  1178,    -1,  1180,  1181,  1182,    -1,    -1,    -1,    -1,
      -1,    -1,  1189,  1190,    -1,  1192,  1193,  1194,  1195,  1196,
      -1,    -1,  1199,  1200,  1201,  1202,  1203,  1204,  1205,  1206,
    1207,  1208,    -1,  1210,    -1,    -1,  1213,  1214,    -1,    -1,
      -1,  1218,    -1,    -1,    -1,  1222,  1223,  1224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1237,  1238,   478,    -1,    -1,    -1,    -1,    -1,  1245,    -1,
      -1,    -1,    -1,   903,    -1,  1252,  1253,  1254,    -1,  1256,
      -1,    -1,    -1,    -1,    -1,   425,  1263,  1264,  1265,   429,
    1267,  1268,  1269,  1270,  1271,    -1,  1273,  1274,  1275,  1276,
    1277,  1278,  1279,  1280,    -1,   445,    -1,  1284,  1285,    -1,
      -1,    -1,    -1,   453,    -1,    -1,    -1,    -1,   534,   535,
     536,   461,    -1,    -1,    -1,   541,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,   557,    38,    -1,    -1,   561,    -1,    -1,   488,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   501,   502,    -1,   580,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    -1,   598,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1368,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   131,   132,   133,   134,
     135,   551,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     242,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   582,    -1,   140,    -1,    -1,   143,    -1,    -1,
      -1,  1081,  1429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1439,    -1,   604,    -1,   606,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,  1454,    -1,    -1,
     302,  1458,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,    -1,    -1,    -1,    -1,    -1,  1136,  1137,   233,   234,
     235,   236,    -1,    -1,    -1,  1145,  1146,    -1,    -1,  1149,
    1150,  1151,  1152,  1153,  1154,  1155,  1156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1164,  1165,  1513,  1167,  1168,    -1,
      -1,   237,    -1,   239,    -1,  1175,  1176,  1177,  1178,   245,
      -1,  1181,    -1,    -1,    -1,    -1,    -1,   253,    -1,  1189,
    1190,    -1,  1192,  1193,    -1,    -1,    -1,    -1,    -1,  1199,
    1200,  1201,   268,    -1,  1204,  1205,  1206,  1207,  1208,    -1,
    1210,    -1,    -1,  1213,  1214,    -1,    -1,    -1,  1218,    -1,
      -1,    -1,  1222,  1223,  1224,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1237,  1238,    -1,
      -1,    -1,    -1,    -1,   339,  1245,   341,   342,   343,    -1,
      -1,    -1,  1252,  1253,  1254,   350,    -1,   449,   450,    -1,
     326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,    -1,
      -1,    -1,    -1,    -1,    -1,  1285,    -1,    -1,  1635,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   399,    -1,   401,   431,    -1,    -1,    -1,
      -1,    -1,    -1,   409,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1368,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     485,   486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1747,  1748,  1749,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   478,    -1,  1761,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1429,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1439,
    1787,    -1,    -1,    -1,    -1,    -1,  1793,    -1,    -1,  1796,
      -1,  1798,    -1,    -1,  1454,    -1,    -1,  1804,  1458,  1806,
    1807,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   534,   535,
     536,    -1,    -1,    -1,    -1,   541,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   557,    -1,    -1,    -1,   561,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1513,   580,    -1,    -1,    -1,     3,     4,
      -1,     6,    -1,     8,    -1,    10,    11,    12,    -1,    -1,
      -1,    -1,   598,   628,    -1,    -1,    -1,    -1,    23,    -1,
      25,    -1,  1889,    -1,    -1,    -1,    -1,   642,   643,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,    -1,    -1,    -1,    73,    74,
      -1,    -1,  1939,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1948,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   113,    -1,
      -1,    -1,    -1,    -1,    -1,  1635,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
     145,   146,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   157,   158,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   170,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   216,  2079,   218,    -1,    -1,    -1,    -1,   223,    -1,
      -1,    -1,   227,    -1,    -1,    -1,    -1,  1747,  1748,  1749,
      -1,    -1,    -1,    -1,  2101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   252,    -1,   254,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   270,    -1,  1787,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1796,    -1,  1798,    -1,
      -1,    -1,    -1,   288,    -1,    -1,    -1,   292,    -1,    -1,
      -1,    -1,  2159,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2173,    -1,    -1,    -1,
    2177,    -1,    -1,    -1,    -1,  2182,  2183,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2191,    -1,  2193,    -1,  2195,  2196,
    2197,  2198,    -1,    -1,  2201,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2211,    -1,  2213,  2214,    -1,  2216,
    2217,  2218,  2219,    -1,  2221,    -1,    -1,  2224,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2233,    -1,    -1,  1889,
      -1,    -1,    -1,  2240,    -1,  2242,    -1,  2244,  2245,  2246,
    2247,    -1,   387,    -1,  2251,  2252,  2253,    -1,    -1,    -1,
    2257,  2258,  2259,    -1,  2261,    -1,  2263,    -1,  2265,   404,
    2267,   406,  2269,    -1,    -1,    -1,    -1,  2274,    -1,    -1,
      -1,    -1,    -1,    -1,   419,    -1,    -1,    -1,    -1,  1939,
      -1,    -1,  2289,    -1,    -1,   430,    -1,    -1,    -1,  2296,
      -1,    -1,  2299,    -1,    -1,    -1,    -1,    -1,  2305,    -1,
      -1,  2308,    -1,    -1,    -1,  2312,    -1,   452,    -1,    -1,
     455,    -1,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   472,    -1,   474,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,
      -1,    -1,    -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   496,    -1,    -1,    -1,    -1,   501,   502,   503,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2374,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   533,    -1,
      -1,    -1,    -1,    -1,    -1,   540,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2441,    -1,    -1,    -1,    -1,    -1,
     585,  2101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   597,    -1,    -1,    -1,   601,    -1,    -1,   604,
      -1,    -1,    -1,    -1,    -1,   610,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,
     645,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     655,    -1,    -1,  2173,    -1,    -1,    -1,  2177,    -1,    -1,
      -1,    -1,  2182,  2183,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2191,    -1,  2193,    -1,  2195,    -1,  2197,  2198,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2211,    -1,  2213,    -1,    -1,  2216,  2217,  2218,  2219,
      -1,  2221,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2578,    -1,  2233,    -1,    -1,    -1,    -1,    -1,    -1,
    2240,    -1,  2242,    -1,  2244,  2245,  2246,    -1,    -1,    -1,
      -1,  2251,  2252,  2253,    -1,    -1,    -1,  2257,  2258,  2259,
      -1,  2261,    -1,  2263,    -1,  2265,    -1,  2267,    -1,  2269,
      -1,    -1,    -1,    -1,  2274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2289,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2305,    -1,    -1,  2308,    -1,
      -1,    -1,    -1,    -1,  2661,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2676,
      -1,    -1,    -1,  2680,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2707,  2708,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,     4,    -1,     6,    -1,     8,
    2727,    10,    11,    12,    -1,    -1,    -1,    -1,    -1,  2736,
      -1,  2738,    -1,  2740,    23,    -1,    25,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2757,    -1,    -1,    -1,    -1,  2762,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    -1,    68,
      -1,  2441,  2789,    -1,    73,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,
      -1,    -1,    -1,    -1,  2861,   144,   145,   146,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   157,   158,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   185,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2912,    -1,    -1,    -1,    -1,
      -1,    -1,   201,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,    -1,   218,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,   227,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   252,    -1,   254,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2998,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,    -1,   292,  3011,  3012,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2676,    -1,    -1,    -1,
    2680,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2707,  2708,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2727,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2736,    -1,  2738,    -1,
    2740,    -1,    -1,  3090,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   387,    -1,
      -1,  3108,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   404,    -1,   406,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2789,
     419,    -1,    -1,  3140,  3141,    -1,  3143,    -1,    -1,    -1,
      -1,   430,    -1,    -1,    -1,  3152,    -1,    -1,    -1,    -1,
    3157,    -1,    -1,  3160,    -1,  3162,  3163,    -1,    -1,    -1,
      -1,    -1,    -1,   452,    -1,    -1,   455,    -1,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,  3183,    -1,    -1,    -1,
      -1,    -1,    -1,   472,    -1,   474,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,    -1,    -1,    -1,    -1,    -1,   488,
      -1,  2861,    -1,    -1,    -1,    -1,  3213,   496,    -1,    -1,
      -1,    -1,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3236,
      -1,    -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,    21,
      -1,    23,    -1,    25,   533,    -1,    -1,    -1,    -1,    -1,
      -1,   540,  2912,    -1,    36,    -1,    38,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3292,    68,    -1,    -1,    -1,
      -1,    73,    74,    -1,    -1,    -1,   585,    -1,    80,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   597,    -1,
      92,    -1,   601,    -1,    -1,   604,    -1,    -1,   100,    -1,
      -1,   610,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1,    -1,
     639,  3011,  3012,    -1,    -1,    -1,   645,    -1,   140,    -1,
      -1,   143,    -1,    -1,    -1,    -1,   655,    -1,    -1,   151,
     152,    -1,    -1,    -1,    -1,    -1,   158,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   166,    -1,    -1,    -1,   170,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     202,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3108,    -1,
      -1,    -1,    -1,    -1,    -1,   237,    -1,   239,    -1,    -1,
      -1,   243,    -1,   245,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3140,  3141,    -1,    -1,    -1,    -1,   268,    -1,    -1,    -1,
      -1,    -1,  3152,    -1,    -1,    -1,    -1,  3157,    -1,    -1,
    3160,    -1,  3162,  3163,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3543,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,    -1,
      44,    45,    -1,  3213,    -1,    -1,    50,    -1,    52,    -1,
      54,    55,   344,    -1,    -1,    -1,   348,    -1,    -1,    -1,
      -1,    -1,  3579,    -1,    -1,    -1,  3236,    71,    -1,    -1,
    3587,    -1,    -1,    -1,    -1,  3592,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   387,    -1,    -1,    -1,    -1,
     392,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,   401,
      -1,    -1,    -1,    -1,   406,    -1,    -1,   409,    -1,    -1,
      -1,    -1,  3292,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   138,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   440,    -1,
      -1,    -1,   156,    -1,    -1,    -1,    -1,  3674,    -1,    -1,
      -1,    -1,   454,   455,   456,   457,    -1,    -1,    -1,   173,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   198,    -1,   200,    -1,  3715,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   213,
     214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3746,
      -1,    -1,    -1,  3750,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   534,   535,   536,    -1,    -1,    -1,    -1,   541,
      -1,    -1,    -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3781,   557,    -1,    -1,    -1,   561,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3795,    -1,
      -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,   580,    -1,
      -1,   295,   296,   585,   298,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   598,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   332,   333,
     334,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,    -1,    -1,    -1,   358,    -1,    -1,   361,    -1,    -1,
      -1,    -1,    -1,    -1,  3881,    -1,    -1,    -1,    -1,   661,
      -1,    -1,    -1,  3543,   378,   379,    -1,    -1,    -1,    -1,
      -1,    16,  3899,    -1,    -1,    -1,    21,    -1,    23,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,  3579,
     414,   415,    -1,    -1,    -1,    -1,    -1,  3587,    -1,    -1,
      -1,    -1,  3592,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    68,    -1,   439,    -1,    -1,    73,    -1,
      -1,    -1,  3959,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3969,    -1,    -1,    -1,    -1,    92,  3975,    -1,
    3977,    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   492,    -1,
      -1,   126,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   140,   510,    -1,   143,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,
      -1,    -1,    -1,   158,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   166,    -1,    -1,    -1,  4052,    -1,   172,    -1,    -1,
      -1,  4058,  4059,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,   202,    -1,   573,
     574,   575,   576,    -1,    -1,    -1,  3746,    -1,    -1,    -1,
    3750,    -1,    -1,    -1,    -1,  4102,    -1,    -1,    -1,  4106,
    4107,    -1,    -1,    -1,  4111,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   237,    -1,   239,    -1,    -1,    -1,    -1,    -1,
     245,  3781,    -1,   617,   618,    -1,    -1,    -1,   253,    -1,
      -1,    -1,    -1,    -1,    -1,  3795,    -1,    -1,    -1,    -1,
    4147,    -1,    -1,   268,    -1,    -1,    -1,    -1,    -1,   643,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4197,    -1,  4199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   326,  4209,    -1,  4211,  4212,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,
      -1,    -1,    -1,   348,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4247,    -1,    -1,    -1,  4251,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   392,    -1,    -1,
      -1,    -1,    -1,    -1,   399,    -1,   401,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,  4295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3969,
      -1,  4318,    -1,  4320,    -1,  3975,    -1,  3977,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4335,  4336,
     455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4350,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   478,    -1,  4362,    -1,    -1,    -1,    -1,
      -1,    -1,  4369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4052,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4407,    -1,  4409,  4410,    -1,    -1,    -1,    -1,    -1,   534,
     535,   536,    -1,    -1,    -1,    -1,   541,  4424,  4425,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4437,  4438,   557,    -1,    -1,    -1,   561,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4111,    -1,    -1,    -1,   580,    -1,    -1,  4465,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   598,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4147,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4505,    -1,
      -1,    -1,    -1,    -1,    -1,  4512,    -1,    -1,  4515,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4197,    -1,  4199,
      -1,    -1,    -1,    -1,    -1,  4552,    -1,    -1,    -1,  4209,
      -1,    -1,  4559,    -1,  4561,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4571,    -1,    -1,    -1,  4575,    -1,
      -1,  4578,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4594,    -1,  4596,
      -1,  4598,    -1,    -1,    -1,    -1,    -1,    -1,  4605,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4616,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4631,  4632,    -1,    -1,    -1,    -1,
    4637,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4647,  4648,    -1,    -1,    -1,  4652,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4318,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4336,    -1,    -1,    -1,
    4687,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4369,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4424,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4512,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4552,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      15,    -1,    17,    18,    19,    20,    21,    -1,  4578,    24,
      -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    56,    57,    -1,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,  4637,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,  4687,    -1,    -1,
     135,   136,   137,    -1,    -1,   140,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,   221,    -1,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,   240,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,   252,   253,   254,
     255,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
     275,   276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,    -1,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,   566,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,   578,   579,   580,   581,    -1,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,   612,   613,   614,
     615,   616,    -1,    -1,   619,   620,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,
      -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,
     655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,    15,
      -1,    17,    18,    19,    20,    21,    22,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,   119,    -1,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
     136,   137,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,   221,    -1,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,   240,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,   252,   253,   254,   255,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,    -1,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
     566,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,   612,   613,   614,   615,
     616,    -1,    -1,   619,   620,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,
      -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,   655,
      -1,    -1,   658,   659,    -1,    -1,   662,   663,    15,    -1,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,   136,
     137,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,    -1,    -1,   205,   206,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,   221,    -1,   223,   224,   225,    -1,
     227,   228,   229,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,   240,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,   252,   253,   254,   255,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,    -1,    -1,   365,   366,
     367,   368,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,   566,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,   612,   613,   614,   615,   616,
      -1,    -1,   619,   620,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,
      -1,   648,   649,    -1,    -1,    -1,    -1,   654,   655,    -1,
      -1,   658,   659,    -1,    -1,   662,   663,    15,    -1,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,    -1,    -1,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,   119,    -1,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,    -1,    -1,   135,   136,   137,
      -1,    -1,   140,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,    -1,    -1,   205,   206,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,   221,    -1,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,   240,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,   252,   253,   254,   255,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
     278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,    -1,    -1,   365,   366,   367,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,   566,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,   612,   613,   614,   615,   616,    -1,
      -1,   619,   620,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,
     648,   649,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,
     658,   659,    -1,    -1,   662,   663,    15,    -1,    17,    18,
      19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,
      -1,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    -1,    -1,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    57,    -1,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,   106,   107,    -1,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,
      -1,   140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,
      -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,    -1,    -1,   205,   206,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,   221,    -1,   223,   224,   225,    -1,   227,   228,
     229,    -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,
     239,   240,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,   252,   253,   254,   255,    -1,    -1,   258,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,   278,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,    -1,    -1,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     399,   400,    -1,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,    -1,   463,    -1,   465,   466,    -1,   468,
     469,   470,    -1,    -1,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
      -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,   566,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
     609,    -1,    -1,   612,   613,   614,   615,   616,    -1,    -1,
     619,   620,    -1,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,
     649,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,
     659,    -1,    -1,   662,   663,    15,    -1,    17,    18,    19,
      20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    -1,    57,    -1,    59,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,   106,   107,    -1,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,   119,
      -1,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,    -1,
     140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
      -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,   221,    -1,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,   239,
     240,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,   252,   253,   254,   255,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,    -1,   278,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,    -1,    -1,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,
     400,    -1,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,    -1,   463,    -1,   465,   466,    -1,   468,   469,
     470,    -1,    -1,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,    -1,
      -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,   504,   505,   506,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,   566,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,
      -1,    -1,   612,   613,   614,   615,   616,    -1,    -1,   619,
     620,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,
      -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,
      -1,    -1,   662,   663,    15,    -1,    17,    18,    19,    20,
      21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    45,    46,    47,    48,    49,    50,
      51,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,    -1,   109,   110,
     111,   112,    -1,    -1,   115,   116,   117,   118,   119,    -1,
     121,   122,   123,    -1,   125,   126,   127,   128,   129,   130,
      -1,    -1,    -1,    -1,   135,   136,   137,    -1,    -1,   140,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
     221,    -1,   223,   224,   225,    -1,   227,   228,   229,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,   240,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,   252,   253,   254,   255,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,   278,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,   345,   346,    -1,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,    -1,    -1,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,   459,   460,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,   566,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,   583,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,   612,   613,   614,   615,   616,    -1,    -1,   619,   620,
      -1,   622,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,    -1,
      -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,    -1,
      -1,   662,   663,    15,    -1,    17,    18,    19,    20,    21,
      22,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    -1,    -1,    45,    46,    47,    48,    49,    50,    51,
      -1,    53,    54,    55,    -1,    57,    -1,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
      -1,   103,   104,   105,   106,   107,    -1,   109,   110,   111,
     112,    -1,    -1,   115,   116,   117,   118,   119,    -1,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,   130,    -1,
      -1,    -1,    -1,   135,   136,   137,    -1,    -1,   140,   141,
      -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,
     162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
     192,   193,   194,    -1,   196,   197,   198,   199,    -1,   201,
      -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,    -1,   217,    -1,   219,    -1,   221,
      -1,   223,   224,   225,    -1,   227,   228,   229,    -1,   231,
     232,    -1,    -1,    -1,   236,   237,   238,   239,   240,    -1,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,
     252,   253,   254,   255,    -1,    -1,   258,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,   330,    -1,
      -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,    -1,    -1,   365,   366,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,    -1,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,
     402,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,    -1,   456,   457,   458,   459,   460,   461,
      -1,   463,    -1,   465,   466,    -1,   468,   469,   470,    -1,
      -1,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
     492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,
     502,    -1,   504,   505,   506,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   554,   555,   556,   557,    -1,   559,    -1,   561,
     562,   563,   564,    -1,   566,   567,   568,    -1,   570,   571,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,
      -1,   583,   584,   585,   586,   587,   588,   589,   590,   591,
     592,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,
     612,   613,   614,   615,   616,    -1,    -1,   619,   620,    -1,
     622,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,    -1,   648,   649,    -1,    -1,
      -1,    -1,   654,   655,    -1,    -1,   658,   659,    -1,    -1,
     662,   663,    15,    -1,    17,    18,    19,    20,    21,    -1,
      -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      -1,    -1,    45,    46,    47,    48,    49,    50,    51,    -1,
      53,    54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,   104,   105,   106,   107,    -1,   109,   110,   111,   112,
      -1,    -1,   115,   116,   117,   118,   119,    -1,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,   130,    -1,    -1,
      -1,    -1,   135,   136,   137,    -1,    -1,   140,   141,    -1,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,
      -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,    -1,   188,   189,   190,   191,   192,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
      -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,    -1,   217,    -1,   219,    -1,   221,    -1,
     223,   224,   225,    -1,   227,   228,   229,    -1,   231,   232,
      -1,    -1,    -1,   236,   237,   238,   239,   240,    -1,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,   252,
     253,   254,   255,    -1,    -1,   258,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,    -1,   278,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,    -1,    -1,
      -1,    -1,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
      -1,    -1,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,    -1,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,   402,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,    -1,   456,   457,   458,   459,   460,   461,    -1,
     463,    -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,
     493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,
      -1,   504,   505,   506,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,    -1,   559,    -1,   561,   562,
     563,   564,    -1,   566,   567,   568,    -1,   570,   571,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,
     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
     593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,
     603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,   612,
     613,   614,   615,   616,    -1,    -1,   619,   620,    -1,   622,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,
     643,    -1,    -1,    -1,    -1,   648,   649,    -1,    -1,    -1,
      -1,   654,   655,    -1,    -1,   658,   659,    -1,    -1,   662,
     663,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    45,    46,    47,    48,    49,    50,    51,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,   110,   111,   112,    -1,
      -1,   115,   116,   117,   118,   119,    -1,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,    -1,    -1,
      -1,   135,   136,   137,    -1,    -1,   140,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,   192,   193,
     194,    -1,   196,   197,   198,   199,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,   221,    -1,   223,
     224,   225,    -1,   227,   228,   229,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,   240,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,   252,   253,
     254,   255,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,   278,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,   360,   361,   362,    -1,
      -1,   365,   366,   367,   368,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,   459,   460,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,   553,
     554,   555,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,   566,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,   583,
     584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,   612,   613,
     614,   615,   616,    -1,    -1,   619,   620,    -1,   622,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,
     654,   655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,
      15,    -1,    17,    18,    19,    20,    21,    -1,    -1,    24,
      -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      45,    46,    47,    48,    49,    50,    51,    -1,    53,    54,
      55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,   110,   111,   112,    -1,    -1,
     115,   116,   117,   118,   119,    -1,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,
     135,   136,   137,    -1,    -1,   140,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,    -1,   188,   189,   190,   191,   192,   193,   194,
      -1,   196,   197,   198,   199,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,   221,    -1,   223,   224,
     225,    -1,   227,   228,   229,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,   240,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,   252,   253,   254,
     255,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
     345,   346,    -1,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,   360,   361,   362,    -1,    -1,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,   402,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,   459,   460,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,   566,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,   612,   613,   614,
     615,   616,    -1,    -1,   619,   620,    -1,   622,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,
      -1,    -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,
     655,    -1,    -1,   658,   659,    -1,    -1,   662,   663,    15,
      -1,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    45,
      46,    47,    48,    49,    50,    51,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,   110,   111,   112,    -1,    -1,   115,
     116,   117,   118,   119,    -1,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,
     136,   137,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,   192,   193,   194,    -1,
     196,   197,   198,   199,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,   221,    -1,   223,   224,   225,
      -1,   227,   228,   229,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,   240,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,   252,   253,   254,   255,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,   345,
     346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,   360,   361,   362,    -1,    -1,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,   402,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,   459,   460,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,   553,   554,   555,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
     566,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,   583,   584,   585,
     586,   587,   588,   589,   590,   591,   592,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,   612,   613,   614,   615,
     616,    -1,    -1,   619,   620,    -1,   622,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,
      -1,    -1,   648,   649,    -1,    -1,    -1,    -1,   654,   655,
      -1,    -1,   658,   659,    -1,    -1,   662,   663,    15,    -1,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    45,    46,
      47,    48,    49,    50,    51,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,   110,   111,   112,    -1,    -1,   115,   116,
     117,   118,   119,    -1,   121,   122,   123,    -1,   125,   126,
     127,   128,   129,   130,    -1,    -1,    -1,    -1,   135,   136,
     137,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
      -1,   188,   189,   190,   191,   192,   193,   194,    -1,   196,
     197,   198,   199,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,   221,    -1,   223,   224,   225,    -1,
     227,   228,   229,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,   240,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,   252,   253,   254,   255,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,   278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,   345,   346,
      -1,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,   360,   361,   362,    -1,    -1,   365,   366,
     367,   368,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,   402,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,   459,   460,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,   566,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,   583,   584,   585,   586,
     587,   588,   589,   590,   591,   592,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,   612,   613,   614,   615,   616,
      -1,    -1,   619,   620,    -1,   622,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,
      -1,   648,   649,    -1,    -1,    -1,    -1,   654,   655,    -1,
      -1,   658,   659,    -1,    -1,   662,   663,    15,    -1,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,    -1,    -1,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    45,    46,    47,
      48,    49,    50,    51,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,   110,   111,   112,    -1,    -1,   115,   116,   117,
     118,   119,    -1,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,   130,    -1,    -1,    -1,    -1,   135,   136,   137,
      -1,    -1,   140,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,   192,   193,   194,    -1,   196,   197,
     198,   199,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,   221,    -1,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,   240,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,   252,   253,   254,   255,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
     278,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,   345,   346,    -1,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,   360,   361,   362,    -1,    -1,   365,   366,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,   402,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,   459,   460,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,   566,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,   583,   584,   585,   586,   587,
     588,   589,   590,   591,   592,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,   612,   613,   614,   615,   616,    -1,
      -1,   619,   620,    -1,   622,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,
     648,   649,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,
     658,   659,    -1,    -1,   662,   663,    15,    -1,    17,    18,
      19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,
      -1,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    -1,    -1,    45,    46,    47,    48,
      49,    50,    51,    -1,    53,    54,    55,    -1,    57,    -1,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,   106,   107,    -1,
     109,   110,   111,   112,    -1,    -1,   115,   116,   117,   118,
     119,    -1,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,   130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,
      -1,   140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,
      -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,    -1,   188,
     189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,   221,    -1,   223,   224,   225,    -1,   227,   228,
     229,    -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,
     239,   240,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,   252,   253,   254,   255,    -1,    -1,   258,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,   278,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,   345,   346,    -1,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,   360,   361,   362,    -1,    -1,   365,   366,   367,   368,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     399,   400,    -1,   402,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,    -1,   456,   457,   458,
     459,   460,   461,    -1,   463,    -1,   465,   466,    -1,   468,
     469,   470,    -1,    -1,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
      -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
     549,   550,   551,   552,   553,   554,   555,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,   566,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,   583,   584,   585,   586,   587,   588,
     589,   590,   591,   592,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
     609,    -1,    -1,   612,   613,   614,   615,   616,    -1,    -1,
     619,   620,    -1,   622,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,
     649,    -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,
     659,    -1,    -1,   662,   663,    15,    -1,    17,    18,    19,
      20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    -1,    -1,    45,    46,    47,    48,    49,
      50,    51,    -1,    53,    54,    55,    -1,    57,    -1,    59,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,   106,   107,    -1,   109,
     110,   111,   112,    -1,    -1,   115,   116,   117,   118,   119,
      -1,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
     130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,    -1,
     140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
      -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,   221,    -1,   223,   224,   225,    -1,   227,   228,   229,
      -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,   239,
     240,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,   252,   253,   254,   255,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,    -1,   278,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,   345,   346,    -1,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
     360,   361,   362,    -1,    -1,   365,   366,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,
     400,    -1,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,    -1,   456,   457,   458,   459,
     460,   461,    -1,   463,    -1,   465,   466,    -1,   468,   469,
     470,    -1,    -1,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,    -1,
      -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,   504,   505,   506,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,   553,   554,   555,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,   566,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,   583,   584,   585,   586,   587,   588,   589,
     590,   591,   592,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,
      -1,    -1,   612,   613,   614,   615,   616,    -1,    -1,   619,
     620,    -1,   622,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    -1,   643,    -1,    -1,    -1,    -1,   648,   649,
      -1,    -1,    -1,    -1,   654,   655,    -1,    -1,   658,   659,
      -1,    -1,   662,   663,    15,    -1,    17,    18,    19,    20,
      21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    -1,    46,    47,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,    -1,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,   137,    -1,    -1,    -1,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,    -1,    -1,   188,   189,   190,
      -1,   192,   193,   194,    -1,   196,   197,   198,   199,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,   225,    -1,   227,   228,   229,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,   372,   373,    -1,   375,   376,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,   566,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,   584,   585,   586,   587,   588,   589,   590,
     591,   592,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    -1,   643,    -1,    -1,    -1,    -1,    15,    -1,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,   662,   663,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
     208,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,   245,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,   269,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,   282,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
     488,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    -1,   643,    -1,    -1,    15,    -1,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,   663,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,   208,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,   245,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,   269,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,    15,
      -1,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,   663,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
     136,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
      -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,
     196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
     346,    -1,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,
      -1,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,   488,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,
      15,    -1,    17,    18,    19,    20,    21,    -1,    -1,    24,
     656,    -1,    -1,    28,    -1,    -1,    31,   663,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
      55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,
      -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,   346,    -1,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,
      -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,    -1,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,
      -1,    -1,    -1,    15,    -1,    17,    18,    19,    20,    21,
      -1,   656,    24,    -1,    -1,    -1,    28,   662,   663,    31,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,
      -1,    53,    54,    55,    -1,    57,    -1,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
      -1,   103,   104,   105,   106,   107,    -1,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,
      -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,   141,
      -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,
     162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,    -1,    -1,   188,   189,   190,    -1,
      -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,   201,
      -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,   231,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,    -1,
      -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,    -1,   361,
     362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,
     372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,   461,
      -1,   463,    -1,   465,   466,    -1,   468,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
     492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,
     502,    -1,   504,   505,   506,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,   559,    -1,   561,
     562,   563,   564,    -1,    -1,   567,   568,    -1,   570,   571,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,
      -1,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      -1,   643,    -1,    -1,    -1,    -1,    15,    -1,    17,    18,
      19,    20,    21,   655,    -1,    24,    -1,    -1,    -1,    28,
      -1,   663,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,   106,   107,    -1,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
     119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,
      -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,    -1,    -1,   188,
     189,   190,    -1,    -1,   193,   194,    -1,   196,   197,   198,
      -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,    -1,   253,   254,    -1,   256,    -1,   258,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,   368,
      -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
      -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,    -1,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,    -1,    -1,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    -1,   643,    -1,    -1,    15,    -1,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,    -1,    -1,    31,   663,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    -1,   643,    -1,    -1,    -1,    -1,
      -1,    15,   650,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,   663,    -1,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    -1,    -1,    -1,    15,    -1,    17,    18,    19,    20,
      21,   655,    -1,    24,    -1,    -1,    -1,    28,    -1,   663,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,    -1,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,    -1,    -1,   188,   189,   190,
      -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,    -1,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,   372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    -1,   643,    -1,    -1,    -1,    -1,    15,    -1,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,   662,   663,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    -1,   643,    -1,    -1,    15,    -1,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,   663,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,    15,
      -1,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,   663,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
     136,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
      -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,
     196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
     346,    -1,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,
      -1,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,    -1,
      15,    -1,    17,    18,    19,    20,    21,    -1,    -1,    24,
      -1,    -1,    -1,    28,    -1,    -1,    31,   663,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
      55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,
      -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,   346,    -1,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,
      -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,    -1,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    -1,   643,    -1,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   663,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,   140,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   662,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,   566,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   662,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,   566,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   662,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,   140,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   662,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,   566,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   662,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,   662,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    -1,   643,
      -1,    15,    -1,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    -1,   662,    33,
      34,    35,    36,    37,    38,    39,    -1,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    63,
      64,    -1,    66,    67,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,
      -1,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,    -1,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,    -1,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
      -1,    -1,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,   240,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
      -1,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,    -1,   272,   273,
      -1,    -1,   276,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,    -1,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   399,   400,    -1,    -1,    -1,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,    -1,    -1,    -1,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
      -1,    -1,   456,    -1,   458,   459,    -1,   461,    -1,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,   493,
      -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
      -1,   505,    -1,    -1,   508,   509,    -1,   511,    -1,   513,
      -1,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,    -1,    -1,   603,
      -1,    -1,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,   631,    -1,    -1,
      -1,   635,    -1,    -1,   638,    -1,   640,    -1,    15,   643,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,   657,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,   118,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,   566,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    -1,   643,    15,    -1,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,   655,    -1,
      28,    -1,    -1,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    15,   643,    17,    18,    19,    20,
      21,    -1,   650,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,    -1,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,    -1,    -1,   188,   189,   190,
      -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,    -1,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,   372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    15,   643,    17,    18,    19,    20,    21,    -1,   650,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    15,   643,
      17,    18,    19,    20,    21,    -1,   650,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    15,   643,    17,    18,    19,
      20,    21,    -1,   650,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,   106,   107,    -1,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,
      -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,    -1,
      -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,    -1,    -1,   188,   189,
     190,    -1,    -1,   193,   194,    -1,   196,   197,   198,   199,
      -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,   225,    -1,   227,   228,    -1,
      -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
      -1,   361,   362,    -1,    -1,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,    -1,   456,   457,   458,    -1,
      -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,    -1,
      -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,   504,   505,   506,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,   519,
     520,   521,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,    -1,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,   586,   587,   588,   589,
     590,   591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,
      -1,    -1,    -1,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    15,   643,    17,    18,    19,    20,    21,    -1,
      -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
      53,    54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,   104,   105,   106,   107,    -1,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,   137,    -1,    -1,   140,   141,    -1,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,
      -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,
     193,   194,    -1,   196,   197,   198,   199,    -1,   201,    -1,
      -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,   225,    -1,   227,   228,    -1,    -1,   231,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
      -1,    -1,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,   346,    -1,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,    -1,   361,   362,
      -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,
     373,    -1,    -1,   376,   377,    -1,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,
     463,    -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,
     493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,
      -1,   504,   505,   506,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,   559,    -1,   561,   562,
     563,   564,    -1,   566,   567,   568,    -1,   570,   571,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,   589,   590,   591,    -1,
     593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,
     603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    15,
     643,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
     136,   137,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
      -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,
     196,   197,   198,   199,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,
      -1,   227,   228,    -1,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
     346,    -1,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,
     376,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
     566,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,   589,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    15,   643,    17,    18,
      19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,
      -1,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,   106,   107,    -1,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
     119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,   136,   137,    -1,
      -1,   140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,
      -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,    -1,    -1,   188,
     189,   190,    -1,    -1,   193,   194,    -1,   196,   197,   198,
     199,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,   228,
      -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,   368,
      -1,    -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
      -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,   566,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
     589,   590,   591,    -1,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,    -1,    -1,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    15,   643,    17,    18,    19,    20,    21,
      -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    -1,    -1,    45,    46,    -1,    -1,    -1,    50,    -1,
      -1,    53,    54,    55,    -1,    57,    -1,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
      -1,   103,   104,   105,   106,   107,    -1,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,
      -1,    -1,    -1,   135,   136,    -1,    -1,    -1,   140,   141,
      -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,
     162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,    -1,    -1,   188,   189,   190,    -1,
      -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,   201,
      -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,   231,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,   281,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,    -1,
      -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,    -1,   361,
     362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,
     372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,   461,
      -1,   463,    -1,   465,   466,    -1,   468,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
     492,   493,   494,    -1,    -1,   497,   498,    -1,    -1,    -1,
     502,    -1,   504,   505,   506,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,   559,    -1,   561,
     562,   563,   564,    -1,   566,   567,   568,    -1,   570,   571,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,
      -1,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      15,   643,    17,    18,    19,    20,    21,    -1,    -1,    24,
      -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      45,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
      55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,    -1,    -1,   140,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,
      -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,   346,    -1,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,
      -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,   566,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    15,   643,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,    -1,    -1,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    47,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
     228,   229,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,   566,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    15,   643,    17,    18,    19,    20,
      21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,    -1,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,    -1,    -1,   188,   189,   190,
      -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,    -1,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,   402,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,   589,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    15,   643,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,   376,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,   402,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,   589,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    15,   643,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    45,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,   566,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    15,   643,    17,    18,    19,
      20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,   106,   107,    -1,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,
      -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,
      -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,    -1,    -1,   188,   189,
     190,    -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,
      -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
      -1,   361,   362,    -1,    -1,   365,   366,   367,   368,    -1,
      -1,    -1,   372,   373,    -1,    -1,   376,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,
     400,    -1,   402,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,    -1,   456,   457,   458,    -1,
      -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,    -1,
      -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,   504,   505,   506,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,    -1,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,   586,   587,   588,   589,
     590,   591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,
      -1,    -1,    -1,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    15,   643,    17,    18,    19,    20,    21,    -1,
      -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
      53,    54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,   104,   105,   106,   107,    -1,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,   118,   119,    -1,   121,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,
      -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,
     193,   194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,
      -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,    -1,    -1,   279,   280,   281,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
      -1,    -1,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,   346,    -1,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,    -1,   361,   362,
      -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,
     373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,
     463,    -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,
     493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,
      -1,   504,   505,   506,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,   559,    -1,   561,   562,
     563,   564,    -1,   566,   567,   568,    -1,   570,   571,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,
     603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    15,
     643,    17,    18,    19,    20,    21,    22,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
     136,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
      -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,
     196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
     346,    -1,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,
      -1,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
     566,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    15,   643,    17,    18,
      19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,
      -1,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,   106,   107,    -1,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
     119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,
      -1,   140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,
      -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,    -1,    -1,   188,
     189,   190,    -1,    -1,   193,   194,    -1,   196,   197,   198,
      -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,
     279,   280,   281,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,   368,
      -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
      -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,   566,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,    -1,    -1,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    15,   643,    17,    18,    19,    20,    21,
      -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    -1,    -1,    45,    46,    -1,    -1,    -1,    50,    -1,
      -1,    53,    54,    55,    -1,    57,    -1,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
      -1,   103,   104,   105,   106,   107,    -1,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,
      -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,   141,
      -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,
     162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,    -1,    -1,   188,   189,   190,    -1,
      -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,   201,
      -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,   231,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,   281,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,    -1,
      -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,    -1,   361,
     362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,
     372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,   461,
      -1,   463,    -1,   465,   466,    -1,   468,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
     492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,
     502,    -1,   504,   505,   506,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,   559,    -1,   561,
     562,   563,   564,    -1,   566,   567,   568,    -1,   570,   571,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,
      -1,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      15,   643,    17,    18,    19,    20,    21,    -1,    -1,    24,
      -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
      55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,
      -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,    -1,    -1,   279,   280,   281,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,   346,    -1,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,
      -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,   566,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    15,   643,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,    29,    -1,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,   566,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    15,   643,    17,    18,    19,    20,
      21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
      -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,    -1,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,   372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    15,   643,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,   520,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    15,   643,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,   206,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    15,   643,    17,    18,    19,
      20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,   106,   107,    -1,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,
      -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,
     140,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,    -1,    -1,   188,   189,
     190,    -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,
      -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
      -1,   361,   362,    -1,    -1,   365,   366,   367,   368,    -1,
      -1,    -1,   372,   373,    -1,    -1,    -1,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,    -1,   456,   457,   458,    -1,
      -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,    -1,
      -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,   504,   505,   506,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,    -1,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,
      -1,    -1,    -1,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    15,   643,    17,    18,    19,    20,    21,    -1,
      -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,
      33,    34,    35,    36,    37,    38,    39,    40,    -1,    42,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
      53,    54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,
      63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,
      73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      93,    94,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,   104,   105,   106,   107,    -1,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,   136,    -1,    -1,    -1,   140,   141,    -1,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,
      -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,
     193,   194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,
      -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,
     223,   224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,
     253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
      -1,    -1,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,   346,    -1,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,    -1,   361,   362,
      -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,
     373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,
     403,    -1,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
     453,   454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,
     463,    -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,
      -1,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,
     493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,
      -1,   504,   505,   506,   507,   508,   509,    -1,   511,   512,
     513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,
     533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,   559,    -1,   561,   562,
     563,   564,    -1,    -1,   567,   568,    -1,   570,   571,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,   585,   586,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,
     603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,    15,
     643,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,
      36,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
      -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,
      66,    67,    -1,    69,    70,    -1,    72,    73,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    93,    94,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
     106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
     136,    -1,    -1,    -1,   140,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
      -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,
     196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,
      -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,
     236,   237,   238,   239,    -1,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
     276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
     346,    -1,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,
      -1,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,   454,    -1,
     456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,
     466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,
     486,   487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,
     506,   507,   508,   509,    -1,   511,   512,   513,   514,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
     596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,
      -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,
     626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,
     636,    -1,   638,   639,   640,    -1,    15,   643,    17,    18,
      19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,
      -1,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
      39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,
      59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,
      69,    70,    -1,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    93,    94,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,   106,   107,    -1,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
     119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,
      -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,
      -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,    -1,    -1,   188,
     189,   190,    -1,    -1,   193,   194,    -1,   196,   197,   198,
      -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,    -1,
      -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,
     239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,
      -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,
      -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,   368,
      -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,   388,
     389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,
     399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,   454,    -1,   456,   457,   458,
      -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,
     469,   470,    -1,    -1,    -1,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,   486,   487,    -1,
      -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,   508,
     509,    -1,   511,   512,   513,   514,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,
      -1,   540,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,    -1,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,   585,   586,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,   596,   597,    -1,
      -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,    -1,    -1,   623,   624,   625,   626,   627,   628,
      -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,
     639,   640,    -1,    15,   643,    17,    18,    19,    20,    21,
      -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    31,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,
      -1,    53,    54,    55,    -1,    57,    -1,    59,    60,    -1,
      -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,    -1,
      72,    73,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    93,    94,    95,    96,    97,    98,    -1,   100,   101,
      -1,   103,   104,   105,   106,   107,    -1,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,
      -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,   141,
      -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,   161,
     162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,    -1,    -1,   188,   189,   190,    -1,
      -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,   201,
      -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,
      -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,   231,
     232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,
      -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,   261,
      -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,    -1,
      -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,    -1,   361,
     362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,
     372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,   388,   389,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,    -1,
      -1,   403,    -1,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
      -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,   461,
      -1,   463,    -1,   465,   466,    -1,   468,   469,   470,    -1,
      -1,    -1,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,   491,
     492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,    -1,
     502,    -1,   504,   505,   506,   507,   508,   509,    -1,   511,
     512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,   559,    -1,   561,
     562,   563,   564,    -1,   566,   567,   568,    -1,   570,   571,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,    -1,
      -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,
      -1,   623,   624,   625,   626,   627,   628,    -1,    -1,    -1,
      -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,    -1,
      15,   643,    17,    18,    19,    20,    21,    -1,    -1,    24,
      -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,    34,
      35,    36,    37,    38,    39,    40,    -1,    42,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
      55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,    -1,
      -1,    66,    67,    -1,    69,    70,    -1,    72,    73,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    93,    94,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,   136,    -1,    -1,    -1,   140,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,
      -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,   224,
     225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,    -1,
      -1,   236,   237,   238,   239,    -1,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,   254,
      -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
      -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,   346,    -1,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,   372,   373,    -1,
      -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,   454,
      -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,    -1,
     465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,   494,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,   504,
     505,   506,   507,   508,   509,    -1,   511,   512,   513,   514,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,    -1,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
     585,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,    -1,
     605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,
     625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,
     635,   636,    -1,   638,   639,   640,    -1,    15,   643,    17,
      18,    19,    20,    21,    22,    -1,    24,    -1,    -1,    -1,
      28,    -1,    -1,    31,    -1,    33,    34,    35,    36,    37,
      38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,    67,
      -1,    69,    70,    -1,    72,    73,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,   106,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,   157,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,    -1,   196,   197,
     198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,   227,
      -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,   237,
     238,   239,    -1,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,    -1,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
     388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,   454,    -1,   456,   457,
     458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,    -1,
     468,   469,   470,    -1,    -1,    -1,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,    -1,   486,   487,
      -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,   507,
     508,   509,    -1,   511,   512,   513,   514,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
      -1,    -1,   540,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,   596,   597,
      -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,    -1,
     638,   639,   640,    -1,    15,   643,    17,    18,    19,    20,
      21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,    60,
      -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,    70,
      -1,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    93,    94,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,   106,   107,    -1,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,   140,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,    -1,    -1,   188,   189,   190,
      -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,    -1,
     201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,    -1,
     231,   232,    -1,    -1,    -1,   236,   237,   238,   239,    -1,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,    -1,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,   372,   373,    -1,    -1,    -1,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,   388,   389,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,   400,
      -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,   454,    -1,   456,   457,   458,    -1,    -1,
     461,    -1,   463,    -1,   465,   466,    -1,   468,   469,   470,
      -1,    -1,    -1,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,   487,    -1,    -1,    -1,
     491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,   504,   505,   506,   507,   508,   509,    -1,
     511,   512,   513,   514,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,   540,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,   600,
      -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
      -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,   640,
      -1,    15,   643,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    31,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    59,    60,    -1,    -1,    63,
      -1,    -1,    66,    67,    -1,    69,    70,    -1,    72,    73,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    93,
      94,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,   106,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,   136,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,   157,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,    -1,   196,   197,   198,    -1,    -1,   201,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,   223,
     224,   225,    -1,   227,    -1,    -1,    -1,   231,   232,    -1,
      -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
     254,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,    -1,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,   372,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,   388,   389,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   398,   399,   400,    -1,    -1,   403,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
     454,    -1,   456,   457,   458,    -1,    -1,   461,    -1,   463,
      -1,   465,   466,    -1,   468,   469,   470,    -1,    -1,    -1,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,    -1,   486,   487,    -1,    -1,    -1,   491,   492,   493,
     494,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
     504,   505,   506,   507,   508,   509,    -1,   511,   512,   513,
     514,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,    -1,    -1,   540,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,   585,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,   596,   597,    -1,    -1,   600,    -1,    -1,   603,
      -1,   605,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,    -1,
      -1,   635,   636,    -1,   638,   639,   640,    -1,    15,   643,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    31,    -1,    33,    34,    35,    36,
      37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    59,    60,    -1,    -1,    63,    -1,    -1,    66,
      67,    -1,    69,    70,    -1,    72,    73,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,   106,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,   136,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
     157,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,    -1,   196,
     197,   198,    -1,    -1,   201,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,   223,   224,   225,    -1,
     227,    -1,    -1,    -1,   231,   232,    -1,    -1,    -1,   236,
     237,   238,   239,    -1,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,   254,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,    -1,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,   276,
      -1,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,   372,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,   388,   389,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   398,   399,   400,    -1,    -1,   403,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,   454,    -1,   456,
     457,   458,    -1,    -1,   461,    -1,   463,    -1,   465,   466,
      -1,   468,   469,   470,    -1,    -1,    -1,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,
     487,    -1,    -1,    -1,   491,   492,   493,   494,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,   504,   505,   506,
     507,   508,   509,    -1,   511,   512,   513,   514,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,    -1,    -1,   540,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,   585,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,   596,
     597,    -1,    -1,   600,    -1,    -1,   603,    -1,   605,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,    -1,    -1,    -1,    -1,   635,   636,
      -1,   638,   639,   640,    -1,    15,   643,    17,    18,    19,
      20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    -1,    33,    34,    35,    36,    37,    38,    39,
      40,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,    59,
      60,    -1,    -1,    63,    -1,    -1,    66,    67,    -1,    69,
      70,    -1,    72,    73,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    93,    94,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,   106,   107,    -1,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,
      -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,
      -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,   157,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,    -1,    -1,   188,   189,
     190,    -1,    -1,   193,   194,    -1,   196,   197,   198,    -1,
      -1,   201,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,    -1,    -1,   223,   224,   225,    -1,   227,    -1,    -1,
      -1,   231,   232,    -1,    -1,    -1,   236,   237,   238,   239,
      -1,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,    -1,   253,   254,    -1,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,    -1,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,   276,    -1,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
      -1,   361,   362,    -1,    -1,   365,   366,   367,   368,    -1,
      -1,    -1,   372,   373,    -1,    -1,    -1,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,   388,   389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,   399,
     400,    -1,    -1,   403,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,   454,    -1,   456,   457,   458,    -1,
      -1,   461,    -1,   463,    -1,   465,   466,    -1,   468,   469,
     470,    -1,    -1,    -1,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,    -1,   486,   487,    -1,    -1,
      -1,   491,   492,   493,   494,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,   504,   505,   506,   507,   508,   509,
      -1,   511,   512,   513,   514,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,    -1,    -1,
     540,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,    -1,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,   585,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,   596,   597,    -1,    -1,
     600,    -1,    -1,   603,    -1,   605,    -1,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,
      -1,    -1,    -1,   623,   624,   625,   626,   627,   628,    -1,
      -1,    -1,    -1,    -1,    -1,   635,   636,    -1,   638,   639,
     640,    -1,    15,   643,    17,    18,    19,    20,    21,    -1,
      -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    -1,    42,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
      53,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,
      63,    64,    -1,    66,    67,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
      83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      93,    -1,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,   104,   105,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,   141,    -1,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,    -1,    -1,    -1,    -1,   160,   161,   162,
      -1,   164,   165,   166,    -1,   168,   169,    -1,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,    -1,
     193,   194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,
      -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,   240,    -1,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,
     253,    -1,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,   272,
     273,    -1,    -1,   276,   277,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
      -1,    -1,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,   346,    -1,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,    -1,   361,   362,
      -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,    -1,
     373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,
     383,   384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   399,   400,    -1,    -1,
      -1,    -1,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,    -1,    -1,    -1,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,    -1,   456,    -1,   458,   459,    -1,   461,    -1,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,    -1,
      -1,    -1,   475,   476,   477,   478,   479,   480,   481,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,
     493,    -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,
      -1,    -1,   505,    -1,    -1,   508,   509,    -1,   511,    -1,
     513,    -1,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,   559,    -1,   561,   562,
     563,   564,    -1,    -1,   567,   568,    -1,   570,   571,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,   586,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,    -1,    -1,    -1,   600,    -1,    -1,
     603,    -1,    -1,    -1,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,
     623,   624,   625,   626,   627,   628,    -1,    -1,   631,    -1,
      -1,    -1,   635,    -1,    -1,   638,    -1,   640,    -1,    15,
     643,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
      -1,    -1,    28,    -1,    -1,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    -1,    42,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    63,    64,    -1,
      66,    67,    -1,    69,    -1,    -1,    -1,    -1,    -1,    75,
      76,    77,    78,    79,    80,    81,    -1,    83,    84,    -1,
      -1,    -1,    -1,    -1,    -1,    91,    -1,    93,    -1,    95,
      96,    97,    98,    -1,   100,   101,    -1,   103,   104,   105,
      -1,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,
      -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,
     126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,
      -1,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
      -1,    -1,    -1,    -1,   160,   161,   162,    -1,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,    -1,    -1,
     176,   177,    -1,   179,   180,   181,   182,   183,    -1,    -1,
      -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,   195,
     196,   197,   198,    -1,    -1,    -1,    -1,    -1,    -1,   205,
      -1,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
      -1,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
     236,   237,   238,   239,   240,    -1,   242,   243,   244,    -1,
     246,    -1,   248,    -1,    -1,    -1,    -1,   253,    -1,    -1,
      -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,    -1,   272,   273,    -1,    -1,
     276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,
     286,   287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,
      -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,    -1,   319,   320,   321,   322,    -1,   324,   325,
     326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,
     336,   337,   338,   339,   340,    -1,    -1,   343,   344,    -1,
     346,    -1,   348,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,
     366,   367,   368,    -1,    -1,    -1,    -1,   373,    -1,    -1,
      -1,   377,    -1,   379,   380,   381,    -1,   383,   384,   385,
     386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   399,   400,    -1,    -1,    -1,    -1,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,   414,   415,
      -1,    -1,    -1,    -1,   420,   421,    -1,   423,    -1,   425,
     426,   427,   428,   429,    -1,   431,   432,   433,    -1,    -1,
     436,    -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,
      -1,   447,   448,   449,   450,   451,    -1,   453,    -1,    -1,
     456,    -1,   458,   459,    -1,   461,    -1,    -1,    -1,   465,
      -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,
     476,   477,   478,   479,   480,   481,    -1,   483,   484,    -1,
     486,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,
      -1,    -1,   498,    -1,    -1,    -1,   502,    -1,    -1,   505,
      -1,    -1,   508,   509,    -1,   511,    -1,   513,    -1,   515,
     516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,
     526,    -1,    -1,   529,    -1,    -1,   532,    -1,    -1,    -1,
      -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,
     546,   547,   548,    -1,    -1,   551,   552,   553,   554,    -1,
     556,   557,    -1,   559,    -1,   561,   562,   563,   564,    -1,
      -1,   567,   568,    -1,   570,   571,   572,   573,    -1,    -1,
      -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,
     586,   587,   588,    -1,   590,   591,    -1,   593,   594,    -1,
      -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,
      -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,
     616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,
     626,   627,   628,   629,    -1,   631,    -1,    -1,    -1,   635,
      -1,    -1,   638,    -1,   640,    -1,    15,   643,    17,    18,
      19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,
      -1,    -1,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,
      -1,    -1,    -1,    -1,    63,    64,    -1,    66,    67,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    93,    -1,    95,    96,    97,    98,
      -1,   100,   101,    -1,   103,   104,   105,    -1,   107,    -1,
     109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,
     119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,
      -1,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,
      -1,   160,   161,   162,    -1,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,
     179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,   188,
     189,   190,    -1,    -1,   193,   194,   195,   196,   197,   198,
      -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,   207,    -1,
     209,    -1,   211,   212,   213,   214,   215,    -1,   217,    -1,
     219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,   236,   237,   238,
     239,   240,    -1,   242,   243,   244,    -1,   246,    -1,   248,
      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,   258,
      -1,   260,   261,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,    -1,   272,   273,    -1,    -1,   276,   277,    -1,
     279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,
     289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,
     299,    -1,    -1,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,    -1,
     319,   320,   321,   322,    -1,   324,   325,   326,   327,    -1,
     329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,
     339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
      -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,   368,
      -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,   377,    -1,
     379,   380,   381,    -1,   383,   384,   385,   386,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     399,   400,    -1,    -1,    -1,    -1,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,   414,   415,    -1,    -1,    -1,
      -1,   420,   421,    -1,   423,    -1,   425,   426,   427,   428,
     429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,
      -1,   440,   441,   442,   443,   444,    -1,    -1,   447,   448,
     449,   450,   451,    -1,   453,    -1,    -1,   456,    -1,   458,
     459,    -1,   461,    -1,    -1,    -1,   465,    -1,    -1,   468,
     469,   470,   471,    -1,    -1,    -1,   475,   476,   477,   478,
     479,   480,   481,    -1,   483,   484,    -1,   486,    -1,    -1,
      -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,
      -1,    -1,    -1,   502,    -1,    -1,   505,    -1,    -1,   508,
     509,    -1,   511,    -1,   513,    -1,   515,   516,    -1,    -1,
      -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,
     529,    -1,    -1,   532,    -1,    -1,    -1,    -1,   537,    -1,
      -1,    -1,   541,    -1,   543,   544,   545,   546,   547,   548,
      -1,    -1,   551,   552,   553,   554,    -1,   556,   557,    -1,
     559,    -1,   561,   562,   563,   564,    -1,    -1,   567,   568,
      -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,
     579,   580,   581,    -1,    -1,    -1,    -1,   586,   587,   588,
      -1,   590,   591,    -1,   593,   594,    -1,    -1,    -1,    -1,
      -1,   600,    -1,    -1,   603,    -1,    -1,    -1,   607,   608,
     609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,
     619,    -1,    -1,    -1,   623,   624,   625,   626,   627,   628,
     629,    -1,   631,    -1,    -1,    -1,   635,    -1,    -1,   638,
      -1,   640,    -1,    15,   643,    17,    18,    19,    20,    21,
      -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    -1,
      42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,
      -1,    53,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      -1,    63,    64,    -1,    66,    67,    -1,    69,    -1,    -1,
      -1,    -1,    -1,    75,    76,    77,    78,    79,    80,    81,
      -1,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    91,
      -1,    93,    -1,    95,    96,    97,    98,    -1,   100,   101,
      -1,   103,   104,   105,    -1,   107,    -1,   109,    -1,    -1,
     112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,
      -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,
      -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,   141,
      -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   160,   161,
     162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,    -1,    -1,   176,   177,    -1,   179,   180,   181,
     182,   183,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,
      -1,   193,   194,   195,   196,   197,   198,    -1,    -1,    -1,
      -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,
     212,   213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,
      -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,   236,   237,   238,   239,   240,    -1,
     242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,
      -1,   253,    -1,    -1,    -1,    -1,   258,    -1,   260,   261,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,
     272,   273,    -1,    -1,   276,   277,    -1,   279,   280,    -1,
      -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
      -1,   293,   294,    -1,    -1,    -1,    -1,   299,    -1,    -1,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,    -1,   319,   320,   321,
     322,    -1,   324,   325,   326,   327,    -1,   329,   330,    -1,
      -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
      -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,    -1,    -1,   361,
     362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,
      -1,   373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,
      -1,   383,   384,   385,   386,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,   400,    -1,
      -1,    -1,    -1,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,   414,   415,    -1,    -1,    -1,    -1,   420,   421,
      -1,   423,    -1,   425,   426,   427,   428,   429,    -1,   431,
     432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,
     442,   443,   444,    -1,    -1,   447,   448,   449,   450,   451,
      -1,   453,    -1,    -1,   456,    -1,   458,   459,    -1,   461,
      -1,    -1,    -1,   465,    -1,    -1,   468,   469,   470,   471,
      -1,    -1,    -1,   475,   476,   477,   478,   479,   480,   481,
      -1,   483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,
     492,   493,    -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,
     502,    -1,    -1,   505,    -1,    -1,   508,   509,    -1,   511,
      -1,   513,    -1,   515,   516,    -1,    -1,    -1,    -1,    -1,
      -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,
     532,    -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,
      -1,   543,   544,   545,   546,   547,   548,    -1,    -1,   551,
     552,   553,   554,    -1,   556,   557,    -1,   559,    -1,   561,
     562,   563,   564,    -1,    -1,   567,   568,    -1,   570,   571,
     572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,
      -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,   591,
      -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,    -1,
      -1,   603,    -1,    -1,    -1,   607,   608,   609,    -1,    -1,
      -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,
      -1,   623,   624,   625,   626,   627,   628,    -1,    -1,   631,
      -1,    -1,    -1,   635,    -1,    -1,   638,    -1,   640,    -1,
      15,   643,    17,    18,    19,    20,    21,    -1,    -1,    24,
      -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    -1,    42,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,
      55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    63,    64,
      -1,    66,    67,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      75,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
      -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,    -1,
      95,    96,    97,    98,    -1,   100,   101,    -1,   103,   104,
     105,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,    -1,
     115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,    -1,
     125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,    -1,
     135,    -1,    -1,    -1,    -1,    -1,   141,    -1,   143,    -1,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,    -1,    -1,    -1,    -1,   160,   161,   162,    -1,    -1,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,    -1,
      -1,   176,   177,    -1,   179,   180,   181,   182,   183,    -1,
      -1,    -1,    -1,   188,   189,   190,    -1,    -1,   193,   194,
     195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,    -1,
     205,    -1,   207,    -1,   209,    -1,   211,   212,   213,   214,
     215,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,   224,
     225,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,
      -1,   236,   237,   238,   239,   240,    -1,   242,   243,   244,
      -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,    -1,
      -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,   264,
     265,    -1,    -1,   268,    -1,    -1,    -1,   272,   273,    -1,
      -1,   276,   277,    -1,   279,   280,    -1,    -1,    -1,    -1,
      -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,   294,
      -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,    -1,   319,   320,   321,   322,    -1,   324,
     325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,    -1,
     335,   336,   337,   338,   339,   340,    -1,    -1,   343,   344,
      -1,   346,    -1,   348,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,    -1,    -1,   361,   362,    -1,    -1,
     365,   366,   367,   368,    -1,    -1,    -1,    -1,   373,    -1,
      -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,   384,
     385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   399,   400,    -1,    -1,    -1,    -1,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,   414,
     415,    -1,    -1,    -1,    -1,   420,   421,    -1,   423,    -1,
     425,   426,   427,   428,   429,    -1,   431,   432,   433,    -1,
      -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,   444,
      -1,    -1,   447,   448,   449,   450,   451,    -1,   453,    -1,
      -1,   456,    -1,   458,   459,    -1,   461,    -1,    -1,    -1,
     465,    -1,    -1,   468,   469,   470,   471,    -1,    -1,    -1,
     475,   476,   477,   478,   479,   480,   481,    -1,   483,   484,
      -1,   486,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,
      -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,    -1,
     505,    -1,    -1,   508,   509,    -1,   511,    -1,   513,    -1,
     515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,   524,
      -1,   526,    -1,    -1,   529,    -1,    -1,   532,    -1,    -1,
      -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,   544,
     545,   546,   547,   548,    -1,    -1,   551,   552,   553,   554,
      -1,   556,   557,    -1,   559,    -1,   561,   562,   563,   564,
      -1,    -1,   567,   568,    -1,   570,   571,   572,   573,    -1,
      -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,    -1,
      -1,   586,   587,   588,    -1,   590,   591,    -1,   593,   594,
      -1,    -1,    -1,    -1,    -1,   600,    -1,    -1,   603,    -1,
      -1,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,    -1,
      -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,   624,
     625,   626,   627,   628,    -1,    -1,   631,    -1,    -1,    -1,
     635,    -1,    -1,   638,    -1,   640,    -1,    15,   643,    17,
      18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
      28,    -1,    -1,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    -1,    42,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    63,    64,    -1,    66,    67,
      -1,    69,    -1,    -1,    -1,    -1,    -1,    75,    76,    77,
      78,    79,    80,    81,    -1,    83,    84,    -1,    -1,    -1,
      -1,    -1,    -1,    91,    -1,    93,    -1,    95,    96,    97,
      98,    -1,   100,   101,    -1,   103,   104,   105,    -1,   107,
      -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,   117,
      -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,   127,
      -1,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,    -1,
      -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,    -1,
      -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,    -1,    -1,   176,   177,
      -1,   179,   180,   181,   182,   183,    -1,    -1,    -1,    -1,
     188,   189,   190,    -1,    -1,   193,   194,   195,   196,   197,
     198,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,   207,
      -1,   209,    -1,   211,   212,   213,   214,   215,    -1,   217,
      -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,    -1,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,   236,   237,
     238,   239,   240,    -1,   242,   243,   244,    -1,   246,    -1,
     248,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,
     258,    -1,   260,   261,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,    -1,   272,   273,    -1,    -1,   276,   277,
      -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,   287,
      -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,    -1,
      -1,   299,    -1,    -1,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
      -1,   319,   320,   321,   322,    -1,   324,   325,   326,   327,
      -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,   337,
     338,   339,   340,    -1,    -1,   343,   344,    -1,   346,    -1,
     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,   367,
     368,    -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,   377,
      -1,   379,   380,   381,    -1,   383,   384,   385,   386,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   399,   400,    -1,    -1,    -1,    -1,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,   414,   415,    -1,    -1,
      -1,    -1,   420,   421,    -1,   423,    -1,   425,   426,   427,
     428,   429,    -1,   431,   432,   433,    -1,    -1,   436,    -1,
      -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,   447,
     448,   449,   450,   451,    -1,   453,    -1,    -1,   456,    -1,
     458,   459,    -1,   461,    -1,    -1,    -1,   465,    -1,    -1,
     468,   469,   470,   471,    -1,    -1,    -1,   475,   476,   477,
     478,   479,   480,   481,    -1,   483,   484,    -1,   486,    -1,
      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,
     498,    -1,    -1,    -1,   502,    -1,    -1,   505,    -1,    -1,
     508,   509,    -1,   511,    -1,   513,    -1,   515,   516,    -1,
      -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,    -1,
      -1,   529,    -1,    -1,   532,    -1,    -1,    -1,    -1,   537,
      -1,    -1,    -1,   541,    -1,   543,   544,   545,   546,   547,
     548,    -1,    -1,   551,   552,   553,   554,    -1,   556,   557,
      -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,   567,
     568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,    -1,
      -1,   579,   580,   581,    -1,    -1,    -1,    -1,   586,   587,
     588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,    -1,
      -1,    -1,   600,    -1,    -1,   603,    -1,    -1,    -1,   607,
     608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,
      -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,   627,
     628,    -1,    -1,   631,    -1,    -1,    -1,   635,    -1,    -1,
     638,    -1,   640,    -1,    15,   643,    17,    18,    19,    20,
      21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,    -1,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,    50,
      -1,    -1,    53,    54,    55,    -1,    57,    -1,    -1,    -1,
      -1,    -1,    63,    64,    -1,    66,    67,    -1,    69,    -1,
      -1,    -1,    -1,    -1,    75,    76,    77,    78,    79,    80,
      81,    -1,    83,    84,    -1,    -1,    -1,    -1,    -1,    -1,
      91,    -1,    93,    -1,    95,    96,    97,    98,    -1,   100,
     101,    -1,   103,   104,   105,    -1,   107,    -1,   109,    -1,
      -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,    -1,
     121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,   130,
      -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,
     141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,   160,
     161,   162,    -1,    -1,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,    -1,    -1,   176,   177,    -1,   179,   180,
     181,   182,   183,    -1,    -1,    -1,    -1,   188,   189,   190,
      -1,    -1,   193,   194,   195,   196,   197,   198,    -1,    -1,
      -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,    -1,
     211,   212,   213,   214,   215,    -1,   217,    -1,   219,    -1,
      -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,   240,
      -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,    -1,
      -1,    -1,   253,    -1,    -1,    -1,    -1,   258,    -1,   260,
     261,    -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,   272,   273,    -1,    -1,   276,   277,    -1,   279,   280,
      -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,    -1,
     291,    -1,   293,   294,    -1,    -1,    -1,    -1,   299,    -1,
      -1,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,    -1,   319,   320,
     321,   322,    -1,   324,   325,   326,   327,    -1,   329,   330,
      -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,
      -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,    -1,    -1,
     361,   362,    -1,    -1,   365,   366,   367,   368,    -1,    -1,
      -1,    -1,   373,    -1,    -1,    -1,   377,    -1,   379,   380,
     381,    -1,   383,   384,   385,   386,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,   400,
      -1,    -1,    -1,    -1,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,   414,   415,    -1,    -1,    -1,    -1,   420,
     421,    -1,   423,    -1,   425,   426,   427,   428,   429,    -1,
     431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,   440,
     441,   442,   443,   444,    -1,    -1,   447,   448,   449,   450,
     451,    -1,   453,    -1,    -1,   456,    -1,   458,   459,    -1,
     461,    -1,    -1,    -1,   465,    -1,    -1,   468,   469,   470,
     471,    -1,    -1,    -1,   475,   476,   477,   478,   479,   480,
     481,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,    -1,
     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,    -1,
      -1,   502,    -1,    -1,   505,    -1,    -1,   508,   509,    -1,
     511,    -1,   513,    -1,   515,   516,    -1,    -1,    -1,    -1,
      -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,    -1,
      -1,   532,    -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,
     541,    -1,   543,   544,   545,   546,   547,   548,    -1,    -1,
     551,   552,   553,   554,    -1,   556,   557,    -1,   559,    -1,
     561,   562,   563,   564,    -1,    -1,   567,   568,    -1,   570,
     571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,   580,
     581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,   590,
     591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,   600,
      -1,    -1,   603,    -1,    -1,    -1,   607,   608,   609,    -1,
      -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,    -1,
      -1,    -1,   623,   624,   625,   626,   627,   628,    -1,    -1,
     631,    -1,    -1,    -1,   635,    -1,    -1,   638,    -1,   640,
      -1,    15,   643,    17,    18,    19,    20,    21,    -1,    -1,
      24,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    -1,    42,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,    53,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    63,
      64,    -1,    66,    67,    -1,    69,    -1,    -1,    -1,    -1,
      -1,    75,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    93,
      -1,    95,    96,    97,    98,    -1,   100,   101,    -1,   103,
     104,   105,    -1,   107,    -1,   109,    -1,    -1,   112,    -1,
      -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,    -1,
      -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,    -1,
      -1,   135,    -1,    -1,    -1,    -1,    -1,   141,    -1,   143,
      -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,    -1,    -1,    -1,    -1,   160,   161,   162,    -1,
      -1,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
      -1,    -1,   176,   177,    -1,   179,   180,   181,   182,   183,
      -1,    -1,    -1,    -1,   188,   189,   190,    -1,    -1,   193,
     194,   195,   196,   197,   198,    -1,    -1,    -1,    -1,    -1,
      -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,   213,
     214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,    -1,
     224,   225,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,   236,   237,   238,   239,   240,    -1,   242,   243,
     244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,   253,
      -1,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,    -1,   272,   273,
      -1,    -1,   276,   277,    -1,   279,   280,    -1,    -1,    -1,
      -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,   293,
     294,    -1,    -1,    -1,    -1,   299,    -1,    -1,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,    -1,   319,   320,   321,   322,    -1,
     324,   325,   326,   327,    -1,   329,   330,    -1,    -1,    -1,
      -1,   335,   336,   337,   338,   339,   340,    -1,    -1,   343,
     344,    -1,   346,    -1,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,    -1,    -1,   361,   362,    -1,
      -1,   365,   366,   367,   368,    -1,    -1,    -1,    -1,   373,
      -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,   383,
     384,   385,   386,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   399,   400,    -1,    -1,    -1,
      -1,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
     414,   415,    -1,    -1,    -1,    -1,   420,   421,    -1,   423,
      -1,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
      -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,   443,
     444,    -1,    -1,   447,   448,   449,   450,   451,    -1,   453,
      -1,    -1,   456,    -1,   458,   459,    -1,   461,    -1,    -1,
      -1,   465,    -1,    -1,   468,   469,   470,   471,    -1,    -1,
      -1,   475,   476,   477,   478,   479,   480,   481,    -1,   483,
     484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,   493,
      -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,    -1,
      -1,   505,    -1,    -1,   508,   509,    -1,   511,    -1,   513,
      -1,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,   523,
     524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,    -1,
      -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,   543,
     544,   545,   546,   547,   548,    -1,    -1,   551,   552,   553,
     554,    -1,   556,   557,    -1,   559,    -1,   561,   562,   563,
     564,    -1,    -1,   567,   568,    -1,   570,   571,   572,   573,
      -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,    -1,
      -1,    -1,   586,   587,   588,    -1,   590,   591,    -1,   593,
     594,    -1,    -1,    -1,    -1,    -1,   600,    -1,    -1,   603,
      -1,    -1,    -1,   607,   608,   609,    -1,    -1,    -1,    -1,
      -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,   623,
     624,   625,   626,   627,   628,    -1,    -1,   631,    -1,    -1,
      -1,   635,    -1,    -1,   638,    -1,   640,    -1,    15,   643,
      17,    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,
      -1,    28,    -1,    -1,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    -1,    42,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,    -1,
      57,    -1,    -1,    -1,    -1,    -1,    63,    64,    -1,    66,
      67,    -1,    69,    -1,    -1,    -1,    -1,    -1,    75,    76,
      77,    78,    79,    80,    81,    -1,    83,    84,    -1,    -1,
      -1,    -1,    -1,    -1,    91,    -1,    93,    -1,    95,    96,
      97,    98,    -1,   100,   101,    -1,   103,   104,   105,    -1,
     107,    -1,   109,    -1,    -1,   112,    -1,    -1,   115,    -1,
     117,    -1,   119,    -1,   121,    -1,    -1,    -1,   125,   126,
     127,    -1,    -1,   130,    -1,    -1,    -1,    -1,   135,    -1,
      -1,    -1,    -1,    -1,   141,    -1,   143,    -1,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,    -1,
      -1,    -1,    -1,   160,   161,   162,    -1,    -1,    -1,   166,
      -1,    -1,   169,    -1,   171,   172,   173,    -1,    -1,   176,
     177,    -1,   179,   180,   181,   182,   183,    -1,    -1,    -1,
      -1,   188,   189,   190,    -1,    -1,   193,   194,   195,   196,
     197,   198,    -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,
     207,    -1,   209,    -1,   211,   212,   213,   214,   215,    -1,
     217,    -1,   219,    -1,    -1,    -1,    -1,   224,   225,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,   236,
     237,   238,   239,   240,    -1,   242,   243,   244,    -1,   246,
      -1,   248,    -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,
      -1,   258,    -1,   260,   261,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,    -1,   272,   273,    -1,    -1,   276,
     277,    -1,   279,   280,    -1,    -1,    -1,    -1,    -1,   286,
     287,    -1,   289,    -1,   291,    -1,   293,   294,    -1,    -1,
      -1,    -1,   299,    -1,    -1,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,    -1,   319,   320,   321,   322,    -1,   324,   325,   326,
     327,    -1,   329,   330,    -1,    -1,    -1,    -1,   335,   336,
     337,   338,   339,   340,    -1,    -1,   343,   344,    -1,   346,
      -1,   348,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,    -1,    -1,   361,   362,    -1,    -1,   365,   366,
     367,   368,    -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,
     377,    -1,   379,   380,   381,    -1,   383,   384,   385,   386,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   399,   400,    -1,    -1,    -1,    -1,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,   414,   415,    -1,
      -1,    -1,    -1,   420,   421,    -1,   423,    -1,   425,   426,
     427,   428,   429,    -1,   431,   432,   433,    -1,    -1,   436,
      -1,    -1,    -1,   440,   441,   442,   443,   444,    -1,    -1,
     447,   448,   449,   450,   451,    -1,   453,    -1,    -1,   456,
      -1,   458,   459,    -1,   461,    -1,    -1,    -1,   465,    -1,
      -1,   468,   469,   470,   471,    -1,    -1,    -1,   475,   476,
     477,   478,   479,   480,   481,    -1,   483,   484,    -1,   486,
      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,
      -1,   498,    -1,    -1,    -1,   502,    -1,    -1,   505,    -1,
      -1,   508,   509,    -1,   511,    -1,   513,    -1,   515,   516,
      -1,    -1,    -1,    -1,    -1,    -1,   523,   524,    -1,   526,
      -1,    -1,   529,    -1,    -1,   532,    -1,    -1,    -1,    -1,
     537,    -1,    -1,    -1,   541,    -1,   543,   544,   545,   546,
     547,   548,    -1,    -1,   551,   552,   553,   554,    -1,   556,
     557,    -1,   559,    -1,   561,   562,   563,   564,    -1,    -1,
     567,   568,    -1,   570,   571,   572,   573,    -1,    -1,    -1,
      -1,    -1,   579,   580,   581,    -1,    -1,    -1,    -1,   586,
     587,   588,    -1,   590,   591,    -1,   593,   594,    -1,    -1,
      -1,    -1,    -1,   600,    -1,    -1,   603,    -1,    -1,    -1,
     607,   608,   609,    -1,    -1,    -1,    -1,    -1,    -1,   616,
      -1,    -1,   619,    -1,    -1,    -1,   623,   624,   625,   626,
     627,   628,    -1,    -1,   631,    -1,    -1,    -1,   635,    -1,
      -1,   638,    -1,   640,    -1,    15,   643,    17,    18,    19,
      20,    21,    -1,    -1,    24,    -1,    -1,    -1,    28,    -1,
      -1,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    -1,    42,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      50,    -1,    -1,    53,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    63,    64,    -1,    66,    67,    -1,    69,
      -1,    -1,    -1,    -1,    -1,    75,    76,    77,    78,    79,
      80,    81,    -1,    83,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    93,    -1,    95,    96,    97,    98,    -1,
     100,   101,    -1,   103,   104,   105,    -1,   107,    -1,   109,
      -1,    -1,   112,    -1,    -1,   115,    -1,   117,    -1,   119,
      -1,   121,    -1,    -1,    -1,   125,   126,   127,    -1,    -1,
     130,    -1,    -1,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,   141,    -1,   143,    -1,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,
     160,   161,   162,    -1,    -1,    -1,   166,    -1,    -1,   169,
      -1,   171,   172,   173,    -1,    -1,   176,   177,    -1,   179,
     180,   181,   182,   183,    -1,    -1,    -1,    -1,   188,   189,
     190,    -1,    -1,   193,   194,   195,   196,   197,   198,    -1,
      -1,    -1,    -1,    -1,    -1,   205,    -1,   207,    -1,   209,
      -1,   211,   212,   213,   214,   215,    -1,   217,    -1,   219,
      -1,    -1,    -1,    -1,   224,   225,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,   236,   237,   238,   239,
     240,    -1,   242,   243,   244,    -1,   246,    -1,   248,    -1,
      -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,   258,    -1,
     260,   261,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,    -1,   272,   273,    -1,    -1,   276,   277,    -1,   279,
     280,    -1,    -1,    -1,    -1,    -1,   286,   287,    -1,   289,
      -1,   291,    -1,   293,   294,    -1,    -1,    -1,    -1,   299,
      -1,    -1,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,    -1,   319,
     320,   321,   322,    -1,   324,   325,   326,   327,    -1,   329,
     330,    -1,    -1,    -1,    -1,   335,   336,   337,   338,   339,
     340,    -1,    -1,   343,   344,    -1,   346,    -1,   348,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
      -1,   361,   362,    -1,    -1,   365,   366,   367,   368,    -1,
      -1,    -1,    -1,   373,    -1,    -1,    -1,   377,    -1,   379,
     380,   381,    -1,   383,   384,   385,   386,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,
     400,    -1,    -1,    -1,    -1,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,   414,   415,    -1,    -1,    -1,    -1,
     420,   421,    -1,   423,    -1,   425,   426,   427,   428,   429,
      -1,   431,   432,   433,    -1,    -1,   436,    -1,    -1,    -1,
     440,   441,   442,   443,   444,    -1,    -1,   447,   448,   449,
     450,   451,    -1,   453,    -1,    -1,   456,    -1,   458,   459,
      -1,   461,    -1,    -1,    -1,   465,    -1,    -1,   468,   469,
     470,   471,    -1,    -1,    -1,   475,   476,   477,   478,   479,
     480,   481,    -1,   483,   484,    -1,   486,    -1,    -1,    -1,
      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,
      -1,    -1,   502,    -1,    -1,   505,    -1,    -1,   508,   509,
      -1,   511,    -1,   513,    -1,   515,   516,    -1,    -1,    -1,
      -1,    -1,    -1,   523,   524,    -1,   526,    -1,    -1,   529,
      -1,    -1,   532,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,   541,    -1,   543,   544,   545,   546,   547,   548,    -1,
      -1,   551,   552,   553,   554,    -1,   556,   557,    -1,   559,
      -1,   561,   562,   563,   564,    -1,    -1,   567,   568,    -1,
     570,   571,   572,   573,    -1,    -1,    -1,    -1,    -1,   579,
     580,   581,    -1,    -1,    -1,    -1,   586,   587,   588,    -1,
     590,   591,    -1,   593,   594,    -1,    -1,    -1,    -1,    -1,
     600,    -1,    -1,   603,    -1,    -1,    -1,   607,   608,   609,
      -1,    -1,    -1,    -1,    -1,    -1,   616,    -1,    -1,   619,
      -1,    -1,    -1,   623,   624,   625,   626,   627,   628,    -1,
      -1,   631,    -1,    -1,    -1,   635,    -1,    -1,   638,    -1,
     640,    -1,    15,   643,    17,    18,    19,    20,    21,    -1,
      -1,    24,    -1,    -1,    -1,    28,    -1,    -1,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    50,    -1,    -1,
      53,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,
      63,    -1,    -1,    66,    67,    -1,    69,    -1,    -1,    -1,
      -1,    -1,    75,    76,    77,    78,    -1,    80,    81,    -1,
      83,    84,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,
      93,    -1,    95,    96,    97,    98,    -1,   100,   101,    -1,
     103,   104,   105,    -1,   107,    -1,   109,    -1,    -1,   112,
      -1,    -1,   115,    -1,   117,    -1,   119,    -1,   121,    -1,
      -1,    -1,   125,   126,   127,    -1,    -1,   130,    -1,    -1,
      -1,    -1,   135,    -1,    -1,    -1,    -1,    -1,   141,    -1,
     143,    -1,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,    -1,    -1,    -1,    -1,   160,   161,   162,
      -1,    -1,    -1,   166,    -1,    -1,   169,    -1,   171,   172,
     173,    -1,    -1,   176,   177,    -1,   179,   180,   181,   182,
     183,    -1,    -1,    -1,    -1,   188,   189,   190,    -1,    -1,
     193,   194,    -1,   196,   197,   198,    -1,    -1,    -1,    -1,
      -1,    -1,   205,    -1,   207,    -1,   209,    -1,   211,   212,
     213,   214,   215,    -1,   217,    -1,   219,    -1,    -1,    -1,
      -1,   224,   225,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,   236,   237,   238,   239,    -1,    -1,   242,
     243,   244,    -1,   246,    -1,   248,    -1,    -1,    -1,    -1,
     253,    -1,    -1,    -1,    -1,   258,    -1,   260,   261,    -1,
     263,   264,    -1,    -1,    -1,   268,    -1,    -1,    -1,   272,
     273,    -1,    -1,   276,    -1,    -1,   279,   280,    -1,    -1,
      -1,    -1,    -1,   286,   287,    -1,   289,    -1,   291,    -1,
     293,   294,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,    -1,   319,   320,   321,   322,
      -1,   324,   325,   326,   327,    -1,   329,   330,    -1,    -1,
      -1,    -1,   335,   336,   337,   338,   339,   340,    -1,    -1,
     343,   344,    -1,   346,    -1,   348,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,    -1,    -1,   361,   362,
      -1,    -1,   365,   366,   367,   368,    -1,    -1,    -1,    -1,
     373,    -1,    -1,    -1,   377,    -1,   379,   380,   381,    -1,
     383,   384,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   399,   400,    -1,    -1,
      -1,    -1,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,   414,   415,    -1,    -1,    -1,    -1,   420,   421,    -1,
     423,    -1,   425,   426,   427,   428,   429,    -1,   431,   432,
     433,    -1,    -1,   436,    -1,    -1,    -1,   440,   441,   442,
     443,   444,    -1,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,    -1,   456,    -1,   458,    -1,    -1,   461,    -1,
      -1,    -1,   465,    -1,    -1,   468,   469,   470,    -1,    -1,
      -1,    -1,   475,   476,   477,   478,   479,   480,   481,    -1,
     483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,
     493,    -1,    -1,    -1,    -1,   498,    -1,    -1,    -1,   502,
      -1,    -1,   505,    -1,    -1,   508,   509,    -1,   511,    -1,
     513,    -1,   515,   516,    -1,    -1,    -1,    -1,    -1,    -1,
     523,   524,    -1,   526,    -1,    -1,   529,    -1,    -1,   532,
      -1,    -1,    -1,    -1,   537,    -1,    -1,    -1,   541,    -1,
     543,   544,   545,   546,   547,   548,    -1,    -1,   551,   552,
     553,   554,    -1,   556,   557,    -1,   559,    -1,   561,   562,
     563,   564,    -1,    -1,   567,   568,    -1,   570,   571,   572,
     573,    -1,    -1,    -1,    -1,    -1,   579,   580,   581,    -1,
      -1,    -1,    -1,   586,   587,   588,    -1,   590,   591,    -1,
     593,   594,    -1,    -1,    -1,    -1,    -1,   600,    -1,    -1,
     603,    -1,    -1,    -1,   607,   608,   609,    -1,    -1,    -1,
      -1,    -1,    -1,   616,    -1,    -1,   619,    -1,    -1,    -1,
     623,   624,   625,   626,   627,   628,    -1,    -1,    -1,    -1,
      -1,    -1,   635,    -1,    -1,   638,    -1,   640,    -1,    -1,
     643
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,     4,     6,     8,    10,    11,    12,    23,    25,
      42,    46,    60,    61,    68,    73,    74,    94,   113,   136,
     144,   145,   146,   157,   158,   170,   185,   201,   216,   218,
     223,   227,   252,   254,   270,   288,   292,   387,   404,   406,
     419,   430,   452,   455,   457,   460,   463,   464,   472,   474,
     482,   488,   496,   501,   502,   503,   533,   540,   585,   597,
     601,   604,   610,   639,   645,   655,   666,   669,   670,   671,
     672,   673,   675,   680,   682,   691,   724,   752,   759,   760,
     879,   968,  1043,  1090,  1093,  1103,  1106,  1111,  1124,  1125,
    1130,  1133,  1138,  1145,  1157,  1158,  1327,  1329,  1340,  1343,
    1368,  1376,  1387,  1394,  1408,  1411,  1414,  1415,  1416,  1417,
    1418,  1419,  1420,  1421,  1431,  1437,  1441,  1446,  1447,  1448,
    1499,  1526,  1532,  1534,  1541,  1543,  1571,  1577,  1578,  1579,
    1580,  1633,  1641,  1642,  1643,    15,    17,    18,    19,    20,
      21,    24,    28,    31,    33,    34,    35,    36,    37,    38,
      39,    40,    42,    46,    50,    53,    54,    55,    57,    59,
      60,    63,    66,    67,    69,    70,    72,    73,    75,    76,
      77,    78,    79,    80,    81,    83,    84,    85,    86,    87,
      88,    89,    91,    92,    93,    94,    95,    96,    97,    98,
     100,   101,   103,   104,   105,   106,   107,   109,   112,   115,
     117,   119,   121,   125,   126,   127,   130,   135,   136,   141,
     143,   147,   149,   150,   151,   152,   153,   157,   160,   161,
     162,   166,   168,   169,   171,   172,   173,   176,   177,   179,
     180,   181,   182,   183,   184,   185,   188,   189,   190,   193,
     194,   196,   197,   198,   201,   205,   207,   209,   211,   212,
     213,   214,   215,   217,   219,   223,   224,   225,   227,   231,
     232,   236,   237,   238,   239,   242,   243,   244,   246,   248,
     253,   254,   258,   260,   261,   263,   264,   268,   271,   272,
     273,   276,   279,   280,   286,   287,   289,   291,   293,   294,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   319,   320,   321,   322,
     324,   325,   326,   327,   329,   330,   335,   336,   337,   338,
     339,   340,   343,   344,   346,   348,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   361,   362,   365,   366,   367,
     368,   372,   373,   377,   379,   380,   381,   383,   384,   385,
     386,   388,   389,   398,   399,   400,   403,   405,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   419,   420,
     421,   423,   425,   426,   427,   428,   429,   431,   432,   433,
     436,   440,   441,   442,   443,   444,   447,   448,   449,   450,
     451,   453,   454,   456,   457,   458,   461,   463,   465,   466,
     468,   469,   470,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   486,   487,   491,   492,   493,   494,
     498,   502,   504,   505,   506,   507,   508,   509,   511,   512,
     513,   514,   515,   516,   523,   524,   526,   529,   532,   533,
     537,   540,   541,   543,   544,   545,   546,   547,   548,   551,
     552,   553,   554,   556,   557,   559,   561,   562,   563,   564,
     567,   568,   570,   571,   572,   573,   579,   580,   581,   585,
     586,   587,   588,   590,   591,   593,   594,   596,   597,   600,
     603,   605,   607,   608,   609,   616,   619,   623,   624,   625,
     626,   627,   628,   635,   636,   638,   639,   640,   643,  1489,
    1493,  1497,  1498,  1493,  1493,  1493,  1493,  1493,  1493,    21,
     123,   141,   209,   293,   424,   494,   557,  1044,  1602,  1603,
    1604,  1607,   289,   374,  1132,  1572,   566,  1490,   245,   718,
    1493,   319,   556,   560,  1528,  1528,   635,  1573,   123,   208,
     293,   494,   517,   557,   563,   599,   607,   700,   701,   930,
     931,   932,  1020,  1021,  1022,  1377,  1328,   123,   181,   209,
     245,   293,   424,   494,   557,   563,   582,   607,   624,  1339,
    1493,  1132,   117,   761,   717,   663,  1486,  1488,  1493,   681,
    1341,   413,   514,  1442,   126,   245,   640,  1453,  1528,  1132,
     655,   880,  1493,  1438,   482,   607,  1528,  1132,  1344,  1432,
     520,   749,   753,   754,  1493,   717,  1573,  1493,  1161,  1163,
    1164,  1500,     7,     9,  1395,   753,    22,   506,   579,    22,
     506,   560,  1389,   413,   514,  1533,  1369,  1493,    42,    94,
     168,   419,   441,   474,   533,  1635,   488,   655,  1159,     0,
     170,   667,   419,   189,   407,  1412,  1486,  1493,   174,  1055,
    1493,   174,   718,   220,   718,   281,  1490,  1493,  1495,   825,
     826,   829,   852,  1493,  1082,  1083,   181,  1050,  1602,  1528,
    1573,  1139,   725,   663,   689,   690,  1490,  1104,  1126,    27,
    1574,   240,   933,   220,  1495,   827,   852,   717,   394,  1599,
    1603,  1604,  1605,  1606,  1607,   560,   931,   245,   245,   245,
     241,   300,   433,  1385,  1386,    17,    31,    39,    45,    47,
      48,    49,    51,    64,    65,    70,    71,    80,    83,    85,
      86,    87,    88,    89,   106,   110,   111,   116,   118,   122,
     123,   128,   129,   130,   135,   137,   140,   186,   191,   192,
     199,   213,   215,   221,   228,   229,   236,   240,   252,   255,
     273,   278,   286,   297,   323,   328,   339,   343,   345,   349,
     350,   351,   352,   353,   360,   369,   370,   371,   375,   376,
     381,   402,   409,   414,   415,   417,   431,   459,   460,   473,
     479,   480,   486,   538,   539,   545,   549,   550,   555,   566,
     570,   571,   572,   573,   583,   584,   585,   589,   592,   607,
     612,   613,   614,   615,   620,   622,   628,   643,   648,   649,
     654,   655,   658,   659,   662,   663,  1180,  1181,  1182,  1183,
    1187,  1194,  1195,  1196,  1197,  1198,  1199,  1207,  1211,  1224,
    1472,  1474,  1476,  1477,  1478,  1482,  1484,  1489,  1493,   240,
    1338,  1338,  1338,  1338,   220,  1338,  1338,   852,  1338,   717,
    1338,  1528,   676,  1422,   149,    22,    23,   113,   144,   158,
     181,   185,   196,   218,   245,   252,   292,   425,   429,   445,
     453,   461,   488,   501,   502,   551,   582,   604,   606,  1544,
    1546,  1548,  1549,  1493,   386,    79,   437,   663,  1495,   142,
     230,   300,  1346,  1493,  1490,   224,   513,  1443,   256,  1449,
    1527,  1528,   969,  1174,    58,   881,   206,    45,   319,  1400,
    1439,  1493,   717,  1134,  1528,   142,   300,  1347,  1375,   319,
     432,   506,  1433,  1434,   616,   750,   496,   755,    22,   429,
    1542,  1546,   577,  1574,  1162,    22,   154,   230,   522,   523,
     524,   525,   526,   527,   542,  1168,  1169,  1170,  1598,    70,
      71,   140,   217,   289,   356,   409,   493,   579,   662,   994,
    1493,  1501,  1513,  1517,  1518,    22,    34,    46,    70,    78,
      83,   109,   111,   113,   124,   172,   177,   180,   207,   209,
     217,   219,   244,   245,   246,   267,   289,   319,   386,   412,
     423,   424,   427,   428,   448,   493,   506,   541,   559,   560,
     608,   627,   994,  1019,  1396,  1400,  1401,  1403,  1411,  1514,
     755,   507,   689,   437,   632,  1094,  1095,  1096,   507,   689,
    1388,  1493,  1490,  1528,  1375,    47,   228,   229,   566,  1473,
    1491,  1634,  1634,  1634,  1634,  1634,  1163,  1159,   656,   661,
    1493,  1410,  1409,   337,   564,   591,  1046,   605,   118,  1495,
    1496,  1048,   831,   853,  1493,  1047,   388,    16,    68,   158,
     370,   436,   438,   854,   560,   241,   385,  1084,  1085,  1086,
     718,   528,  1608,  1609,  1049,  1112,  1140,  1141,  1142,  1143,
    1486,   655,   726,  1493,   577,  1333,  1334,  1486,  1333,    67,
     372,   372,   452,  1575,   369,   370,  1186,  1493,   830,   853,
     203,    16,  1496,  1559,  1562,   460,    20,   424,   582,   704,
    1174,  1601,  1609,  1617,  1621,  1622,  1628,   704,  1174,  1600,
    1609,  1617,  1622,  1628,  1602,  1607,   933,   933,   933,   933,
     206,  1378,  1382,  1383,  1493,  1385,   655,   655,   655,  1194,
     655,   655,   655,  1180,  1227,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,  1179,
    1179,   655,  1178,   655,   655,   655,   566,   655,   655,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,  1180,
     655,   655,   655,   655,  1225,  1226,  1482,  1493,   655,   655,
     655,   655,   655,   655,   655,   655,   655,  1180,  1178,   655,
     655,   655,   655,   655,   655,   655,   655,   655,   655,   655,
     655,   655,   655,   655,   655,   655,  1178,   566,   655,   655,
     655,   566,   655,   655,   655,    47,   228,   229,   566,   993,
     655,  1179,  1178,  1178,   655,   655,   655,   655,   655,  1194,
    1194,  1194,  1180,  1593,  1594,  1493,  1212,  1493,    26,    27,
     391,   394,   641,  1184,  1185,   174,   175,   210,   222,   262,
     274,   301,   363,  1188,    43,   155,   259,   282,   349,   446,
     499,   500,   515,   646,   647,   648,   649,   650,   651,   652,
     653,  1186,  1194,    82,   393,   657,  1491,   655,   663,   186,
    1493,   718,  1493,  1493,   853,   718,  1495,   863,  1401,   718,
    1496,  1558,  1332,  1338,   611,   677,    45,    78,   147,   172,
     176,   211,   232,   246,   294,   319,   423,   432,   447,   465,
     506,   509,   537,   559,   608,  1423,  1427,  1428,  1528,    99,
     662,   762,   763,   764,   765,  1493,   423,  1547,   476,   476,
     557,   563,   607,   624,   389,  1551,   556,   382,  1553,    77,
     506,  1550,   124,   624,  1552,   382,   657,    29,   174,  1279,
    1280,  1535,  1493,   241,  1081,   514,   100,   432,  1444,    60,
      98,   300,  1455,  1486,  1529,  1530,  1131,   656,  1180,   284,
     287,   434,   882,   884,   662,   674,  1490,   294,  1135,  1496,
    1136,  1137,  1486,  1107,   256,  1335,  1348,  1349,  1486,    60,
    1435,   657,  1491,    66,    76,    91,   103,   104,   105,   121,
     338,   355,   484,   544,   562,   756,   758,  1547,   382,   382,
     482,  1576,  1575,   598,  1581,  1582,   650,  1172,  1173,  1174,
    1170,   496,   663,    45,   140,   174,   497,   995,   996,  1359,
    1495,   204,  1359,  1503,   662,  1495,    45,   140,   998,   999,
    1495,   663,  1504,  1502,  1359,   507,   180,   282,   630,  1407,
     655,   123,   181,   209,   424,   560,   582,   624,  1407,    22,
     942,  1495,   283,  1298,  1300,   206,   259,  1402,  1404,    81,
     537,   204,   537,   556,   514,    81,   537,    22,    53,   107,
     112,   261,   336,   400,   516,   553,  1390,  1391,  1392,   689,
     232,   537,   690,   537,  1298,  1407,  1404,   294,   171,    84,
     426,   556,   581,   204,   537,   619,  1097,  1098,  1097,   384,
     637,   101,   657,  1097,  1097,  1334,  1081,   657,   383,  1637,
     552,  1638,   266,   468,  1636,   656,  1582,  1584,  1586,  1587,
     170,   668,  1157,  1413,  1473,  1493,   140,   928,   929,   939,
     940,  1003,   126,  1179,   662,   719,    16,   832,   719,   655,
     125,   849,   849,   849,    14,  1486,  1086,  1051,   487,   624,
    1609,  1113,  1114,  1334,   259,   657,   406,  1151,  1153,  1154,
     727,   728,  1180,   683,   189,   433,   657,  1105,    69,   189,
     193,   204,   335,   433,  1127,  1128,  1129,    67,   452,   186,
     699,   832,   126,   849,   238,   657,  1174,  1174,  1174,   181,
     209,   209,  1609,  1486,  1493,  1493,  1493,  1336,  1337,  1486,
    1487,  1493,   657,  1380,   663,  1384,  1180,  1180,    22,   154,
    1219,  1281,  1219,  1219,  1219,   629,  1229,  1180,  1180,  1224,
    1224,  1180,  1180,  1180,  1180,  1192,  1193,  1180,  1180,  1180,
    1180,   154,  1219,  1281,   656,   137,   199,   228,   297,   376,
     589,   656,  1307,  1310,  1311,   656,  1180,  1180,  1180,  1180,
    1482,  1593,   131,   132,   133,   134,   135,   233,   234,   235,
     236,   339,   341,   342,   343,   350,   431,   485,   486,   628,
     642,   643,  1276,  1277,  1224,   127,   130,   570,   573,  1278,
     154,  1214,  1180,  1180,  1180,  1180,  1276,  1224,  1180,  1224,
    1226,    19,   657,   663,   154,  1219,  1180,  1180,   154,  1219,
    1180,  1180,  1224,  1224,  1224,  1180,  1180,  1180,  1224,  1183,
    1180,  1180,  1180,  1180,  1180,   656,  1180,  1219,  1219,  1180,
    1180,   154,  1219,  1180,  1277,  1277,  1180,    56,   275,   578,
    1180,  1180,   656,  1483,  1484,  1493,  1219,  1219,  1180,  1180,
     656,   657,   656,   488,   655,  1590,  1591,  1180,   662,  1213,
    1495,   663,  1180,  1180,  1180,  1182,   192,   375,   584,   600,
    1186,    22,    28,  1182,  1189,  1183,  1183,   655,  1194,  1183,
    1183,  1183,  1183,   282,  1183,  1183,   255,  1183,   255,  1183,
    1183,  1183,  1183,  1183,    43,   259,   282,   446,  1495,  1194,
    1180,  1200,  1493,   663,   382,   863,   373,   626,   864,   865,
     172,   657,  1333,  1330,   662,   678,   679,   294,   294,   294,
     294,    60,   294,   689,   294,   657,  1424,   130,   570,   573,
     757,   767,  1211,  1476,  1482,  1495,   657,   174,   556,   655,
    1563,  1496,  1563,  1563,  1563,   209,   424,   560,  1545,  1549,
    1493,   197,   366,  1493,  1536,  1537,  1348,  1490,   607,  1180,
    1445,  1146,   289,  1454,  1280,   657,  1333,  1175,    84,   655,
     888,   889,   888,   889,   407,   891,   225,   269,  1495,    41,
     577,  1440,   657,   577,   657,   577,  1333,  1349,  1345,   406,
    1243,  1244,   689,  1434,   657,   174,   657,  1496,   209,   424,
    1545,  1493,    22,   154,  1589,   657,  1165,  1180,  1480,  1493,
    1493,    82,  1001,  1180,  1496,   381,   409,   566,  1524,   263,
     437,  1519,  1520,  1521,  1522,   217,   289,   493,  1515,  1359,
    1493,   579,  1505,  1516,  1518,   657,  1507,    22,    45,   140,
     382,  1180,  1525,   537,   259,  1405,  1490,  1180,   650,   933,
     718,   718,   718,  1486,   718,  1486,   294,   354,   537,  1399,
    1399,   297,   376,   477,   589,  1301,  1302,  1474,  1493,  1407,
    1493,   718,  1407,  1496,  1402,  1407,  1490,   718,  1407,   260,
     554,   194,   204,  1393,   657,   180,   537,  1402,  1486,  1404,
    1402,  1402,  1180,  1407,  1407,  1092,   451,   529,  1099,  1100,
    1091,   511,  1096,   488,   655,   659,  1230,  1231,  1232,  1233,
    1234,  1245,  1246,  1260,  1473,   411,  1639,   392,  1294,  1300,
    1588,   929,    82,   994,   150,  1495,    92,   106,   271,   347,
     372,   435,   528,   721,   723,   442,   593,   850,   851,   248,
     846,   847,   848,   855,   863,   865,   123,   231,   398,   409,
     416,   512,   607,   702,   703,  1490,    35,   327,   840,   841,
     842,   855,   856,   857,   863,   865,   833,   834,   840,  1045,
     382,   712,  1052,   141,   258,  1486,   657,   410,  1115,   140,
    1144,  1493,  1142,  1486,   878,  1153,   245,   269,  1017,  1155,
     656,   657,   242,   302,   304,   305,   306,   307,   308,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   320,   321,
     322,   449,   450,   684,   685,   688,  1334,   605,  1128,   927,
     928,    92,   367,   443,   594,   843,   844,   845,   855,   859,
     860,   861,   862,   863,   865,   636,   610,   828,    58,   623,
     632,  1560,  1562,   209,   718,   718,   933,   718,  1493,   692,
    1023,  1024,  1023,  1023,   657,  1381,  1243,   663,  1384,  1383,
     206,   650,  1493,   657,   656,  1219,   656,  1220,   656,   656,
     656,  1180,   164,   629,  1228,    29,   656,   611,   656,   656,
     656,   657,   656,   657,   656,   657,   657,   657,   657,   611,
     657,  1208,   656,   650,   656,   657,   657,   656,   656,   656,
     656,   206,   656,   657,  1210,   656,   657,   657,   657,   649,
     656,   657,   656,   656,   655,  1482,  1493,  1219,   656,   656,
     656,  1219,   656,   657,   656,   656,   656,   656,   656,   656,
     657,   656,   259,   656,   657,   657,   657,   657,   656,   656,
     656,   657,   206,   657,  1219,   656,   656,   657,   657,   657,
     656,   206,  1180,   206,  1180,   206,  1180,   206,   656,   657,
     656,   656,   656,   656,   657,   656,  1224,  1250,  1251,  1252,
     488,   655,  1160,  1585,  1586,   598,  1595,   660,  1515,   497,
    1493,   192,   375,   584,   600,   655,    27,  1180,  1593,   179,
    1286,  1183,  1180,  1180,  1183,   655,  1194,  1183,  1174,  1204,
    1205,  1206,   655,   663,  1493,  1486,   864,  1359,  1360,  1496,
      62,   467,  1087,  1333,  1495,   657,   689,  1428,  1333,  1429,
     765,   768,   769,   764,   377,   480,   766,  1493,  1564,  1565,
     577,   650,  1486,  1493,  1557,  1557,  1557,   174,   197,   210,
     222,   272,   274,   301,   366,   421,  1538,  1540,   630,  1282,
    1342,  1496,  1147,  1148,  1149,  1150,  1486,   247,   300,   437,
     637,  1531,  1530,   655,  1174,  1307,   548,   892,   883,   655,
    1180,  1490,  1496,  1496,  1137,  1486,   189,   433,   609,  1108,
    1109,  1110,   488,   496,   615,   616,   655,   923,  1350,  1353,
     655,    22,  1436,   758,   757,   218,   206,  1557,  1557,  1557,
    1583,  1173,   206,   256,  1166,  1167,  1293,  1294,  1322,  1175,
    1175,   663,   140,  1000,  1002,  1495,  1359,   655,   655,   280,
     384,   637,   657,   657,   663,   663,   663,  1518,  1180,  1519,
    1506,  1359,  1508,  1509,  1490,   206,  1406,   656,  1493,   184,
     477,   380,   657,  1407,   432,  1298,  1392,  1405,  1407,  1402,
    1486,  1407,  1407,   657,   603,  1101,  1259,  1493,   114,   249,
     266,   278,   359,   473,   542,  1241,  1242,   496,   657,  1486,
    1259,   657,   204,  1640,    58,  1298,  1360,  1360,   357,  1490,
     528,   528,   528,   528,   528,   487,  1490,  1490,  1360,   657,
     848,  1490,  1490,  1490,  1490,   137,   199,   228,   297,   376,
     589,  1306,  1490,  1490,   656,   657,  1360,  1360,   657,   842,
     835,   836,   855,   856,   857,    16,    21,    23,    25,    36,
      38,    68,    73,    74,    80,    92,   100,   110,   126,   143,
     151,   152,   158,   166,   172,   183,   202,   243,   245,   253,
     268,   292,   326,   344,   348,   387,   392,   399,   401,   406,
     409,   440,   454,   455,   456,   457,   478,   534,   535,   536,
     541,   557,   561,   580,   585,   598,   876,   935,   937,   939,
     940,  1056,  1060,  1062,  1065,  1071,  1072,  1073,  1078,  1079,
    1290,  1489,    96,   483,   455,  1053,  1610,  1114,   204,  1152,
     655,  1180,   174,   174,   174,   174,   174,   174,   174,   174,
     174,   174,   174,   174,   174,   174,   174,   174,   174,   174,
     174,   174,   174,   657,  1360,  1360,  1360,  1360,   657,   845,
    1495,   293,   190,   837,   838,   839,   855,   856,   857,   858,
     861,   862,   863,   865,   409,   566,  1495,  1493,  1629,    18,
      41,   823,   718,   655,   470,   282,   655,   867,   870,   934,
     936,   937,   587,   611,  1031,   382,   382,   382,  1337,  1493,
     611,  1379,  1493,  1231,   663,  1384,   255,  1180,   656,  1180,
     569,  1180,  1180,   168,    45,    71,   127,   130,   138,   156,
     257,   361,   504,   573,   602,  1221,   995,  1193,  1180,  1192,
    1224,  1180,  1180,   995,  1221,  1224,   656,   255,   255,  1180,
    1180,  1224,  1180,  1180,  1180,  1180,  1180,  1183,   656,   656,
    1180,  1180,  1180,  1180,  1180,  1180,  1224,   255,  1180,  1180,
    1180,   656,  1180,  1180,  1180,  1180,   206,  1180,   206,  1180,
     206,  1180,  1180,  1180,   656,  1596,  1597,  1598,  1251,  1160,
     656,  1589,  1495,  1180,  1593,  1182,   656,   657,   656,  1194,
    1276,  1276,    27,  1180,  1593,  1286,  1180,   656,   657,  1223,
    1224,  1493,  1331,   941,  1495,  1087,   679,  1425,   174,   657,
     656,   657,  1559,   663,   663,   577,   577,   577,  1539,  1283,
    1299,  1300,  1350,   657,  1151,  1153,   566,  1492,   637,   289,
      98,   885,   886,   887,  1493,   897,  1183,    58,   655,   899,
     889,   885,   577,  1109,   924,  1351,   655,  1356,  1361,  1356,
     656,   923,  1352,  1479,  1480,  1483,  1493,  1354,  1275,  1493,
     174,   389,  1558,   206,   206,   206,  1158,   159,  1231,  1323,
     204,   292,  1171,  1322,  1299,  1167,    29,  1176,  1490,  1493,
     650,  1493,  1524,   566,   566,   437,   458,   491,  1523,  1521,
    1520,  1359,  1507,  1525,   657,  1511,  1513,  1517,   137,   199,
     297,   376,   589,  1308,  1397,   177,   627,  1302,  1303,   184,
    1302,  1302,   376,  1406,  1282,  1402,  1100,   303,   688,  1102,
    1247,  1254,  1259,  1230,   266,   266,   395,  1261,   278,   473,
    1241,  1261,  1230,  1371,  1372,  1483,  1232,  1243,  1256,  1257,
    1306,   340,  1295,  1002,   996,   126,   126,   141,   258,   237,
     866,  1307,   848,   703,   866,   866,   842,   657,   836,    90,
     102,   406,   951,   958,   959,  1015,  1017,  1021,  1022,  1080,
    1360,  1080,   406,  1360,  1360,  1080,  1360,   406,   406,  1360,
    1360,   577,   150,  1360,   267,   557,   203,   406,   422,  1017,
    1080,   267,  1360,   406,   557,   150,  1360,  1360,  1360,  1360,
    1360,  1080,   406,    58,  1360,  1360,   878,  1360,   406,   408,
      29,   174,   577,  1089,   406,   406,  1360,  1360,  1360,  1360,
     153,   336,  1493,  1360,  1360,   406,  1360,   935,   657,   875,
     876,  1060,   655,   663,   950,   960,  1485,  1493,  1359,   370,
     420,    33,   182,   706,   577,   151,   166,   708,   655,  1611,
      22,    84,  1116,   655,   422,  1272,  1273,  1274,  1493,   655,
    1306,  1490,  1490,  1308,  1490,  1306,  1490,  1490,  1490,  1490,
    1490,  1490,  1490,  1306,  1306,  1490,   119,   372,   508,  1477,
    1490,  1306,   685,  1490,  1307,   866,   866,   845,   388,   220,
    1360,   657,   839,   566,    29,   611,  1561,   470,   655,   144,
     252,   604,   824,   705,  1623,   138,   257,   439,   543,   946,
    1486,   282,   923,   947,   948,   949,   950,   951,   874,   875,
     657,   936,    57,   225,   481,  1036,  1036,  1486,  1486,  1486,
     663,  1231,  1282,  1384,  1282,  1180,   656,  1180,   569,   655,
     985,   986,   986,   986,   655,   980,   981,   985,  1222,   986,
     257,   986,   257,   656,   656,   656,    29,  1190,   656,    29,
     656,   656,   656,  1209,  1180,  1180,   656,   656,   392,  1216,
     657,   657,   656,   657,   656,   259,  1201,  1202,   656,   656,
     656,   656,   657,   656,   656,  1180,   656,   204,   656,   656,
     657,   656,   657,   657,   656,  1180,   656,  1180,   656,  1180,
     656,   656,   656,  1172,  1598,   656,  1592,   663,  1041,   656,
    1224,  1182,   656,   657,   656,  1175,  1206,   656,   632,  1426,
      66,    76,    91,   103,   104,   105,   121,   338,   355,   469,
     484,   544,   562,   770,   769,  1565,   632,  1568,   650,   650,
    1559,  1559,  1559,   655,  1180,   382,  1366,  1149,  1486,  1153,
     241,  1156,  1450,   656,   657,  1175,   884,   406,   900,   901,
     656,  1496,  1168,  1357,  1358,  1483,  1362,   657,   655,  1353,
     656,   656,   657,   663,  1581,   656,   657,   757,   206,  1558,
    1558,  1558,  1282,  1282,   160,   396,  1318,  1319,  1324,   604,
     259,  1490,  1493,   663,   656,   656,    93,   590,   437,  1525,
    1510,  1512,  1298,  1303,  1398,  1407,   174,   657,   598,   656,
    1585,  1255,   660,   266,  1261,  1261,  1245,   266,   382,   611,
     657,  1370,  1359,  1280,  1168,  1180,  1296,  1481,   836,  1039,
    1485,   933,    74,   203,   422,   599,   957,  1016,   933,  1040,
    1017,  1018,  1018,   933,   140,  1493,  1485,  1132,  1308,  1306,
    1338,  1306,    22,  1061,  1069,  1070,  1493,  1132,  1490,  1490,
     994,  1360,  1306,   269,  1338,   269,  1338,  1338,   941,  1070,
    1360,   197,   272,   372,   944,  1306,   140,  1493,  1308,  1308,
    1338,  1132,  1291,  1292,  1483,   140,  1306,   140,  1306,  1312,
     877,  1490,  1132,  1486,  1132,  1132,    95,    97,   140,   162,
     198,   400,   444,   943,   140,  1306,   140,  1306,   140,  1306,
    1306,  1312,  1061,   938,    16,   158,  1073,   947,  1493,    18,
     197,  1088,   445,   956,   957,  1009,   961,   663,   140,   228,
     297,   376,   589,  1309,  1310,  1490,  1493,   420,  1180,  1180,
     382,   712,   718,   382,    92,   713,  1493,  1612,    29,    22,
     655,  1117,  1061,   656,   657,   686,   687,  1306,   655,  1493,
     866,   839,  1490,   946,  1630,   382,   382,   729,   730,   732,
    1493,   514,  1486,   656,   656,   657,   241,   460,   871,  1456,
     936,   693,   695,   697,  1493,  1282,  1293,  1276,  1180,   137,
     297,   376,   589,    31,    45,    59,   596,   994,  1004,  1005,
    1006,   376,   655,   981,   987,    71,   127,   130,   138,   156,
     200,   257,   358,   361,   439,   573,   602,   974,   975,  1191,
    1221,   656,  1276,  1276,    58,   490,  1215,  1180,  1180,  1224,
      54,   359,   656,   632,  1203,  1180,  1276,  1180,  1180,  1180,
    1180,   656,   656,   656,  1253,  1590,  1493,   656,  1224,  1176,
     437,   218,   462,  1566,  1566,  1566,   140,  1180,  1364,  1365,
     161,  1156,   276,  1456,   887,   656,   225,   269,   902,   656,
     657,  1172,   657,  1359,  1363,  1364,  1361,  1355,  1353,  1479,
    1493,   878,  1493,  1558,  1299,   220,  1287,  1492,  1492,   662,
    1320,  1321,  1495,   498,   650,  1511,  1516,  1298,  1490,   688,
    1589,  1280,  1233,  1230,  1245,   266,   266,  1230,  1245,  1235,
    1236,  1372,  1282,  1365,  1270,  1271,  1172,   657,    30,   145,
    1297,  1132,   655,   269,   269,  1018,  1039,  1039,  1024,  1040,
    1040,   158,   496,  1061,  1485,  1058,   657,  1307,   996,  1490,
    1338,  1069,  1485,  1485,   632,  1490,  1485,  1061,   657,  1297,
     881,  1061,  1066,  1061,   655,   656,  1493,  1486,    44,    45,
      50,    52,    54,    55,   127,   130,   138,   156,   173,   198,
     200,   213,   214,   257,   286,   295,   296,   298,   332,   333,
     334,   351,   352,   353,   358,   361,   378,   379,   414,   415,
     439,   492,   496,   510,   567,   570,   573,   574,   575,   576,
     617,   618,   643,   962,   970,   973,   974,   975,   976,   977,
     978,   979,  1493,  1276,   506,  1490,   157,  1054,   656,   657,
    1613,  1614,  1118,   244,   656,  1273,   656,   657,   702,   514,
     250,   259,   397,   733,   734,   735,   736,  1174,   483,   656,
     657,   731,  1490,   656,   869,   868,   949,    29,   926,   655,
     655,   655,   283,  1304,   656,   656,   656,   656,   656,    45,
      31,   596,   994,    45,   995,   657,   376,   986,   980,    71,
     986,   257,  1006,   656,   656,   656,  1217,  1473,   656,   656,
     657,   656,   346,   271,   432,   656,   656,   656,   656,   656,
     656,   945,  1167,  1299,  1585,   656,   292,   389,    75,   264,
     368,   530,   546,   638,  1555,  1556,   632,  1567,  1567,  1567,
     656,   657,  1367,   256,   655,   890,   655,   903,  1493,   901,
     925,  1358,  1365,   656,  1584,    58,   226,  1284,  1325,  1495,
     657,   346,  1248,   382,  1238,  1245,  1245,   382,  1240,  1180,
     655,  1293,  1268,  1269,  1258,  1481,  1063,  1180,  1040,  1024,
     655,  1023,  1023,   140,   140,  1074,  1127,  1070,  1001,  1485,
    1087,   560,  1075,  1057,  1292,  1067,  1069,  1059,  1429,   655,
    1010,   985,   985,   986,   986,   980,   418,   971,   980,   980,
    1006,    71,   617,   974,   976,  1006,  1006,    71,   618,   618,
     621,   980,   972,   986,   986,   986,  1006,   985,   986,    36,
      82,    92,   140,   212,   375,   382,   422,   492,   599,   963,
     988,   989,   990,  1008,  1186,  1489,   621,   985,  1006,    45,
     985,  1007,   985,   985,   986,   987,   663,   707,   714,   715,
    1493,   488,   655,  1615,  1121,  1493,    22,   655,  1119,   687,
     656,  1490,   656,   657,   731,  1618,   706,  1624,   732,   970,
     991,  1584,   934,   655,   923,  1037,  1038,  1493,  1037,  1037,
     477,  1302,   995,  1007,   376,  1218,  1481,  1180,   346,   188,
    1171,  1171,    27,  1430,   566,   566,   566,    27,  1554,   218,
     324,   325,   329,   330,  1569,  1570,  1365,   269,   560,  1174,
     893,   895,   896,  1493,   615,   904,   945,  1288,  1481,  1285,
    1293,   994,   997,  1321,  1590,  1237,   611,  1239,   611,  1275,
    1304,   202,   241,   610,  1263,  1264,  1267,   945,  1297,   407,
     655,  1064,   656,   655,   655,  1037,   655,   655,   130,   570,
     573,   648,   649,  1475,  1476,   960,  1486,   962,  1132,  1068,
    1108,   656,  1011,  1493,   323,  1012,   504,   602,   644,   982,
     983,   984,   655,   982,   982,  1006,   621,   982,   655,  1006,
     982,  1000,  1490,   371,   992,  1475,    24,   604,   140,   269,
      29,   990,   269,   375,  1359,  1006,  1007,  1006,  1007,   982,
     982,  1493,   532,   709,    64,    79,   195,   240,   265,   277,
     386,   471,   716,   774,   776,   777,   778,   780,   781,   782,
     783,   784,   785,   787,   795,   796,   799,   810,   813,   815,
     816,  1489,  1494,  1498,  1161,  1159,   632,  1616,   656,   657,
    1120,  1631,   735,  1493,  1486,   711,   712,   470,  1001,   874,
     923,   872,   656,   657,  1297,   655,   656,   656,   184,   477,
     656,   657,  1297,   656,   151,  1555,   389,  1306,  1306,  1306,
     376,   648,  1305,  1570,   604,  1486,   897,   547,   898,   656,
     657,   259,   279,    92,   100,   126,   245,   326,   344,   367,
     557,   920,   921,   922,  1401,   633,   634,   657,  1289,  1297,
    1180,  1299,   996,  1326,  1249,  1180,   655,  1180,   655,   656,
    1017,  1017,  1264,  1307,   900,  1037,  1037,   656,  1037,  1037,
    1477,  1477,  1088,   878,  1076,   256,   656,   657,   207,   405,
     505,   382,  1013,   984,  1042,  1473,  1042,   655,  1177,   371,
     616,   655,   140,  1309,  1490,  1493,  1180,   169,   710,   797,
     800,  1493,   206,   366,   788,   775,  1494,  1494,  1493,   779,
     670,   299,   459,   631,   819,    42,   817,   664,   656,    63,
      74,   289,  1493,   422,  1122,  1123,  1493,   720,   991,   204,
     708,  1625,   871,   656,  1581,    92,   268,  1025,  1028,  1031,
    1032,  1033,  1489,  1038,   376,   632,  1026,  1030,  1032,  1035,
    1027,  1029,  1032,  1034,   184,  1481,    72,   297,   376,  1373,
    1374,  1483,  1243,  1175,  1307,   894,   896,   906,   568,  1360,
    1360,   150,   150,  1360,  1360,  1360,  1360,   655,   915,   922,
     172,  1481,   424,  1313,    84,  1457,  1585,  1275,  1275,   204,
    1262,  1262,   656,   656,   656,   952,   656,   656,  1088,   655,
    1493,   144,   604,   656,   657,   656,   656,  1307,  1177,   969,
    1180,  1180,   629,   802,   806,   206,  1493,   790,   791,  1180,
     738,   773,   774,   776,   778,   780,   782,   783,   784,   785,
     787,   795,   810,   813,   815,   738,   820,   818,   811,   814,
    1584,    74,   389,    74,   656,   657,   148,   721,   722,  1186,
    1632,  1174,   713,   991,   873,  1490,  1360,   694,  1033,  1359,
    1297,   656,   403,   696,  1035,   698,  1034,  1297,   657,  1359,
    1451,   656,   898,   655,   908,   910,   905,  1490,  1490,  1360,
    1360,  1309,  1309,  1307,  1495,   548,   916,   917,  1360,  1297,
    1493,   167,   178,   390,   565,  1458,  1459,   285,  1460,   656,
     656,   220,   266,   392,  1266,  1265,  1009,   955,  1025,   953,
     954,   900,    62,   372,   467,   496,  1014,  1014,  1006,  1473,
    1006,   656,   656,   798,   807,   164,   806,   809,   256,   168,
    1180,   168,   773,   661,   603,  1180,   739,   819,   817,   389,
     389,  1123,   148,   773,  1619,   157,  1626,  1584,  1306,  1077,
    1078,  1079,   140,  1309,  1490,  1493,  1489,  1077,  1077,  1374,
    1365,   997,   655,   909,   910,   911,   331,   907,   910,  1490,
    1490,   918,   656,   657,   941,  1314,    58,    58,   167,    58,
    1459,   531,   565,  1461,  1462,    58,    58,   655,   655,  1025,
    1026,  1027,   656,    15,   140,   375,   382,   382,   410,   625,
     964,   629,   801,   803,  1180,   738,   168,   786,   240,   569,
     299,   661,   822,   157,   139,   737,   740,   812,  1494,   812,
     163,   714,   720,  1079,  1078,  1452,   656,   657,   331,   913,
     914,  1183,   919,  1495,   917,   655,  1473,  1473,    58,  1473,
      58,    58,  1462,  1272,  1274,   604,   144,    92,   599,   965,
     966,   967,   804,   803,   809,   808,    64,   789,  1493,   792,
    1180,   821,   108,   187,   745,   771,  1493,   168,   773,   661,
     479,  1627,   477,  1463,   910,   657,   912,   920,  1174,  1315,
    1316,  1317,  1473,  1473,  1473,   656,   656,  1014,  1014,  1490,
     269,   967,  1180,   168,   569,   657,   738,   168,   738,   223,
     657,   741,    99,   120,   661,  1620,   773,   238,  1457,   914,
     656,  1180,   656,   657,   805,    64,   738,  1493,   793,   459,
     168,   204,  1493,   991,   204,   204,   773,    58,  1460,  1175,
    1317,   569,   164,   165,   794,   631,   742,   140,   772,   748,
     749,  1306,   743,   744,  1473,   241,  1464,   738,   738,   790,
     519,   521,   746,   747,   748,   751,  1186,  1493,  1180,  1157,
     376,   655,  1466,   657,   773,   205,   285,   477,  1465,   656,
     662,  1467,  1468,  1483,   496,  1469,   747,  1495,   656,   657,
    1470,  1471,  1483,  1468,   657,  1359,  1471,  1174,  1365,  1175
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))

/* Error token number */
#define YYTERROR	1
#define YYERRCODE	256


/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */
#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULL;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YYUSE (yytype);
}




/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;


#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
static YYSTYPE yyval_default;
# define YY_INITIAL_VALUE(Value) = Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
/* Line 1787 of yacc.c  */
#line 1937 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:
/* Line 1787 of yacc.c  */
#line 1949 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:
/* Line 1787 of yacc.c  */
#line 1974 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 72:
/* Line 1787 of yacc.c  */
#line 2058 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 75:
/* Line 1787 of yacc.c  */
#line 2073 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 76:
/* Line 1787 of yacc.c  */
#line 2083 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 77:
/* Line 1787 of yacc.c  */
#line 2090 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 78:
/* Line 1787 of yacc.c  */
#line 2100 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 79:
/* Line 1787 of yacc.c  */
#line 2107 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 84:
/* Line 1787 of yacc.c  */
#line 2122 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 85:
/* Line 1787 of yacc.c  */
#line 2134 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 86:
/* Line 1787 of yacc.c  */
#line 2142 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:
/* Line 1787 of yacc.c  */
#line 2153 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
    break;

  case 88:
/* Line 1787 of yacc.c  */
#line 2157 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 91:
/* Line 1787 of yacc.c  */
#line 2167 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 92:
/* Line 1787 of yacc.c  */
#line 2171 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 93:
/* Line 1787 of yacc.c  */
#line 2175 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 94:
/* Line 1787 of yacc.c  */
#line 2180 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 95:
/* Line 1787 of yacc.c  */
#line 2184 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 96:
/* Line 1787 of yacc.c  */
#line 2188 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 97:
/* Line 1787 of yacc.c  */
#line 2193 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 98:
/* Line 1787 of yacc.c  */
#line 2197 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 99:
/* Line 1787 of yacc.c  */
#line 2201 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:
/* Line 1787 of yacc.c  */
#line 2205 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 101:
/* Line 1787 of yacc.c  */
#line 2209 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:
/* Line 1787 of yacc.c  */
#line 2213 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 103:
/* Line 1787 of yacc.c  */
#line 2218 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crl= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 104:
/* Line 1787 of yacc.c  */
#line 2222 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_crlpath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 105:
/* Line 1787 of yacc.c  */
#line 2227 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 106:
/* Line 1787 of yacc.c  */
#line 2258 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 111:
/* Line 1787 of yacc.c  */
#line 2273 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 112:
/* Line 1787 of yacc.c  */
#line 2279 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 113:
/* Line 1787 of yacc.c  */
#line 2283 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 114:
/* Line 1787 of yacc.c  */
#line 2299 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 115:
/* Line 1787 of yacc.c  */
#line 2303 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 116:
/* Line 1787 of yacc.c  */
#line 2309 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
    break;

  case 117:
/* Line 1787 of yacc.c  */
#line 2319 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
    break;

  case 118:
/* Line 1787 of yacc.c  */
#line 2329 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
    break;

  case 119:
/* Line 1787 of yacc.c  */
#line 2341 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
    break;

  case 121:
/* Line 1787 of yacc.c  */
#line 2351 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
           Lex->mi.connection_name= (yyvsp[(1) - (1)].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[(1) - (1)].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
    break;

  case 122:
/* Line 1787 of yacc.c  */
#line 2366 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 123:
/* Line 1787 of yacc.c  */
#line 2391 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 124:
/* Line 1787 of yacc.c  */
#line 2407 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 125:
/* Line 1787 of yacc.c  */
#line 2412 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 126:
/* Line 1787 of yacc.c  */
#line 2416 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 127:
/* Line 1787 of yacc.c  */
#line 2419 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 128:
/* Line 1787 of yacc.c  */
#line 2424 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 129:
/* Line 1787 of yacc.c  */
#line 2428 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 130:
/* Line 1787 of yacc.c  */
#line 2431 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(8) - (8)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 131:
/* Line 1787 of yacc.c  */
#line 2436 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (13)].key_type), (yyvsp[(5) - (13)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 132:
/* Line 1787 of yacc.c  */
#line 2440 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 133:
/* Line 1787 of yacc.c  */
#line 2442 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 134:
/* Line 1787 of yacc.c  */
#line 2447 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 135:
/* Line 1787 of yacc.c  */
#line 2454 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 136:
/* Line 1787 of yacc.c  */
#line 2460 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 137:
/* Line 1787 of yacc.c  */
#line 2462 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 138:
/* Line 1787 of yacc.c  */
#line 2466 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 139:
/* Line 1787 of yacc.c  */
#line 2470 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 140:
/* Line 1787 of yacc.c  */
#line 2474 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 141:
/* Line 1787 of yacc.c  */
#line 2485 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 144:
/* Line 1787 of yacc.c  */
#line 2499 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 145:
/* Line 1787 of yacc.c  */
#line 2503 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 146:
/* Line 1787 of yacc.c  */
#line 2507 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 147:
/* Line 1787 of yacc.c  */
#line 2511 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 148:
/* Line 1787 of yacc.c  */
#line 2515 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 149:
/* Line 1787 of yacc.c  */
#line 2520 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 150:
/* Line 1787 of yacc.c  */
#line 2524 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 151:
/* Line 1787 of yacc.c  */
#line 2531 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 152:
/* Line 1787 of yacc.c  */
#line 2551 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 153:
/* Line 1787 of yacc.c  */
#line 2562 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 155:
/* Line 1787 of yacc.c  */
#line 2569 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 156:
/* Line 1787 of yacc.c  */
#line 2575 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 157:
/* Line 1787 of yacc.c  */
#line 2577 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 158:
/* Line 1787 of yacc.c  */
#line 2583 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
    break;

  case 159:
/* Line 1787 of yacc.c  */
#line 2589 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
    break;

  case 160:
/* Line 1787 of yacc.c  */
#line 2598 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 161:
/* Line 1787 of yacc.c  */
#line 2605 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 163:
/* Line 1787 of yacc.c  */
#line 2613 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 164:
/* Line 1787 of yacc.c  */
#line 2619 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 166:
/* Line 1787 of yacc.c  */
#line 2625 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 167:
/* Line 1787 of yacc.c  */
#line 2631 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 168:
/* Line 1787 of yacc.c  */
#line 2639 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 169:
/* Line 1787 of yacc.c  */
#line 2641 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 170:
/* Line 1787 of yacc.c  */
#line 2648 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 171:
/* Line 1787 of yacc.c  */
#line 2691 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 185:
/* Line 1787 of yacc.c  */
#line 2723 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 186:
/* Line 1787 of yacc.c  */
#line 2738 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 187:
/* Line 1787 of yacc.c  */
#line 2754 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 188:
/* Line 1787 of yacc.c  */
#line 2772 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 189:
/* Line 1787 of yacc.c  */
#line 2773 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 190:
/* Line 1787 of yacc.c  */
#line 2777 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 191:
/* Line 1787 of yacc.c  */
#line 2778 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 192:
/* Line 1787 of yacc.c  */
#line 2784 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 193:
/* Line 1787 of yacc.c  */
#line 2786 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 194:
/* Line 1787 of yacc.c  */
#line 2788 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 195:
/* Line 1787 of yacc.c  */
#line 2790 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 196:
/* Line 1787 of yacc.c  */
#line 2792 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 197:
/* Line 1787 of yacc.c  */
#line 2794 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 198:
/* Line 1787 of yacc.c  */
#line 2796 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 199:
/* Line 1787 of yacc.c  */
#line 2801 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 200:
/* Line 1787 of yacc.c  */
#line 2802 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 201:
/* Line 1787 of yacc.c  */
#line 2803 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 202:
/* Line 1787 of yacc.c  */
#line 2808 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 203:
/* Line 1787 of yacc.c  */
#line 2812 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 204:
/* Line 1787 of yacc.c  */
#line 2819 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 205:
/* Line 1787 of yacc.c  */
#line 2827 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 210:
/* Line 1787 of yacc.c  */
#line 2843 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 211:
/* Line 1787 of yacc.c  */
#line 2847 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 216:
/* Line 1787 of yacc.c  */
#line 2865 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 217:
/* Line 1787 of yacc.c  */
#line 2886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(YYTHD,
                                                  (yyvsp[(1) - (3)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 222:
/* Line 1787 of yacc.c  */
#line 2925 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(YYTHD,
                                                  (yyvsp[(3) - (4)].lex_str),
                                                  (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                  (sp_variable::enum_mode) (yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 223:
/* Line 1787 of yacc.c  */
#line 2951 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 224:
/* Line 1787 of yacc.c  */
#line 2952 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_IN; }
    break;

  case 225:
/* Line 1787 of yacc.c  */
#line 2953 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_OUT; }
    break;

  case 226:
/* Line 1787 of yacc.c  */
#line 2954 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= sp_variable::MODE_INOUT; }
    break;

  case 227:
/* Line 1787 of yacc.c  */
#line 2958 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 229:
/* Line 1787 of yacc.c  */
#line 2963 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 231:
/* Line 1787 of yacc.c  */
#line 2969 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 232:
/* Line 1787 of yacc.c  */
#line 2973 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 233:
/* Line 1787 of yacc.c  */
#line 2999 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 234:
/* Line 1787 of yacc.c  */
#line 3007 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 235:
/* Line 1787 of yacc.c  */
#line 3064 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(YYTHD, (yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 236:
/* Line 1787 of yacc.c  */
#line 3079 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[(2) - (4)].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[(2) - (4)].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, EMPTY_STR, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 237:
/* Line 1787 of yacc.c  */
#line 3106 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
    break;

  case 238:
/* Line 1787 of yacc.c  */
#line 3136 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 239:
/* Line 1787 of yacc.c  */
#line 3161 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 240:
/* Line 1787 of yacc.c  */
#line 3165 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 241:
/* Line 1787 of yacc.c  */
#line 3184 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::EXIT; }
    break;

  case 242:
/* Line 1787 of yacc.c  */
#line 3185 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= sp_handler::CONTINUE; }
    break;

  case 243:
/* Line 1787 of yacc.c  */
#line 3191 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 244:
/* Line 1787 of yacc.c  */
#line 3193 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 245:
/* Line 1787 of yacc.c  */
#line 3198 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[(1) - (1)].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondvalue));
            }
          }
    break;

  case 246:
/* Line 1787 of yacc.c  */
#line 3220 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(1) - (1)].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 248:
/* Line 1787 of yacc.c  */
#line 3235 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[(3) - (3)].lex_str)) || is_sqlstate_completion((yyvsp[(3) - (3)].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value((yyvsp[(3) - (3)].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 249:
/* Line 1787 of yacc.c  */
#line 3256 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 250:
/* Line 1787 of yacc.c  */
#line 3257 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 251:
/* Line 1787 of yacc.c  */
#line 3262 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue);
          }
    break;

  case 252:
/* Line 1787 of yacc.c  */
#line 3266 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 253:
/* Line 1787 of yacc.c  */
#line 3275 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 254:
/* Line 1787 of yacc.c  */
#line 3281 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 255:
/* Line 1787 of yacc.c  */
#line 3287 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.spcondvalue)= (sp_condition_value *)YYTHD->alloc(sizeof(sp_condition_value));
            (yyval.spcondvalue)= new (YYTHD->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 256:
/* Line 1787 of yacc.c  */
#line 3297 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[(2) - (3)].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 257:
/* Line 1787 of yacc.c  */
#line 3312 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[(1) - (1)].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
    break;

  case 258:
/* Line 1787 of yacc.c  */
#line 3335 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 259:
/* Line 1787 of yacc.c  */
#line 3340 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= NULL; }
    break;

  case 260:
/* Line 1787 of yacc.c  */
#line 3342 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.spcondvalue)= (yyvsp[(1) - (1)].spcondvalue); }
    break;

  case 261:
/* Line 1787 of yacc.c  */
#line 3347 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 263:
/* Line 1787 of yacc.c  */
#line 3355 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 264:
/* Line 1787 of yacc.c  */
#line 3364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 265:
/* Line 1787 of yacc.c  */
#line 3383 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 266:
/* Line 1787 of yacc.c  */
#line 3385 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 267:
/* Line 1787 of yacc.c  */
#line 3403 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 268:
/* Line 1787 of yacc.c  */
#line 3409 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 269:
/* Line 1787 of yacc.c  */
#line 3411 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 270:
/* Line 1787 of yacc.c  */
#line 3413 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 271:
/* Line 1787 of yacc.c  */
#line 3415 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 272:
/* Line 1787 of yacc.c  */
#line 3417 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 273:
/* Line 1787 of yacc.c  */
#line 3419 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 274:
/* Line 1787 of yacc.c  */
#line 3421 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 275:
/* Line 1787 of yacc.c  */
#line 3423 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 276:
/* Line 1787 of yacc.c  */
#line 3425 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 277:
/* Line 1787 of yacc.c  */
#line 3427 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 278:
/* Line 1787 of yacc.c  */
#line 3429 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 279:
/* Line 1787 of yacc.c  */
#line 3431 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 280:
/* Line 1787 of yacc.c  */
#line 3436 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[(2) - (3)].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 281:
/* Line 1787 of yacc.c  */
#line 3452 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Diagnostics_information *info= (yyvsp[(4) - (4)].diag_info);

            info->set_which_da((yyvsp[(2) - (4)].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 282:
/* Line 1787 of yacc.c  */
#line 3467 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 283:
/* Line 1787 of yacc.c  */
#line 3469 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
    break;

  case 284:
/* Line 1787 of yacc.c  */
#line 3474 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Statement_information((yyvsp[(1) - (1)].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 285:
/* Line 1787 of yacc.c  */
#line 3480 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.diag_info)= new (YYTHD->mem_root) Condition_information((yyvsp[(2) - (3)].item), (yyvsp[(3) - (3)].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 286:
/* Line 1787 of yacc.c  */
#line 3489 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_list)= new (YYTHD->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[(1) - (1)].stmt_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 287:
/* Line 1787 of yacc.c  */
#line 3495 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].stmt_info_list)->push_back((yyvsp[(3) - (3)].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[(1) - (3)].stmt_info_list);
          }
    break;

  case 288:
/* Line 1787 of yacc.c  */
#line 3504 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.stmt_info_item)= new (YYTHD->mem_root) Statement_information_item((yyvsp[(3) - (3)].stmt_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 289:
/* Line 1787 of yacc.c  */
#line 3512 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip= &YYTHD->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(YYTHD, (yyvsp[(1) - (1)].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 290:
/* Line 1787 of yacc.c  */
#line 3521 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 291:
/* Line 1787 of yacc.c  */
#line 3530 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
    break;

  case 292:
/* Line 1787 of yacc.c  */
#line 3532 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
    break;

  case 293:
/* Line 1787 of yacc.c  */
#line 3541 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 294:
/* Line 1787 of yacc.c  */
#line 3546 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.cond_info_list)= new (YYTHD->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[(1) - (1)].cond_info_item)))
              MYSQL_YYABORT;
          }
    break;

  case 295:
/* Line 1787 of yacc.c  */
#line 3552 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (3)].cond_info_list)->push_back((yyvsp[(3) - (3)].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[(1) - (3)].cond_info_list);
          }
    break;

  case 296:
/* Line 1787 of yacc.c  */
#line 3561 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.cond_info_item)= new (YYTHD->mem_root) Condition_information_item((yyvsp[(3) - (3)].cond_info_item_name), (yyvsp[(1) - (3)].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 297:
/* Line 1787 of yacc.c  */
#line 3569 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
    break;

  case 298:
/* Line 1787 of yacc.c  */
#line 3571 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
    break;

  case 299:
/* Line 1787 of yacc.c  */
#line 3573 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
    break;

  case 300:
/* Line 1787 of yacc.c  */
#line 3575 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
    break;

  case 301:
/* Line 1787 of yacc.c  */
#line 3577 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
    break;

  case 302:
/* Line 1787 of yacc.c  */
#line 3579 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
    break;

  case 303:
/* Line 1787 of yacc.c  */
#line 3581 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
    break;

  case 304:
/* Line 1787 of yacc.c  */
#line 3583 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
    break;

  case 305:
/* Line 1787 of yacc.c  */
#line 3585 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
    break;

  case 306:
/* Line 1787 of yacc.c  */
#line 3587 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
    break;

  case 307:
/* Line 1787 of yacc.c  */
#line 3589 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
    break;

  case 308:
/* Line 1787 of yacc.c  */
#line 3591 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
    break;

  case 309:
/* Line 1787 of yacc.c  */
#line 3593 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
    break;

  case 310:
/* Line 1787 of yacc.c  */
#line 3598 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(YYTHD,
                              (yyvsp[(1) - (1)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
    break;

  case 311:
/* Line 1787 of yacc.c  */
#line 3616 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(YYTHD,
                              (yyvsp[(3) - (3)].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 312:
/* Line 1787 of yacc.c  */
#line 3636 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 313:
/* Line 1787 of yacc.c  */
#line 3637 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 327:
/* Line 1787 of yacc.c  */
#line 3658 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 328:
/* Line 1787 of yacc.c  */
#line 3660 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 329:
/* Line 1787 of yacc.c  */
#line 3664 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 330:
/* Line 1787 of yacc.c  */
#line 3673 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 331:
/* Line 1787 of yacc.c  */
#line 3721 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 332:
/* Line 1787 of yacc.c  */
#line 3723 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 333:
/* Line 1787 of yacc.c  */
#line 3749 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(YYTHD,
                                    EMPTY_STR,
                                    lex->sphead->instructions());
          }
    break;

  case 334:
/* Line 1787 of yacc.c  */
#line 3757 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 335:
/* Line 1787 of yacc.c  */
#line 3766 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 336:
/* Line 1787 of yacc.c  */
#line 3819 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 337:
/* Line 1787 of yacc.c  */
#line 3862 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 338:
/* Line 1787 of yacc.c  */
#line 3882 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[(3) - (4)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 339:
/* Line 1787 of yacc.c  */
#line 3899 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 340:
/* Line 1787 of yacc.c  */
#line 3904 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[(2) - (2)].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 344:
/* Line 1787 of yacc.c  */
#line 3930 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 345:
/* Line 1787 of yacc.c  */
#line 3950 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[(3) - (3)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 346:
/* Line 1787 of yacc.c  */
#line 3972 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 347:
/* Line 1787 of yacc.c  */
#line 3974 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(YYTHD, EMPTY_STR, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 348:
/* Line 1787 of yacc.c  */
#line 3990 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(YYTHD, EMPTY_STR, 0));
          }
    break;

  case 349:
/* Line 1787 of yacc.c  */
#line 4002 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 355:
/* Line 1787 of yacc.c  */
#line 4022 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 356:
/* Line 1787 of yacc.c  */
#line 4028 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 357:
/* Line 1787 of yacc.c  */
#line 4041 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 358:
/* Line 1787 of yacc.c  */
#line 4049 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 359:
/* Line 1787 of yacc.c  */
#line 4057 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 364:
/* Line 1787 of yacc.c  */
#line 4075 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 365:
/* Line 1787 of yacc.c  */
#line 4079 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 366:
/* Line 1787 of yacc.c  */
#line 4091 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 367:
/* Line 1787 of yacc.c  */
#line 4100 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 368:
/* Line 1787 of yacc.c  */
#line 4104 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 369:
/* Line 1787 of yacc.c  */
#line 4114 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 370:
/* Line 1787 of yacc.c  */
#line 4123 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 372:
/* Line 1787 of yacc.c  */
#line 4138 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
    break;

  case 373:
/* Line 1787 of yacc.c  */
#line 4155 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 374:
/* Line 1787 of yacc.c  */
#line 4172 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 375:
/* Line 1787 of yacc.c  */
#line 4173 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 376:
/* Line 1787 of yacc.c  */
#line 4178 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(YYTHD, (yyvsp[(1) - (2)].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
    break;

  case 377:
/* Line 1787 of yacc.c  */
#line 4193 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 378:
/* Line 1787 of yacc.c  */
#line 4209 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(YYTHD, EMPTY_STR, ip);
            lab->type= sp_label::BEGIN;
          }
    break;

  case 379:
/* Line 1787 of yacc.c  */
#line 4216 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 380:
/* Line 1787 of yacc.c  */
#line 4224 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(YYTHD,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
    break;

  case 381:
/* Line 1787 of yacc.c  */
#line 4234 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 382:
/* Line 1787 of yacc.c  */
#line 4262 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 383:
/* Line 1787 of yacc.c  */
#line 4272 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 384:
/* Line 1787 of yacc.c  */
#line 4274 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 385:
/* Line 1787 of yacc.c  */
#line 4290 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 386:
/* Line 1787 of yacc.c  */
#line 4301 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 387:
/* Line 1787 of yacc.c  */
#line 4303 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 388:
/* Line 1787 of yacc.c  */
#line 4322 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 389:
/* Line 1787 of yacc.c  */
#line 4324 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 390:
/* Line 1787 of yacc.c  */
#line 4329 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 391:
/* Line 1787 of yacc.c  */
#line 4331 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 392:
/* Line 1787 of yacc.c  */
#line 4333 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 396:
/* Line 1787 of yacc.c  */
#line 4367 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 397:
/* Line 1787 of yacc.c  */
#line 4369 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 398:
/* Line 1787 of yacc.c  */
#line 4379 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 399:
/* Line 1787 of yacc.c  */
#line 4385 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 404:
/* Line 1787 of yacc.c  */
#line 4408 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 451:
/* Line 1787 of yacc.c  */
#line 4502 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 452:
/* Line 1787 of yacc.c  */
#line 4510 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 453:
/* Line 1787 of yacc.c  */
#line 4518 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 454:
/* Line 1787 of yacc.c  */
#line 4526 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 455:
/* Line 1787 of yacc.c  */
#line 4538 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 456:
/* Line 1787 of yacc.c  */
#line 4550 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 457:
/* Line 1787 of yacc.c  */
#line 4555 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 458:
/* Line 1787 of yacc.c  */
#line 4560 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 459:
/* Line 1787 of yacc.c  */
#line 4568 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 460:
/* Line 1787 of yacc.c  */
#line 4576 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 461:
/* Line 1787 of yacc.c  */
#line 4584 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 462:
/* Line 1787 of yacc.c  */
#line 4592 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 463:
/* Line 1787 of yacc.c  */
#line 4600 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 464:
/* Line 1787 of yacc.c  */
#line 4608 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 465:
/* Line 1787 of yacc.c  */
#line 4616 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 466:
/* Line 1787 of yacc.c  */
#line 4629 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 467:
/* Line 1787 of yacc.c  */
#line 4642 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 470:
/* Line 1787 of yacc.c  */
#line 4661 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 471:
/* Line 1787 of yacc.c  */
#line 4666 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 472:
/* Line 1787 of yacc.c  */
#line 4678 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 473:
/* Line 1787 of yacc.c  */
#line 4680 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 474:
/* Line 1787 of yacc.c  */
#line 4731 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_info.option_list= NULL; }
    break;

  case 475:
/* Line 1787 of yacc.c  */
#line 4732 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 476:
/* Line 1787 of yacc.c  */
#line 4733 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 477:
/* Line 1787 of yacc.c  */
#line 4739 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 478:
/* Line 1787 of yacc.c  */
#line 4739 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 479:
/* Line 1787 of yacc.c  */
#line 4741 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(YYTHD,
                                        (yyvsp[(1) - (1)].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 480:
/* Line 1787 of yacc.c  */
#line 4754 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(2) - (2)].table); }
    break;

  case 481:
/* Line 1787 of yacc.c  */
#line 4755 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.table)= (yyvsp[(3) - (4)].table); }
    break;

  case 482:
/* Line 1787 of yacc.c  */
#line 4759 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 483:
/* Line 1787 of yacc.c  */
#line 4761 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 484:
/* Line 1787 of yacc.c  */
#line 4762 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 485:
/* Line 1787 of yacc.c  */
#line 4764 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 486:
/* Line 1787 of yacc.c  */
#line 4765 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 487:
/* Line 1787 of yacc.c  */
#line 4770 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 488:
/* Line 1787 of yacc.c  */
#line 4806 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 490:
/* Line 1787 of yacc.c  */
#line 4812 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
    break;

  case 492:
/* Line 1787 of yacc.c  */
#line 4830 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 493:
/* Line 1787 of yacc.c  */
#line 4849 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 494:
/* Line 1787 of yacc.c  */
#line 4861 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 496:
/* Line 1787 of yacc.c  */
#line 4870 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 497:
/* Line 1787 of yacc.c  */
#line 4877 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 498:
/* Line 1787 of yacc.c  */
#line 4878 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 499:
/* Line 1787 of yacc.c  */
#line 4880 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 500:
/* Line 1787 of yacc.c  */
#line 4882 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 501:
/* Line 1787 of yacc.c  */
#line 4884 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 502:
/* Line 1787 of yacc.c  */
#line 4886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 503:
/* Line 1787 of yacc.c  */
#line 4890 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 504:
/* Line 1787 of yacc.c  */
#line 4892 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 505:
/* Line 1787 of yacc.c  */
#line 4896 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 506:
/* Line 1787 of yacc.c  */
#line 4897 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 507:
/* Line 1787 of yacc.c  */
#line 4901 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 508:
/* Line 1787 of yacc.c  */
#line 4902 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 509:
/* Line 1787 of yacc.c  */
#line 4907 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 510:
/* Line 1787 of yacc.c  */
#line 4926 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 511:
/* Line 1787 of yacc.c  */
#line 4936 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 512:
/* Line 1787 of yacc.c  */
#line 4947 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 513:
/* Line 1787 of yacc.c  */
#line 4955 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 514:
/* Line 1787 of yacc.c  */
#line 4957 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 515:
/* Line 1787 of yacc.c  */
#line 4972 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 516:
/* Line 1787 of yacc.c  */
#line 4974 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 517:
/* Line 1787 of yacc.c  */
#line 4975 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 518:
/* Line 1787 of yacc.c  */
#line 4978 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 519:
/* Line 1787 of yacc.c  */
#line 4983 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 520:
/* Line 1787 of yacc.c  */
#line 4987 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 521:
/* Line 1787 of yacc.c  */
#line 4988 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 522:
/* Line 1787 of yacc.c  */
#line 4993 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 523:
/* Line 1787 of yacc.c  */
#line 5011 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 524:
/* Line 1787 of yacc.c  */
#line 5026 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 525:
/* Line 1787 of yacc.c  */
#line 5028 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 526:
/* Line 1787 of yacc.c  */
#line 5043 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 527:
/* Line 1787 of yacc.c  */
#line 5059 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 528:
/* Line 1787 of yacc.c  */
#line 5080 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 529:
/* Line 1787 of yacc.c  */
#line 5081 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 530:
/* Line 1787 of yacc.c  */
#line 5086 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 531:
/* Line 1787 of yacc.c  */
#line 5105 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 532:
/* Line 1787 of yacc.c  */
#line 5110 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 533:
/* Line 1787 of yacc.c  */
#line 5119 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 534:
/* Line 1787 of yacc.c  */
#line 5141 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 535:
/* Line 1787 of yacc.c  */
#line 5156 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 536:
/* Line 1787 of yacc.c  */
#line 5158 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 537:
/* Line 1787 of yacc.c  */
#line 5173 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 538:
/* Line 1787 of yacc.c  */
#line 5178 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 539:
/* Line 1787 of yacc.c  */
#line 5199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 540:
/* Line 1787 of yacc.c  */
#line 5204 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 541:
/* Line 1787 of yacc.c  */
#line 5233 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 542:
/* Line 1787 of yacc.c  */
#line 5244 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 543:
/* Line 1787 of yacc.c  */
#line 5245 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 544:
/* Line 1787 of yacc.c  */
#line 5250 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 545:
/* Line 1787 of yacc.c  */
#line 5261 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 546:
/* Line 1787 of yacc.c  */
#line 5263 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 547:
/* Line 1787 of yacc.c  */
#line 5286 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 548:
/* Line 1787 of yacc.c  */
#line 5287 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 549:
/* Line 1787 of yacc.c  */
#line 5292 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 550:
/* Line 1787 of yacc.c  */
#line 5305 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 551:
/* Line 1787 of yacc.c  */
#line 5325 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 552:
/* Line 1787 of yacc.c  */
#line 5339 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 553:
/* Line 1787 of yacc.c  */
#line 5364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 554:
/* Line 1787 of yacc.c  */
#line 5365 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 555:
/* Line 1787 of yacc.c  */
#line 5370 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 556:
/* Line 1787 of yacc.c  */
#line 5402 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 557:
/* Line 1787 of yacc.c  */
#line 5407 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 558:
/* Line 1787 of yacc.c  */
#line 5411 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 559:
/* Line 1787 of yacc.c  */
#line 5412 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 560:
/* Line 1787 of yacc.c  */
#line 5416 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 561:
/* Line 1787 of yacc.c  */
#line 5417 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 562:
/* Line 1787 of yacc.c  */
#line 5422 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 563:
/* Line 1787 of yacc.c  */
#line 5424 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 564:
/* Line 1787 of yacc.c  */
#line 5430 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
          }
    break;

  case 565:
/* Line 1787 of yacc.c  */
#line 5436 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 566:
/* Line 1787 of yacc.c  */
#line 5438 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 567:
/* Line 1787 of yacc.c  */
#line 5440 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 568:
/* Line 1787 of yacc.c  */
#line 5442 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 569:
/* Line 1787 of yacc.c  */
#line 5444 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 570:
/* Line 1787 of yacc.c  */
#line 5446 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 571:
/* Line 1787 of yacc.c  */
#line 5455 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 572:
/* Line 1787 of yacc.c  */
#line 5470 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 573:
/* Line 1787 of yacc.c  */
#line 5474 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 574:
/* Line 1787 of yacc.c  */
#line 5484 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 575:
/* Line 1787 of yacc.c  */
#line 5485 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 576:
/* Line 1787 of yacc.c  */
#line 5489 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 577:
/* Line 1787 of yacc.c  */
#line 5490 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 578:
/* Line 1787 of yacc.c  */
#line 5494 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 579:
/* Line 1787 of yacc.c  */
#line 5495 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 580:
/* Line 1787 of yacc.c  */
#line 5499 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 581:
/* Line 1787 of yacc.c  */
#line 5500 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 582:
/* Line 1787 of yacc.c  */
#line 5504 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 583:
/* Line 1787 of yacc.c  */
#line 5505 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 584:
/* Line 1787 of yacc.c  */
#line 5509 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 585:
/* Line 1787 of yacc.c  */
#line 5510 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 586:
/* Line 1787 of yacc.c  */
#line 5514 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 587:
/* Line 1787 of yacc.c  */
#line 5519 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
    break;

  case 588:
/* Line 1787 of yacc.c  */
#line 5524 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
    break;

  case 596:
/* Line 1787 of yacc.c  */
#line 5548 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 597:
/* Line 1787 of yacc.c  */
#line 5553 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 598:
/* Line 1787 of yacc.c  */
#line 5558 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 599:
/* Line 1787 of yacc.c  */
#line 5563 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 600:
/* Line 1787 of yacc.c  */
#line 5568 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 601:
/* Line 1787 of yacc.c  */
#line 5573 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 602:
/* Line 1787 of yacc.c  */
#line 5578 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 603:
/* Line 1787 of yacc.c  */
#line 5583 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 604:
/* Line 1787 of yacc.c  */
#line 5598 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 605:
/* Line 1787 of yacc.c  */
#line 5604 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 606:
/* Line 1787 of yacc.c  */
#line 5619 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
    break;

  case 607:
/* Line 1787 of yacc.c  */
#line 5624 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 608:
/* Line 1787 of yacc.c  */
#line 5639 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
    break;

  case 609:
/* Line 1787 of yacc.c  */
#line 5645 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[(3) - (3)].ulong_num) == 0 || (yyvsp[(3) - (3)].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 610:
/* Line 1787 of yacc.c  */
#line 5663 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
    break;

  case 611:
/* Line 1787 of yacc.c  */
#line 5668 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 612:
/* Line 1787 of yacc.c  */
#line 5673 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 613:
/* Line 1787 of yacc.c  */
#line 5678 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 614:
/* Line 1787 of yacc.c  */
#line 5683 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 615:
/* Line 1787 of yacc.c  */
#line 5688 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 616:
/* Line 1787 of yacc.c  */
#line 5693 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 617:
/* Line 1787 of yacc.c  */
#line 5697 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 620:
/* Line 1787 of yacc.c  */
#line 5721 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 621:
/* Line 1787 of yacc.c  */
#line 5726 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 622:
/* Line 1787 of yacc.c  */
#line 5731 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 623:
/* Line 1787 of yacc.c  */
#line 5736 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 624:
/* Line 1787 of yacc.c  */
#line 5738 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 625:
/* Line 1787 of yacc.c  */
#line 5740 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 626:
/* Line 1787 of yacc.c  */
#line 5742 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 627:
/* Line 1787 of yacc.c  */
#line 5748 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 628:
/* Line 1787 of yacc.c  */
#line 5753 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[(3) - (3)].choice);
          }
    break;

  case 629:
/* Line 1787 of yacc.c  */
#line 5758 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 630:
/* Line 1787 of yacc.c  */
#line 5764 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 631:
/* Line 1787 of yacc.c  */
#line 5770 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 632:
/* Line 1787 of yacc.c  */
#line 5776 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 633:
/* Line 1787 of yacc.c  */
#line 5785 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 634:
/* Line 1787 of yacc.c  */
#line 5803 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 635:
/* Line 1787 of yacc.c  */
#line 5820 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 636:
/* Line 1787 of yacc.c  */
#line 5843 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 637:
/* Line 1787 of yacc.c  */
#line 5856 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 638:
/* Line 1787 of yacc.c  */
#line 5857 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 639:
/* Line 1787 of yacc.c  */
#line 5858 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 640:
/* Line 1787 of yacc.c  */
#line 5859 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 641:
/* Line 1787 of yacc.c  */
#line 5860 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 642:
/* Line 1787 of yacc.c  */
#line 5861 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 643:
/* Line 1787 of yacc.c  */
#line 5862 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_PAGE; }
    break;

  case 644:
/* Line 1787 of yacc.c  */
#line 5866 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 645:
/* Line 1787 of yacc.c  */
#line 5867 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 646:
/* Line 1787 of yacc.c  */
#line 5868 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 647:
/* Line 1787 of yacc.c  */
#line 5872 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 649:
/* Line 1787 of yacc.c  */
#line 5877 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 650:
/* Line 1787 of yacc.c  */
#line 5878 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 651:
/* Line 1787 of yacc.c  */
#line 5879 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 652:
/* Line 1787 of yacc.c  */
#line 5880 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 653:
/* Line 1787 of yacc.c  */
#line 5886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 659:
/* Line 1787 of yacc.c  */
#line 5904 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 660:
/* Line 1787 of yacc.c  */
#line 5911 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 661:
/* Line 1787 of yacc.c  */
#line 5913 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(2) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 662:
/* Line 1787 of yacc.c  */
#line 5919 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 663:
/* Line 1787 of yacc.c  */
#line 5921 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 664:
/* Line 1787 of yacc.c  */
#line 5927 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 665:
/* Line 1787 of yacc.c  */
#line 5929 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (9)].key_type), (yyvsp[(3) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 666:
/* Line 1787 of yacc.c  */
#line 5935 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->option_list= NULL; }
    break;

  case 667:
/* Line 1787 of yacc.c  */
#line 5937 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (9)].key_type), (yyvsp[(3) - (9)].lex_str).str ? (yyvsp[(3) - (9)].lex_str) : (yyvsp[(1) - (9)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 668:
/* Line 1787 of yacc.c  */
#line 5942 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table)->db,
                                      (yyvsp[(8) - (8)].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
    break;

  case 669:
/* Line 1787 of yacc.c  */
#line 5963 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 673:
/* Line 1787 of yacc.c  */
#line 5978 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 674:
/* Line 1787 of yacc.c  */
#line 5979 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 675:
/* Line 1787 of yacc.c  */
#line 5983 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 676:
/* Line 1787 of yacc.c  */
#line 5988 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 677:
/* Line 1787 of yacc.c  */
#line 5999 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (3)].lex_str), (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 678:
/* Line 1787 of yacc.c  */
#line 6013 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 679:
/* Line 1787 of yacc.c  */
#line 6017 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
            Lex->vcol_info->set_field_type((enum enum_field_types) (yyvsp[(1) - (8)].num));
          }
    break;

  case 681:
/* Line 1787 of yacc.c  */
#line 6025 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 682:
/* Line 1787 of yacc.c  */
#line 6030 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 683:
/* Line 1787 of yacc.c  */
#line 6034 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
    break;

  case 684:
/* Line 1787 of yacc.c  */
#line 6038 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
    break;

  case 685:
/* Line 1787 of yacc.c  */
#line 6044 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 686:
/* Line 1787 of yacc.c  */
#line 6045 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 687:
/* Line 1787 of yacc.c  */
#line 6049 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 689:
/* Line 1787 of yacc.c  */
#line 6055 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 690:
/* Line 1787 of yacc.c  */
#line 6061 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 691:
/* Line 1787 of yacc.c  */
#line 6066 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 692:
/* Line 1787 of yacc.c  */
#line 6071 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 693:
/* Line 1787 of yacc.c  */
#line 6087 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[(1) - (3)].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[(2) - (3)].item);
          }
    break;

  case 694:
/* Line 1787 of yacc.c  */
#line 6102 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 695:
/* Line 1787 of yacc.c  */
#line 6103 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 696:
/* Line 1787 of yacc.c  */
#line 6104 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 697:
/* Line 1787 of yacc.c  */
#line 6106 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 698:
/* Line 1787 of yacc.c  */
#line 6111 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 699:
/* Line 1787 of yacc.c  */
#line 6115 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 700:
/* Line 1787 of yacc.c  */
#line 6120 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 701:
/* Line 1787 of yacc.c  */
#line 6125 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 702:
/* Line 1787 of yacc.c  */
#line 6129 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 703:
/* Line 1787 of yacc.c  */
#line 6134 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 704:
/* Line 1787 of yacc.c  */
#line 6139 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 705:
/* Line 1787 of yacc.c  */
#line 6145 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 706:
/* Line 1787 of yacc.c  */
#line 6150 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 707:
/* Line 1787 of yacc.c  */
#line 6156 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 708:
/* Line 1787 of yacc.c  */
#line 6160 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 709:
/* Line 1787 of yacc.c  */
#line 6165 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 710:
/* Line 1787 of yacc.c  */
#line 6170 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
    break;

  case 711:
/* Line 1787 of yacc.c  */
#line 6188 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 712:
/* Line 1787 of yacc.c  */
#line 6190 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 713:
/* Line 1787 of yacc.c  */
#line 6192 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 714:
/* Line 1787 of yacc.c  */
#line 6205 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 715:
/* Line 1787 of yacc.c  */
#line 6207 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 716:
/* Line 1787 of yacc.c  */
#line 6212 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 717:
/* Line 1787 of yacc.c  */
#line 6217 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 718:
/* Line 1787 of yacc.c  */
#line 6229 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 719:
/* Line 1787 of yacc.c  */
#line 6234 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 720:
/* Line 1787 of yacc.c  */
#line 6239 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 721:
/* Line 1787 of yacc.c  */
#line 6244 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 722:
/* Line 1787 of yacc.c  */
#line 6246 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 723:
/* Line 1787 of yacc.c  */
#line 6248 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 724:
/* Line 1787 of yacc.c  */
#line 6250 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 725:
/* Line 1787 of yacc.c  */
#line 6252 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 726:
/* Line 1787 of yacc.c  */
#line 6254 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 727:
/* Line 1787 of yacc.c  */
#line 6256 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 728:
/* Line 1787 of yacc.c  */
#line 6258 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 729:
/* Line 1787 of yacc.c  */
#line 6260 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 730:
/* Line 1787 of yacc.c  */
#line 6262 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 731:
/* Line 1787 of yacc.c  */
#line 6264 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 732:
/* Line 1787 of yacc.c  */
#line 6266 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 733:
/* Line 1787 of yacc.c  */
#line 6268 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 734:
/* Line 1787 of yacc.c  */
#line 6270 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 735:
/* Line 1787 of yacc.c  */
#line 6278 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 736:
/* Line 1787 of yacc.c  */
#line 6279 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 737:
/* Line 1787 of yacc.c  */
#line 6281 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 738:
/* Line 1787 of yacc.c  */
#line 6285 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 739:
/* Line 1787 of yacc.c  */
#line 6286 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 740:
/* Line 1787 of yacc.c  */
#line 6287 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 741:
/* Line 1787 of yacc.c  */
#line 6288 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 742:
/* Line 1787 of yacc.c  */
#line 6289 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 743:
/* Line 1787 of yacc.c  */
#line 6293 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 744:
/* Line 1787 of yacc.c  */
#line 6297 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 745:
/* Line 1787 of yacc.c  */
#line 6298 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 746:
/* Line 1787 of yacc.c  */
#line 6302 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 747:
/* Line 1787 of yacc.c  */
#line 6303 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 748:
/* Line 1787 of yacc.c  */
#line 6307 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 749:
/* Line 1787 of yacc.c  */
#line 6308 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 750:
/* Line 1787 of yacc.c  */
#line 6309 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 751:
/* Line 1787 of yacc.c  */
#line 6310 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 752:
/* Line 1787 of yacc.c  */
#line 6311 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 753:
/* Line 1787 of yacc.c  */
#line 6315 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 754:
/* Line 1787 of yacc.c  */
#line 6316 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 755:
/* Line 1787 of yacc.c  */
#line 6317 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 756:
/* Line 1787 of yacc.c  */
#line 6318 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 757:
/* Line 1787 of yacc.c  */
#line 6319 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 758:
/* Line 1787 of yacc.c  */
#line 6324 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 759:
/* Line 1787 of yacc.c  */
#line 6329 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 760:
/* Line 1787 of yacc.c  */
#line 6331 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 761:
/* Line 1787 of yacc.c  */
#line 6336 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 762:
/* Line 1787 of yacc.c  */
#line 6338 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 763:
/* Line 1787 of yacc.c  */
#line 6340 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 764:
/* Line 1787 of yacc.c  */
#line 6345 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 765:
/* Line 1787 of yacc.c  */
#line 6353 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 766:
/* Line 1787 of yacc.c  */
#line 6354 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 767:
/* Line 1787 of yacc.c  */
#line 6358 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 768:
/* Line 1787 of yacc.c  */
#line 6359 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 769:
/* Line 1787 of yacc.c  */
#line 6363 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 770:
/* Line 1787 of yacc.c  */
#line 6364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 771:
/* Line 1787 of yacc.c  */
#line 6365 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 772:
/* Line 1787 of yacc.c  */
#line 6369 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 773:
/* Line 1787 of yacc.c  */
#line 6370 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 774:
/* Line 1787 of yacc.c  */
#line 6371 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 775:
/* Line 1787 of yacc.c  */
#line 6372 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 776:
/* Line 1787 of yacc.c  */
#line 6375 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 777:
/* Line 1787 of yacc.c  */
#line 6376 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 778:
/* Line 1787 of yacc.c  */
#line 6380 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 779:
/* Line 1787 of yacc.c  */
#line 6381 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 780:
/* Line 1787 of yacc.c  */
#line 6385 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 781:
/* Line 1787 of yacc.c  */
#line 6386 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 782:
/* Line 1787 of yacc.c  */
#line 6390 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 784:
/* Line 1787 of yacc.c  */
#line 6395 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 785:
/* Line 1787 of yacc.c  */
#line 6396 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 786:
/* Line 1787 of yacc.c  */
#line 6397 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 787:
/* Line 1787 of yacc.c  */
#line 6399 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(4) - (4)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 788:
/* Line 1787 of yacc.c  */
#line 6405 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 789:
/* Line 1787 of yacc.c  */
#line 6407 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 790:
/* Line 1787 of yacc.c  */
#line 6413 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 791:
/* Line 1787 of yacc.c  */
#line 6419 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 792:
/* Line 1787 of yacc.c  */
#line 6425 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
    break;

  case 793:
/* Line 1787 of yacc.c  */
#line 6430 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 794:
/* Line 1787 of yacc.c  */
#line 6432 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 795:
/* Line 1787 of yacc.c  */
#line 6445 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 796:
/* Line 1787 of yacc.c  */
#line 6451 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 797:
/* Line 1787 of yacc.c  */
#line 6457 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 798:
/* Line 1787 of yacc.c  */
#line 6463 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 799:
/* Line 1787 of yacc.c  */
#line 6472 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 800:
/* Line 1787 of yacc.c  */
#line 6493 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 801:
/* Line 1787 of yacc.c  */
#line 6499 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 802:
/* Line 1787 of yacc.c  */
#line 6503 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 803:
/* Line 1787 of yacc.c  */
#line 6504 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 804:
/* Line 1787 of yacc.c  */
#line 6508 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 805:
/* Line 1787 of yacc.c  */
#line 6509 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 806:
/* Line 1787 of yacc.c  */
#line 6514 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 807:
/* Line 1787 of yacc.c  */
#line 6521 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 808:
/* Line 1787 of yacc.c  */
#line 6525 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 809:
/* Line 1787 of yacc.c  */
#line 6526 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 810:
/* Line 1787 of yacc.c  */
#line 6530 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 811:
/* Line 1787 of yacc.c  */
#line 6531 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 812:
/* Line 1787 of yacc.c  */
#line 6536 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 813:
/* Line 1787 of yacc.c  */
#line 6544 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 814:
/* Line 1787 of yacc.c  */
#line 6548 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 815:
/* Line 1787 of yacc.c  */
#line 6549 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 816:
/* Line 1787 of yacc.c  */
#line 6554 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 817:
/* Line 1787 of yacc.c  */
#line 6564 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 818:
/* Line 1787 of yacc.c  */
#line 6565 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 819:
/* Line 1787 of yacc.c  */
#line 6569 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 820:
/* Line 1787 of yacc.c  */
#line 6570 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 821:
/* Line 1787 of yacc.c  */
#line 6574 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 822:
/* Line 1787 of yacc.c  */
#line 6575 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 823:
/* Line 1787 of yacc.c  */
#line 6580 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 824:
/* Line 1787 of yacc.c  */
#line 6582 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 825:
/* Line 1787 of yacc.c  */
#line 6586 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 826:
/* Line 1787 of yacc.c  */
#line 6593 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 827:
/* Line 1787 of yacc.c  */
#line 6602 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 828:
/* Line 1787 of yacc.c  */
#line 6610 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 829:
/* Line 1787 of yacc.c  */
#line 6620 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 832:
/* Line 1787 of yacc.c  */
#line 6623 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 833:
/* Line 1787 of yacc.c  */
#line 6624 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 834:
/* Line 1787 of yacc.c  */
#line 6626 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 835:
/* Line 1787 of yacc.c  */
#line 6631 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 836:
/* Line 1787 of yacc.c  */
#line 6638 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 837:
/* Line 1787 of yacc.c  */
#line 6639 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 840:
/* Line 1787 of yacc.c  */
#line 6653 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 841:
/* Line 1787 of yacc.c  */
#line 6660 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 843:
/* Line 1787 of yacc.c  */
#line 6666 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 844:
/* Line 1787 of yacc.c  */
#line 6673 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 845:
/* Line 1787 of yacc.c  */
#line 6685 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 846:
/* Line 1787 of yacc.c  */
#line 6687 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 847:
/* Line 1787 of yacc.c  */
#line 6689 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 848:
/* Line 1787 of yacc.c  */
#line 6691 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 849:
/* Line 1787 of yacc.c  */
#line 6696 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 850:
/* Line 1787 of yacc.c  */
#line 6702 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 851:
/* Line 1787 of yacc.c  */
#line 6708 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 852:
/* Line 1787 of yacc.c  */
#line 6715 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 853:
/* Line 1787 of yacc.c  */
#line 6722 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 854:
/* Line 1787 of yacc.c  */
#line 6730 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 855:
/* Line 1787 of yacc.c  */
#line 6731 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 856:
/* Line 1787 of yacc.c  */
#line 6732 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 857:
/* Line 1787 of yacc.c  */
#line 6733 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 858:
/* Line 1787 of yacc.c  */
#line 6734 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 859:
/* Line 1787 of yacc.c  */
#line 6738 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 860:
/* Line 1787 of yacc.c  */
#line 6742 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 861:
/* Line 1787 of yacc.c  */
#line 6743 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 862:
/* Line 1787 of yacc.c  */
#line 6747 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 863:
/* Line 1787 of yacc.c  */
#line 6748 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 864:
/* Line 1787 of yacc.c  */
#line 6752 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 866:
/* Line 1787 of yacc.c  */
#line 6757 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 867:
/* Line 1787 of yacc.c  */
#line 6758 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 868:
/* Line 1787 of yacc.c  */
#line 6759 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 869:
/* Line 1787 of yacc.c  */
#line 6763 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 870:
/* Line 1787 of yacc.c  */
#line 6764 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 871:
/* Line 1787 of yacc.c  */
#line 6768 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 872:
/* Line 1787 of yacc.c  */
#line 6773 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 873:
/* Line 1787 of yacc.c  */
#line 6785 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 876:
/* Line 1787 of yacc.c  */
#line 6802 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 878:
/* Line 1787 of yacc.c  */
#line 6807 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 880:
/* Line 1787 of yacc.c  */
#line 6812 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 888:
/* Line 1787 of yacc.c  */
#line 6832 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 889:
/* Line 1787 of yacc.c  */
#line 6833 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 890:
/* Line 1787 of yacc.c  */
#line 6838 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 891:
/* Line 1787 of yacc.c  */
#line 6839 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 892:
/* Line 1787 of yacc.c  */
#line 6841 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 893:
/* Line 1787 of yacc.c  */
#line 6847 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
    break;

  case 894:
/* Line 1787 of yacc.c  */
#line 6853 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, YYTHD->mem_root);
          }
    break;

  case 895:
/* Line 1787 of yacc.c  */
#line 6859 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            new (YYTHD->mem_root)
              engine_option_value((yyvsp[(1) - (3)].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
    break;

  case 900:
/* Line 1787 of yacc.c  */
#line 6877 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 901:
/* Line 1787 of yacc.c  */
#line 6889 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 902:
/* Line 1787 of yacc.c  */
#line 6890 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 903:
/* Line 1787 of yacc.c  */
#line 6891 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 904:
/* Line 1787 of yacc.c  */
#line 6895 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 905:
/* Line 1787 of yacc.c  */
#line 6896 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 906:
/* Line 1787 of yacc.c  */
#line 6901 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 907:
/* Line 1787 of yacc.c  */
#line 6907 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 908:
/* Line 1787 of yacc.c  */
#line 6920 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 909:
/* Line 1787 of yacc.c  */
#line 6921 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 910:
/* Line 1787 of yacc.c  */
#line 6926 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str);
        }
    break;

  case 911:
/* Line 1787 of yacc.c  */
#line 6937 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 912:
/* Line 1787 of yacc.c  */
#line 6938 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 913:
/* Line 1787 of yacc.c  */
#line 6942 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 914:
/* Line 1787 of yacc.c  */
#line 6943 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 915:
/* Line 1787 of yacc.c  */
#line 6951 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
    break;

  case 916:
/* Line 1787 of yacc.c  */
#line 6968 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 917:
/* Line 1787 of yacc.c  */
#line 6978 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (YYTHD->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 918:
/* Line 1787 of yacc.c  */
#line 6988 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 919:
/* Line 1787 of yacc.c  */
#line 6993 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 920:
/* Line 1787 of yacc.c  */
#line 7002 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 921:
/* Line 1787 of yacc.c  */
#line 7013 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 922:
/* Line 1787 of yacc.c  */
#line 7024 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 923:
/* Line 1787 of yacc.c  */
#line 7031 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 924:
/* Line 1787 of yacc.c  */
#line 7042 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 925:
/* Line 1787 of yacc.c  */
#line 7049 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 926:
/* Line 1787 of yacc.c  */
#line 7060 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 927:
/* Line 1787 of yacc.c  */
#line 7067 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 928:
/* Line 1787 of yacc.c  */
#line 7079 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 929:
/* Line 1787 of yacc.c  */
#line 7081 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 930:
/* Line 1787 of yacc.c  */
#line 7101 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 931:
/* Line 1787 of yacc.c  */
#line 7114 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 932:
/* Line 1787 of yacc.c  */
#line 7119 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 933:
/* Line 1787 of yacc.c  */
#line 7124 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 934:
/* Line 1787 of yacc.c  */
#line 7129 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 935:
/* Line 1787 of yacc.c  */
#line 7134 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 936:
/* Line 1787 of yacc.c  */
#line 7143 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 937:
/* Line 1787 of yacc.c  */
#line 7144 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 938:
/* Line 1787 of yacc.c  */
#line 7145 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 939:
/* Line 1787 of yacc.c  */
#line 7146 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 940:
/* Line 1787 of yacc.c  */
#line 7150 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 941:
/* Line 1787 of yacc.c  */
#line 7152 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 942:
/* Line 1787 of yacc.c  */
#line 7163 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 943:
/* Line 1787 of yacc.c  */
#line 7164 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 944:
/* Line 1787 of yacc.c  */
#line 7168 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 945:
/* Line 1787 of yacc.c  */
#line 7169 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 947:
/* Line 1787 of yacc.c  */
#line 7175 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 948:
/* Line 1787 of yacc.c  */
#line 7183 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->m_sql_cmd= new (YYTHD->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 954:
/* Line 1787 of yacc.c  */
#line 7205 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
    break;

  case 955:
/* Line 1787 of yacc.c  */
#line 7210 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 956:
/* Line 1787 of yacc.c  */
#line 7217 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 958:
/* Line 1787 of yacc.c  */
#line 7231 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
    break;

  case 959:
/* Line 1787 of yacc.c  */
#line 7243 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 961:
/* Line 1787 of yacc.c  */
#line 7256 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 963:
/* Line 1787 of yacc.c  */
#line 7269 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 964:
/* Line 1787 of yacc.c  */
#line 7276 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 966:
/* Line 1787 of yacc.c  */
#line 7289 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(6) - (7)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(6) - (7)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(6) - (7)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 967:
/* Line 1787 of yacc.c  */
#line 7316 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 968:
/* Line 1787 of yacc.c  */
#line 7323 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
    break;

  case 970:
/* Line 1787 of yacc.c  */
#line 7331 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(4) - (4)].num);
          }
    break;

  case 971:
/* Line 1787 of yacc.c  */
#line 7343 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 973:
/* Line 1787 of yacc.c  */
#line 7349 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 974:
/* Line 1787 of yacc.c  */
#line 7354 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 975:
/* Line 1787 of yacc.c  */
#line 7361 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 977:
/* Line 1787 of yacc.c  */
#line 7376 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
    break;

  case 978:
/* Line 1787 of yacc.c  */
#line 7380 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 979:
/* Line 1787 of yacc.c  */
#line 7384 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 980:
/* Line 1787 of yacc.c  */
#line 7391 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 981:
/* Line 1787 of yacc.c  */
#line 7392 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 982:
/* Line 1787 of yacc.c  */
#line 7397 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 985:
/* Line 1787 of yacc.c  */
#line 7417 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
    break;

  case 986:
/* Line 1787 of yacc.c  */
#line 7426 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 987:
/* Line 1787 of yacc.c  */
#line 7430 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 988:
/* Line 1787 of yacc.c  */
#line 7435 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
    break;

  case 989:
/* Line 1787 of yacc.c  */
#line 7440 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(4) - (4)].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
    break;

  case 990:
/* Line 1787 of yacc.c  */
#line 7447 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 991:
/* Line 1787 of yacc.c  */
#line 7451 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
    break;

  case 992:
/* Line 1787 of yacc.c  */
#line 7462 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(4) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(6) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(4) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
    break;

  case 993:
/* Line 1787 of yacc.c  */
#line 7475 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 994:
/* Line 1787 of yacc.c  */
#line 7479 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(4) - (5)].lex_str).str, (yyvsp[(3) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
    break;

  case 995:
/* Line 1787 of yacc.c  */
#line 7488 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[(5) - (5)].lex_str).str, (yyvsp[(4) - (5)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
    break;

  case 996:
/* Line 1787 of yacc.c  */
#line 7497 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 997:
/* Line 1787 of yacc.c  */
#line 7507 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(3) - (4)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
    break;

  case 998:
/* Line 1787 of yacc.c  */
#line 7516 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 999:
/* Line 1787 of yacc.c  */
#line 7522 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
    break;

  case 1000:
/* Line 1787 of yacc.c  */
#line 7528 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1001:
/* Line 1787 of yacc.c  */
#line 7537 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 1002:
/* Line 1787 of yacc.c  */
#line 7546 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
    break;

  case 1003:
/* Line 1787 of yacc.c  */
#line 7565 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= Alter_info::ALTER_CONVERT;
          }
    break;

  case 1004:
/* Line 1787 of yacc.c  */
#line 7586 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
    break;

  case 1005:
/* Line 1787 of yacc.c  */
#line 7596 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
    break;

  case 1006:
/* Line 1787 of yacc.c  */
#line 7600 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
    break;

  case 1014:
/* Line 1787 of yacc.c  */
#line 7617 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
    break;

  case 1015:
/* Line 1787 of yacc.c  */
#line 7622 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1016:
/* Line 1787 of yacc.c  */
#line 7633 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
    break;

  case 1017:
/* Line 1787 of yacc.c  */
#line 7638 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 1018:
/* Line 1787 of yacc.c  */
#line 7648 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1019:
/* Line 1787 of yacc.c  */
#line 7649 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1020:
/* Line 1787 of yacc.c  */
#line 7653 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1021:
/* Line 1787 of yacc.c  */
#line 7654 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1022:
/* Line 1787 of yacc.c  */
#line 7658 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 1028:
/* Line 1787 of yacc.c  */
#line 7672 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 1029:
/* Line 1787 of yacc.c  */
#line 7674 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_INPLACE;
          }
    break;

  case 1030:
/* Line 1787 of yacc.c  */
#line 7681 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 1031:
/* Line 1787 of yacc.c  */
#line 7682 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 1032:
/* Line 1787 of yacc.c  */
#line 7683 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 1033:
/* Line 1787 of yacc.c  */
#line 7687 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1034:
/* Line 1787 of yacc.c  */
#line 7689 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            store_position_for_column((yyvsp[(2) - (2)].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1035:
/* Line 1787 of yacc.c  */
#line 7694 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
    break;

  case 1036:
/* Line 1787 of yacc.c  */
#line 7701 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1037:
/* Line 1787 of yacc.c  */
#line 7702 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1038:
/* Line 1787 of yacc.c  */
#line 7703 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1039:
/* Line 1787 of yacc.c  */
#line 7704 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1040:
/* Line 1787 of yacc.c  */
#line 7709 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 1041:
/* Line 1787 of yacc.c  */
#line 7716 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1042:
/* Line 1787 of yacc.c  */
#line 7718 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
    break;

  case 1043:
/* Line 1787 of yacc.c  */
#line 7723 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1044:
/* Line 1787 of yacc.c  */
#line 7725 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1045:
/* Line 1787 of yacc.c  */
#line 7732 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 1046:
/* Line 1787 of yacc.c  */
#line 7742 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[(3) - (3)].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 1047:
/* Line 1787 of yacc.c  */
#line 7758 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= 0;
          }
    break;

  case 1048:
/* Line 1787 of yacc.c  */
#line 7762 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1049:
/* Line 1787 of yacc.c  */
#line 7769 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (1)].num);
          }
    break;

  case 1050:
/* Line 1787 of yacc.c  */
#line 7773 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= (yyvsp[(1) - (3)].num) | (yyvsp[(3) - (3)].num);
          }
    break;

  case 1051:
/* Line 1787 of yacc.c  */
#line 7780 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 1052:
/* Line 1787 of yacc.c  */
#line 7784 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
    break;

  case 1053:
/* Line 1787 of yacc.c  */
#line 7788 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
    break;

  case 1054:
/* Line 1787 of yacc.c  */
#line 7794 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 1055:
/* Line 1787 of yacc.c  */
#line 7796 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1058:
/* Line 1787 of yacc.c  */
#line 7805 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1059:
/* Line 1787 of yacc.c  */
#line 7806 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 1060:
/* Line 1787 of yacc.c  */
#line 7807 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 1061:
/* Line 1787 of yacc.c  */
#line 7811 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1062:
/* Line 1787 of yacc.c  */
#line 7813 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 1063:
/* Line 1787 of yacc.c  */
#line 7826 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->mi.gtid_pos_str = (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1066:
/* Line 1787 of yacc.c  */
#line 7838 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1067:
/* Line 1787 of yacc.c  */
#line 7845 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1068:
/* Line 1787 of yacc.c  */
#line 7849 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 1069:
/* Line 1787 of yacc.c  */
#line 7850 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 1070:
/* Line 1787 of yacc.c  */
#line 7851 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 1071:
/* Line 1787 of yacc.c  */
#line 7856 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1072:
/* Line 1787 of yacc.c  */
#line 7866 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:
/* Line 1787 of yacc.c  */
#line 7877 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1074:
/* Line 1787 of yacc.c  */
#line 7878 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1075:
/* Line 1787 of yacc.c  */
#line 7882 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1076:
/* Line 1787 of yacc.c  */
#line 7883 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1077:
/* Line 1787 of yacc.c  */
#line 7887 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1078:
/* Line 1787 of yacc.c  */
#line 7888 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1079:
/* Line 1787 of yacc.c  */
#line 7889 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 1080:
/* Line 1787 of yacc.c  */
#line 7894 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1081:
/* Line 1787 of yacc.c  */
#line 7904 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:
/* Line 1787 of yacc.c  */
#line 7925 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1086:
/* Line 1787 of yacc.c  */
#line 7927 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            thd->lex->with_persistent_for_clause= TRUE;
          }
    break;

  case 1087:
/* Line 1787 of yacc.c  */
#line 7935 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1088:
/* Line 1787 of yacc.c  */
#line 7937 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1089:
/* Line 1787 of yacc.c  */
#line 7940 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1090:
/* Line 1787 of yacc.c  */
#line 7942 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:
/* Line 1787 of yacc.c  */
#line 7954 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1093:
/* Line 1787 of yacc.c  */
#line 7956 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:
/* Line 1787 of yacc.c  */
#line 7969 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1096:
/* Line 1787 of yacc.c  */
#line 7971 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1097:
/* Line 1787 of yacc.c  */
#line 7976 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1098:
/* Line 1787 of yacc.c  */
#line 7984 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1101:
/* Line 1787 of yacc.c  */
#line 7991 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
          }
    break;

  case 1102:
/* Line 1787 of yacc.c  */
#line 7997 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
    break;

  case 1103:
/* Line 1787 of yacc.c  */
#line 8006 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 1104:
/* Line 1787 of yacc.c  */
#line 8014 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1105:
/* Line 1787 of yacc.c  */
#line 8029 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:
/* Line 1787 of yacc.c  */
#line 8040 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 1107:
/* Line 1787 of yacc.c  */
#line 8041 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1108:
/* Line 1787 of yacc.c  */
#line 8045 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1109:
/* Line 1787 of yacc.c  */
#line 8046 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1110:
/* Line 1787 of yacc.c  */
#line 8050 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 1111:
/* Line 1787 of yacc.c  */
#line 8051 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 1112:
/* Line 1787 of yacc.c  */
#line 8052 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 1113:
/* Line 1787 of yacc.c  */
#line 8053 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 1114:
/* Line 1787 of yacc.c  */
#line 8054 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 1115:
/* Line 1787 of yacc.c  */
#line 8055 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 1116:
/* Line 1787 of yacc.c  */
#line 8060 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 1117:
/* Line 1787 of yacc.c  */
#line 8070 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:
/* Line 1787 of yacc.c  */
#line 8081 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1119:
/* Line 1787 of yacc.c  */
#line 8082 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1120:
/* Line 1787 of yacc.c  */
#line 8083 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1121:
/* Line 1787 of yacc.c  */
#line 8088 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 1122:
/* Line 1787 of yacc.c  */
#line 8092 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1123:
/* Line 1787 of yacc.c  */
#line 8094 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 1124:
/* Line 1787 of yacc.c  */
#line 8101 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1125:
/* Line 1787 of yacc.c  */
#line 8106 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 1128:
/* Line 1787 of yacc.c  */
#line 8119 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 1129:
/* Line 1787 of yacc.c  */
#line 8132 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 1130:
/* Line 1787 of yacc.c  */
#line 8136 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 1135:
/* Line 1787 of yacc.c  */
#line 8155 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1136:
/* Line 1787 of yacc.c  */
#line 8165 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1137:
/* Line 1787 of yacc.c  */
#line 8174 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1138:
/* Line 1787 of yacc.c  */
#line 8175 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 1139:
/* Line 1787 of yacc.c  */
#line 8180 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 1140:
/* Line 1787 of yacc.c  */
#line 8186 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1145:
/* Line 1787 of yacc.c  */
#line 8201 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1146:
/* Line 1787 of yacc.c  */
#line 8211 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1147:
/* Line 1787 of yacc.c  */
#line 8221 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
    break;

  case 1149:
/* Line 1787 of yacc.c  */
#line 8228 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1151:
/* Line 1787 of yacc.c  */
#line 8237 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 1153:
/* Line 1787 of yacc.c  */
#line 8243 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1154:
/* Line 1787 of yacc.c  */
#line 8244 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1155:
/* Line 1787 of yacc.c  */
#line 8254 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1158:
/* Line 1787 of yacc.c  */
#line 8268 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1160:
/* Line 1787 of yacc.c  */
#line 8278 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1162:
/* Line 1787 of yacc.c  */
#line 8287 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1164:
/* Line 1787 of yacc.c  */
#line 8306 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1165:
/* Line 1787 of yacc.c  */
#line 8314 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1167:
/* Line 1787 of yacc.c  */
#line 8321 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1172:
/* Line 1787 of yacc.c  */
#line 8331 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1175:
/* Line 1787 of yacc.c  */
#line 8346 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1179:
/* Line 1787 of yacc.c  */
#line 8363 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1180:
/* Line 1787 of yacc.c  */
#line 8391 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1182:
/* Line 1787 of yacc.c  */
#line 8423 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1183:
/* Line 1787 of yacc.c  */
#line 8429 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1186:
/* Line 1787 of yacc.c  */
#line 8441 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1187:
/* Line 1787 of yacc.c  */
#line 8456 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1188:
/* Line 1787 of yacc.c  */
#line 8463 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1189:
/* Line 1787 of yacc.c  */
#line 8488 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1190:
/* Line 1787 of yacc.c  */
#line 8494 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1191:
/* Line 1787 of yacc.c  */
#line 8500 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1192:
/* Line 1787 of yacc.c  */
#line 8501 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1193:
/* Line 1787 of yacc.c  */
#line 8502 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1194:
/* Line 1787 of yacc.c  */
#line 8503 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1195:
/* Line 1787 of yacc.c  */
#line 8504 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1196:
/* Line 1787 of yacc.c  */
#line 8508 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1197:
/* Line 1787 of yacc.c  */
#line 8509 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= NOT_FIXED_DEC;  }
    break;

  case 1198:
/* Line 1787 of yacc.c  */
#line 8510 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1199:
/* Line 1787 of yacc.c  */
#line 8514 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1200:
/* Line 1787 of yacc.c  */
#line 8515 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0;  }
    break;

  case 1201:
/* Line 1787 of yacc.c  */
#line 8516 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (3)].ulong_num); }
    break;

  case 1202:
/* Line 1787 of yacc.c  */
#line 8520 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1203:
/* Line 1787 of yacc.c  */
#line 8521 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1204:
/* Line 1787 of yacc.c  */
#line 8527 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1205:
/* Line 1787 of yacc.c  */
#line 8578 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_func_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:
/* Line 1787 of yacc.c  */
#line 8585 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1207:
/* Line 1787 of yacc.c  */
#line 8628 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:
/* Line 1787 of yacc.c  */
#line 8634 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1209:
/* Line 1787 of yacc.c  */
#line 8640 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:
/* Line 1787 of yacc.c  */
#line 8646 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:
/* Line 1787 of yacc.c  */
#line 8652 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:
/* Line 1787 of yacc.c  */
#line 8658 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:
/* Line 1787 of yacc.c  */
#line 8664 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:
/* Line 1787 of yacc.c  */
#line 8674 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1216:
/* Line 1787 of yacc.c  */
#line 8680 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1217:
/* Line 1787 of yacc.c  */
#line 8686 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1218:
/* Line 1787 of yacc.c  */
#line 8692 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1219:
/* Line 1787 of yacc.c  */
#line 8698 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1221:
/* Line 1787 of yacc.c  */
#line 8708 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1222:
/* Line 1787 of yacc.c  */
#line 8714 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1223:
/* Line 1787 of yacc.c  */
#line 8724 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1224:
/* Line 1787 of yacc.c  */
#line 8730 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1225:
/* Line 1787 of yacc.c  */
#line 8738 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1226:
/* Line 1787 of yacc.c  */
#line 8744 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1227:
/* Line 1787 of yacc.c  */
#line 8754 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1228:
/* Line 1787 of yacc.c  */
#line 8760 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1229:
/* Line 1787 of yacc.c  */
#line 8769 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1230:
/* Line 1787 of yacc.c  */
#line 8779 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1231:
/* Line 1787 of yacc.c  */
#line 8785 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1232:
/* Line 1787 of yacc.c  */
#line 8795 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1233:
/* Line 1787 of yacc.c  */
#line 8801 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1235:
/* Line 1787 of yacc.c  */
#line 8814 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1236:
/* Line 1787 of yacc.c  */
#line 8820 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1237:
/* Line 1787 of yacc.c  */
#line 8826 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1238:
/* Line 1787 of yacc.c  */
#line 8832 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:
/* Line 1787 of yacc.c  */
#line 8838 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:
/* Line 1787 of yacc.c  */
#line 8844 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:
/* Line 1787 of yacc.c  */
#line 8850 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:
/* Line 1787 of yacc.c  */
#line 8856 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:
/* Line 1787 of yacc.c  */
#line 8862 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:
/* Line 1787 of yacc.c  */
#line 8868 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:
/* Line 1787 of yacc.c  */
#line 8874 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1246:
/* Line 1787 of yacc.c  */
#line 8880 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1247:
/* Line 1787 of yacc.c  */
#line 8886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:
/* Line 1787 of yacc.c  */
#line 8892 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:
/* Line 1787 of yacc.c  */
#line 8921 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1259:
/* Line 1787 of yacc.c  */
#line 8922 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1260:
/* Line 1787 of yacc.c  */
#line 8923 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1261:
/* Line 1787 of yacc.c  */
#line 8924 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1262:
/* Line 1787 of yacc.c  */
#line 8925 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1263:
/* Line 1787 of yacc.c  */
#line 8926 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1264:
/* Line 1787 of yacc.c  */
#line 8930 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1265:
/* Line 1787 of yacc.c  */
#line 8931 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1266:
/* Line 1787 of yacc.c  */
#line 8936 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
    break;

  case 1267:
/* Line 1787 of yacc.c  */
#line 8942 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(2) - (2)].num); }
    break;

  case 1268:
/* Line 1787 of yacc.c  */
#line 8947 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1269:
/* Line 1787 of yacc.c  */
#line 8954 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1270:
/* Line 1787 of yacc.c  */
#line 8961 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1271:
/* Line 1787 of yacc.c  */
#line 8968 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1272:
/* Line 1787 of yacc.c  */
#line 8975 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1273:
/* Line 1787 of yacc.c  */
#line 8982 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
    break;

  case 1274:
/* Line 1787 of yacc.c  */
#line 8987 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
    break;

  case 1275:
/* Line 1787 of yacc.c  */
#line 8993 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
    break;

  case 1276:
/* Line 1787 of yacc.c  */
#line 9000 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
    break;

  case 1277:
/* Line 1787 of yacc.c  */
#line 9007 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1278:
/* Line 1787 of yacc.c  */
#line 9015 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
    break;

  case 1279:
/* Line 1787 of yacc.c  */
#line 9026 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(YYTHD->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[(1) - (4)].item);
     (yyval.dyncol_def)->value= (yyvsp[(3) - (4)].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[(4) - (4)].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
    break;

  case 1280:
/* Line 1787 of yacc.c  */
#line 9048 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
         (yyval.dyncol_def_list)= new (YYTHD->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[(1) - (1)].dyncol_def));
       }
    break;

  case 1281:
/* Line 1787 of yacc.c  */
#line 9055 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
         (yyvsp[(1) - (3)].dyncol_def_list)->push_back((yyvsp[(3) - (3)].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[(1) - (3)].dyncol_def_list);
       }
    break;

  case 1287:
/* Line 1787 of yacc.c  */
#line 9068 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1292:
/* Line 1787 of yacc.c  */
#line 9084 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1293:
/* Line 1787 of yacc.c  */
#line 9090 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1294:
/* Line 1787 of yacc.c  */
#line 9094 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1295:
/* Line 1787 of yacc.c  */
#line 9100 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1296:
/* Line 1787 of yacc.c  */
#line 9106 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1297:
/* Line 1787 of yacc.c  */
#line 9112 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1298:
/* Line 1787 of yacc.c  */
#line 9118 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1299:
/* Line 1787 of yacc.c  */
#line 9120 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1300:
/* Line 1787 of yacc.c  */
#line 9127 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1301:
/* Line 1787 of yacc.c  */
#line 9134 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1302:
/* Line 1787 of yacc.c  */
#line 9140 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item_string *item;
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[(3) - (4)].item)->type() == Item::STRING_ITEM &&
               (item= (Item_string *) (yyvsp[(3) - (4)].item)) &&
                item->collation.repertoire == MY_REPERTOIRE_ASCII &&
                item->str_value.length() < MAX_DATE_STRING_REP_LENGTH * 4)
            {
              enum_field_types type= MYSQL_TYPE_STRING;
              LEX_STRING *ls= &(yyvsp[(2) - (4)].lex_str);
              if (ls->length == 1)
              {
                if (ls->str[0] == 'd')  /* {d'2001-01-01'} */
                  type= MYSQL_TYPE_DATE;
                else if (ls->str[0] == 't') /* {t'10:20:30'} */
                  type= MYSQL_TYPE_TIME;
              }
              else if (ls->length == 2) /* {ts'2001-01-01 10:20:30'} */
              {
                if (ls->str[0] == 't' && ls->str[1] == 's')
                  type= MYSQL_TYPE_DATETIME;
              }
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(YYTHD,
                                            item->str_value.ptr(),
                                            item->str_value.length(),
                                            item->str_value.charset(),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[(3) - (4)].item);
          }
    break;

  case 1303:
/* Line 1787 of yacc.c  */
#line 9183 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1304:
/* Line 1787 of yacc.c  */
#line 9192 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1305:
/* Line 1787 of yacc.c  */
#line 9199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1306:
/* Line 1787 of yacc.c  */
#line 9207 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1307:
/* Line 1787 of yacc.c  */
#line 9213 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1308:
/* Line 1787 of yacc.c  */
#line 9220 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1309:
/* Line 1787 of yacc.c  */
#line 9226 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1310:
/* Line 1787 of yacc.c  */
#line 9240 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1311:
/* Line 1787 of yacc.c  */
#line 9248 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1312:
/* Line 1787 of yacc.c  */
#line 9263 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1313:
/* Line 1787 of yacc.c  */
#line 9269 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1314:
/* Line 1787 of yacc.c  */
#line 9275 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1315:
/* Line 1787 of yacc.c  */
#line 9283 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1316:
/* Line 1787 of yacc.c  */
#line 9289 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1317:
/* Line 1787 of yacc.c  */
#line 9295 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1318:
/* Line 1787 of yacc.c  */
#line 9301 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1319:
/* Line 1787 of yacc.c  */
#line 9307 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1320:
/* Line 1787 of yacc.c  */
#line 9322 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1321:
/* Line 1787 of yacc.c  */
#line 9334 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1322:
/* Line 1787 of yacc.c  */
#line 9340 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1323:
/* Line 1787 of yacc.c  */
#line 9346 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1324:
/* Line 1787 of yacc.c  */
#line 9352 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1325:
/* Line 1787 of yacc.c  */
#line 9358 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1326:
/* Line 1787 of yacc.c  */
#line 9364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1327:
/* Line 1787 of yacc.c  */
#line 9370 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1328:
/* Line 1787 of yacc.c  */
#line 9376 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1329:
/* Line 1787 of yacc.c  */
#line 9382 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1330:
/* Line 1787 of yacc.c  */
#line 9388 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1331:
/* Line 1787 of yacc.c  */
#line 9394 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1332:
/* Line 1787 of yacc.c  */
#line 9400 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1333:
/* Line 1787 of yacc.c  */
#line 9406 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1334:
/* Line 1787 of yacc.c  */
#line 9412 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1335:
/* Line 1787 of yacc.c  */
#line 9418 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1336:
/* Line 1787 of yacc.c  */
#line 9424 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:
/* Line 1787 of yacc.c  */
#line 9430 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1338:
/* Line 1787 of yacc.c  */
#line 9438 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1339:
/* Line 1787 of yacc.c  */
#line 9459 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1340:
/* Line 1787 of yacc.c  */
#line 9466 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1341:
/* Line 1787 of yacc.c  */
#line 9472 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1342:
/* Line 1787 of yacc.c  */
#line 9479 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1343:
/* Line 1787 of yacc.c  */
#line 9487 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1344:
/* Line 1787 of yacc.c  */
#line 9494 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1345:
/* Line 1787 of yacc.c  */
#line 9500 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1346:
/* Line 1787 of yacc.c  */
#line 9506 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:
/* Line 1787 of yacc.c  */
#line 9512 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1348:
/* Line 1787 of yacc.c  */
#line 9519 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1349:
/* Line 1787 of yacc.c  */
#line 9525 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1350:
/* Line 1787 of yacc.c  */
#line 9532 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1351:
/* Line 1787 of yacc.c  */
#line 9538 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1352:
/* Line 1787 of yacc.c  */
#line 9544 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1353:
/* Line 1787 of yacc.c  */
#line 9550 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1354:
/* Line 1787 of yacc.c  */
#line 9556 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1355:
/* Line 1787 of yacc.c  */
#line 9562 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(2) - (2)].num));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1356:
/* Line 1787 of yacc.c  */
#line 9580 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1357:
/* Line 1787 of yacc.c  */
#line 9586 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1358:
/* Line 1787 of yacc.c  */
#line 9592 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1359:
/* Line 1787 of yacc.c  */
#line 9599 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1360:
/* Line 1787 of yacc.c  */
#line 9606 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc((yyvsp[(2) - (2)].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1361:
/* Line 1787 of yacc.c  */
#line 9614 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_add(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1362:
/* Line 1787 of yacc.c  */
#line 9621 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_delete(YYTHD, (yyvsp[(3) - (6)].item), *(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1363:
/* Line 1787 of yacc.c  */
#line 9628 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dyncol_check((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1364:
/* Line 1787 of yacc.c  */
#line 9635 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_dyncol_create(YYTHD, *(yyvsp[(3) - (4)].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1365:
/* Line 1787 of yacc.c  */
#line 9642 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(YYTHD, (yyvsp[(3) - (8)].item), (yyvsp[(5) - (8)].item), (yyvsp[(7) - (8)].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1366:
/* Line 1787 of yacc.c  */
#line 9659 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1367:
/* Line 1787 of yacc.c  */
#line 9665 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1368:
/* Line 1787 of yacc.c  */
#line 9671 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1369:
/* Line 1787 of yacc.c  */
#line 9677 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1370:
/* Line 1787 of yacc.c  */
#line 9683 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1371:
/* Line 1787 of yacc.c  */
#line 9690 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1372:
/* Line 1787 of yacc.c  */
#line 9696 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_last_value(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1373:
/* Line 1787 of yacc.c  */
#line 9702 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1374:
/* Line 1787 of yacc.c  */
#line 9708 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:
/* Line 1787 of yacc.c  */
#line 9714 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            Lex->contains_plaintext_password= true;
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:
/* Line 1787 of yacc.c  */
#line 9721 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            Lex->contains_plaintext_password= true;
            if (thd->variables.old_passwords == 1)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1377:
/* Line 1787 of yacc.c  */
#line 9734 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1378:
/* Line 1787 of yacc.c  */
#line 9740 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1379:
/* Line 1787 of yacc.c  */
#line 9746 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1380:
/* Line 1787 of yacc.c  */
#line 9752 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1381:
/* Line 1787 of yacc.c  */
#line 9760 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1382:
/* Line 1787 of yacc.c  */
#line 9766 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1383:
/* Line 1787 of yacc.c  */
#line 9778 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1384:
/* Line 1787 of yacc.c  */
#line 9784 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1385:
/* Line 1787 of yacc.c  */
#line 9800 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1386:
/* Line 1787 of yacc.c  */
#line 9806 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1387:
/* Line 1787 of yacc.c  */
#line 9813 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1388:
/* Line 1787 of yacc.c  */
#line 9820 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1389:
/* Line 1787 of yacc.c  */
#line 9827 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1390:
/* Line 1787 of yacc.c  */
#line 9834 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1391:
/* Line 1787 of yacc.c  */
#line 9841 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1392:
/* Line 1787 of yacc.c  */
#line 9845 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1393:
/* Line 1787 of yacc.c  */
#line 9864 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1394:
/* Line 1787 of yacc.c  */
#line 9883 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[(1) - (5)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1395:
/* Line 1787 of yacc.c  */
#line 9937 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[(1) - (6)].lex_str).str || check_db_name(&(yyvsp[(1) - (6)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (6)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (6)].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1396:
/* Line 1787 of yacc.c  */
#line 9979 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1397:
/* Line 1787 of yacc.c  */
#line 9981 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1398:
/* Line 1787 of yacc.c  */
#line 9985 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1399:
/* Line 1787 of yacc.c  */
#line 9986 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1400:
/* Line 1787 of yacc.c  */
#line 9990 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1401:
/* Line 1787 of yacc.c  */
#line 9991 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1402:
/* Line 1787 of yacc.c  */
#line 9995 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1403:
/* Line 1787 of yacc.c  */
#line 9996 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1404:
/* Line 1787 of yacc.c  */
#line 10001 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1405:
/* Line 1787 of yacc.c  */
#line 10008 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1406:
/* Line 1787 of yacc.c  */
#line 10016 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1407:
/* Line 1787 of yacc.c  */
#line 10042 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1408:
/* Line 1787 of yacc.c  */
#line 10048 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1409:
/* Line 1787 of yacc.c  */
#line 10054 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1410:
/* Line 1787 of yacc.c  */
#line 10060 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1411:
/* Line 1787 of yacc.c  */
#line 10066 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1412:
/* Line 1787 of yacc.c  */
#line 10072 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1413:
/* Line 1787 of yacc.c  */
#line 10081 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1414:
/* Line 1787 of yacc.c  */
#line 10087 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1415:
/* Line 1787 of yacc.c  */
#line 10089 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1416:
/* Line 1787 of yacc.c  */
#line 10091 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1417:
/* Line 1787 of yacc.c  */
#line 10097 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1418:
/* Line 1787 of yacc.c  */
#line 10108 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1419:
/* Line 1787 of yacc.c  */
#line 10114 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1420:
/* Line 1787 of yacc.c  */
#line 10120 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1421:
/* Line 1787 of yacc.c  */
#line 10126 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1422:
/* Line 1787 of yacc.c  */
#line 10132 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1423:
/* Line 1787 of yacc.c  */
#line 10138 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1424:
/* Line 1787 of yacc.c  */
#line 10144 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1425:
/* Line 1787 of yacc.c  */
#line 10150 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1426:
/* Line 1787 of yacc.c  */
#line 10156 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1427:
/* Line 1787 of yacc.c  */
#line 10162 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1428:
/* Line 1787 of yacc.c  */
#line 10166 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
            sel->gorder_list.empty();
          }
    break;

  case 1429:
/* Line 1787 of yacc.c  */
#line 10181 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1430:
/* Line 1787 of yacc.c  */
#line 10189 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1431:
/* Line 1787 of yacc.c  */
#line 10196 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1432:
/* Line 1787 of yacc.c  */
#line 10206 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1433:
/* Line 1787 of yacc.c  */
#line 10214 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1434:
/* Line 1787 of yacc.c  */
#line 10229 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1435:
/* Line 1787 of yacc.c  */
#line 10230 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1436:
/* Line 1787 of yacc.c  */
#line 10235 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1437:
/* Line 1787 of yacc.c  */
#line 10240 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1439:
/* Line 1787 of yacc.c  */
#line 10246 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1441:
/* Line 1787 of yacc.c  */
#line 10263 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1442:
/* Line 1787 of yacc.c  */
#line 10265 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { if (add_gorder_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1443:
/* Line 1787 of yacc.c  */
#line 10270 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1444:
/* Line 1787 of yacc.c  */
#line 10279 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1445:
/* Line 1787 of yacc.c  */
#line 10287 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1446:
/* Line 1787 of yacc.c  */
#line 10289 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1447:
/* Line 1787 of yacc.c  */
#line 10291 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1448:
/* Line 1787 of yacc.c  */
#line 10293 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1449:
/* Line 1787 of yacc.c  */
#line 10295 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1450:
/* Line 1787 of yacc.c  */
#line 10297 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1451:
/* Line 1787 of yacc.c  */
#line 10299 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1452:
/* Line 1787 of yacc.c  */
#line 10301 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1453:
/* Line 1787 of yacc.c  */
#line 10303 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1454:
/* Line 1787 of yacc.c  */
#line 10305 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1455:
/* Line 1787 of yacc.c  */
#line 10311 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
    break;

  case 1456:
/* Line 1787 of yacc.c  */
#line 10317 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1457:
/* Line 1787 of yacc.c  */
#line 10319 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
    break;

  case 1458:
/* Line 1787 of yacc.c  */
#line 10321 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
    break;

  case 1459:
/* Line 1787 of yacc.c  */
#line 10324 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1460:
/* Line 1787 of yacc.c  */
#line 10325 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1461:
/* Line 1787 of yacc.c  */
#line 10330 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1462:
/* Line 1787 of yacc.c  */
#line 10337 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1463:
/* Line 1787 of yacc.c  */
#line 10344 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1464:
/* Line 1787 of yacc.c  */
#line 10345 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1465:
/* Line 1787 of yacc.c  */
#line 10350 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1466:
/* Line 1787 of yacc.c  */
#line 10357 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1467:
/* Line 1787 of yacc.c  */
#line 10364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1468:
/* Line 1787 of yacc.c  */
#line 10365 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1469:
/* Line 1787 of yacc.c  */
#line 10369 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1470:
/* Line 1787 of yacc.c  */
#line 10370 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1471:
/* Line 1787 of yacc.c  */
#line 10375 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1472:
/* Line 1787 of yacc.c  */
#line 10383 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1473:
/* Line 1787 of yacc.c  */
#line 10393 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1474:
/* Line 1787 of yacc.c  */
#line 10395 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1475:
/* Line 1787 of yacc.c  */
#line 10406 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1476:
/* Line 1787 of yacc.c  */
#line 10417 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1477:
/* Line 1787 of yacc.c  */
#line 10418 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1478:
/* Line 1787 of yacc.c  */
#line 10424 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1479:
/* Line 1787 of yacc.c  */
#line 10426 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1480:
/* Line 1787 of yacc.c  */
#line 10446 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=(yyvsp[(2) - (3)].num); }
    break;

  case 1481:
/* Line 1787 of yacc.c  */
#line 10449 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1482:
/* Line 1787 of yacc.c  */
#line 10457 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
	    (yyvsp[(3) - (6)].table_list)->straight=(yyvsp[(2) - (6)].num);
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1483:
/* Line 1787 of yacc.c  */
#line 10465 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1484:
/* Line 1787 of yacc.c  */
#line 10469 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
	    (yyvsp[(3) - (8)].table_list)->straight=(yyvsp[(2) - (8)].num);
            add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); 
	    (yyval.table_list)=(yyvsp[(3) - (8)].table_list); 
          }
    break;

  case 1485:
/* Line 1787 of yacc.c  */
#line 10475 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
	    (yyvsp[(4) - (4)].table_list)->straight=(yyvsp[(3) - (4)].num);
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1486:
/* Line 1787 of yacc.c  */
#line 10484 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1487:
/* Line 1787 of yacc.c  */
#line 10492 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1488:
/* Line 1787 of yacc.c  */
#line 10500 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1489:
/* Line 1787 of yacc.c  */
#line 10504 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1490:
/* Line 1787 of yacc.c  */
#line 10510 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1491:
/* Line 1787 of yacc.c  */
#line 10520 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1492:
/* Line 1787 of yacc.c  */
#line 10528 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1493:
/* Line 1787 of yacc.c  */
#line 10537 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1494:
/* Line 1787 of yacc.c  */
#line 10541 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1495:
/* Line 1787 of yacc.c  */
#line 10548 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1496:
/* Line 1787 of yacc.c  */
#line 10559 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1497:
/* Line 1787 of yacc.c  */
#line 10560 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1498:
/* Line 1787 of yacc.c  */
#line 10561 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1499:
/* Line 1787 of yacc.c  */
#line 10565 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = (yyvsp[(1) - (1)].num); }
    break;

  case 1500:
/* Line 1787 of yacc.c  */
#line 10566 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1501:
/* Line 1787 of yacc.c  */
#line 10574 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.string_list)= 0;}
    break;

  case 1503:
/* Line 1787 of yacc.c  */
#line 10580 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.string_list)= (yyvsp[(3) - (5)].string_list);
          }
    break;

  case 1504:
/* Line 1787 of yacc.c  */
#line 10594 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1505:
/* Line 1787 of yacc.c  */
#line 10599 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (5)].table), (yyvsp[(4) - (5)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[(3) - (5)].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1506:
/* Line 1787 of yacc.c  */
#line 10610 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1507:
/* Line 1787 of yacc.c  */
#line 10650 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[(5) - (5)].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1508:
/* Line 1787 of yacc.c  */
#line 10726 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (2)].table_list) && (yyvsp[(2) - (2)].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1509:
/* Line 1787 of yacc.c  */
#line 10736 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1510:
/* Line 1787 of yacc.c  */
#line 10741 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1511:
/* Line 1787 of yacc.c  */
#line 10749 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (7)].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1512:
/* Line 1787 of yacc.c  */
#line 10761 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1513:
/* Line 1787 of yacc.c  */
#line 10780 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1514:
/* Line 1787 of yacc.c  */
#line 10788 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1516:
/* Line 1787 of yacc.c  */
#line 10797 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1517:
/* Line 1787 of yacc.c  */
#line 10803 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1518:
/* Line 1787 of yacc.c  */
#line 10819 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1519:
/* Line 1787 of yacc.c  */
#line 10836 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1521:
/* Line 1787 of yacc.c  */
#line 10843 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1522:
/* Line 1787 of yacc.c  */
#line 10848 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1523:
/* Line 1787 of yacc.c  */
#line 10873 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1524:
/* Line 1787 of yacc.c  */
#line 10874 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1525:
/* Line 1787 of yacc.c  */
#line 10879 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1526:
/* Line 1787 of yacc.c  */
#line 10882 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1527:
/* Line 1787 of yacc.c  */
#line 10883 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1528:
/* Line 1787 of yacc.c  */
#line 10884 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1529:
/* Line 1787 of yacc.c  */
#line 10888 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1530:
/* Line 1787 of yacc.c  */
#line 10889 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1531:
/* Line 1787 of yacc.c  */
#line 10894 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1533:
/* Line 1787 of yacc.c  */
#line 10899 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1538:
/* Line 1787 of yacc.c  */
#line 10912 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1540:
/* Line 1787 of yacc.c  */
#line 10916 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1542:
/* Line 1787 of yacc.c  */
#line 10921 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1543:
/* Line 1787 of yacc.c  */
#line 10922 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1544:
/* Line 1787 of yacc.c  */
#line 10927 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1545:
/* Line 1787 of yacc.c  */
#line 10929 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1548:
/* Line 1787 of yacc.c  */
#line 10939 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1549:
/* Line 1787 of yacc.c  */
#line 10950 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1550:
/* Line 1787 of yacc.c  */
#line 10962 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1551:
/* Line 1787 of yacc.c  */
#line 10963 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1552:
/* Line 1787 of yacc.c  */
#line 10964 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1553:
/* Line 1787 of yacc.c  */
#line 10965 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1554:
/* Line 1787 of yacc.c  */
#line 10966 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1555:
/* Line 1787 of yacc.c  */
#line 10967 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1556:
/* Line 1787 of yacc.c  */
#line 10968 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1557:
/* Line 1787 of yacc.c  */
#line 10969 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1558:
/* Line 1787 of yacc.c  */
#line 10970 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1559:
/* Line 1787 of yacc.c  */
#line 10971 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1560:
/* Line 1787 of yacc.c  */
#line 10972 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1561:
/* Line 1787 of yacc.c  */
#line 10973 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1562:
/* Line 1787 of yacc.c  */
#line 10977 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1563:
/* Line 1787 of yacc.c  */
#line 10978 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1564:
/* Line 1787 of yacc.c  */
#line 10979 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1565:
/* Line 1787 of yacc.c  */
#line 10980 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1566:
/* Line 1787 of yacc.c  */
#line 10981 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1567:
/* Line 1787 of yacc.c  */
#line 10982 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1568:
/* Line 1787 of yacc.c  */
#line 10983 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1569:
/* Line 1787 of yacc.c  */
#line 10984 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1570:
/* Line 1787 of yacc.c  */
#line 10985 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1571:
/* Line 1787 of yacc.c  */
#line 10989 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1572:
/* Line 1787 of yacc.c  */
#line 10990 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1573:
/* Line 1787 of yacc.c  */
#line 10991 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1574:
/* Line 1787 of yacc.c  */
#line 10992 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1578:
/* Line 1787 of yacc.c  */
#line 11002 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1579:
/* Line 1787 of yacc.c  */
#line 11004 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1582:
/* Line 1787 of yacc.c  */
#line 11017 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1583:
/* Line 1787 of yacc.c  */
#line 11019 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1584:
/* Line 1787 of yacc.c  */
#line 11023 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[(3) - (3)].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1586:
/* Line 1787 of yacc.c  */
#line 11035 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1587:
/* Line 1787 of yacc.c  */
#line 11039 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[(3) - (3)].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1588:
/* Line 1787 of yacc.c  */
#line 11050 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1589:
/* Line 1787 of yacc.c  */
#line 11055 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1592:
/* Line 1787 of yacc.c  */
#line 11077 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1593:
/* Line 1787 of yacc.c  */
#line 11079 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1594:
/* Line 1787 of yacc.c  */
#line 11083 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1595:
/* Line 1787 of yacc.c  */
#line 11085 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1596:
/* Line 1787 of yacc.c  */
#line 11105 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1600:
/* Line 1787 of yacc.c  */
#line 11139 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1603:
/* Line 1787 of yacc.c  */
#line 11158 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1605:
/* Line 1787 of yacc.c  */
#line 11193 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1606:
/* Line 1787 of yacc.c  */
#line 11195 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1607:
/* Line 1787 of yacc.c  */
#line 11199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1608:
/* Line 1787 of yacc.c  */
#line 11200 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1609:
/* Line 1787 of yacc.c  */
#line 11201 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1610:
/* Line 1787 of yacc.c  */
#line 11206 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
    break;

  case 1611:
/* Line 1787 of yacc.c  */
#line 11213 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1612:
/* Line 1787 of yacc.c  */
#line 11217 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1613:
/* Line 1787 of yacc.c  */
#line 11218 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1614:
/* Line 1787 of yacc.c  */
#line 11223 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1615:
/* Line 1787 of yacc.c  */
#line 11227 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1616:
/* Line 1787 of yacc.c  */
#line 11231 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1617:
/* Line 1787 of yacc.c  */
#line 11238 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1618:
/* Line 1787 of yacc.c  */
#line 11245 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1619:
/* Line 1787 of yacc.c  */
#line 11252 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1620:
/* Line 1787 of yacc.c  */
#line 11262 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1621:
/* Line 1787 of yacc.c  */
#line 11296 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1622:
/* Line 1787 of yacc.c  */
#line 11300 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1623:
/* Line 1787 of yacc.c  */
#line 11306 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1624:
/* Line 1787 of yacc.c  */
#line 11312 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1625:
/* Line 1787 of yacc.c  */
#line 11321 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[(1) - (1)].item);
          }
    break;

  case 1626:
/* Line 1787 of yacc.c  */
#line 11328 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1627:
/* Line 1787 of yacc.c  */
#line 11333 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1628:
/* Line 1787 of yacc.c  */
#line 11339 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1629:
/* Line 1787 of yacc.c  */
#line 11340 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
    break;

  case 1630:
/* Line 1787 of yacc.c  */
#line 11344 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1631:
/* Line 1787 of yacc.c  */
#line 11345 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1632:
/* Line 1787 of yacc.c  */
#line 11346 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[(2) - (2)].lex_str).str, (char**) 0, &error); }
    break;

  case 1633:
/* Line 1787 of yacc.c  */
#line 11350 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1634:
/* Line 1787 of yacc.c  */
#line 11351 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1635:
/* Line 1787 of yacc.c  */
#line 11352 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1636:
/* Line 1787 of yacc.c  */
#line 11353 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1637:
/* Line 1787 of yacc.c  */
#line 11354 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1638:
/* Line 1787 of yacc.c  */
#line 11355 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1639:
/* Line 1787 of yacc.c  */
#line 11359 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1640:
/* Line 1787 of yacc.c  */
#line 11360 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1641:
/* Line 1787 of yacc.c  */
#line 11361 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1642:
/* Line 1787 of yacc.c  */
#line 11362 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1643:
/* Line 1787 of yacc.c  */
#line 11363 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1644:
/* Line 1787 of yacc.c  */
#line 11367 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1645:
/* Line 1787 of yacc.c  */
#line 11368 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1646:
/* Line 1787 of yacc.c  */
#line 11369 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1647:
/* Line 1787 of yacc.c  */
#line 11370 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1648:
/* Line 1787 of yacc.c  */
#line 11371 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1649:
/* Line 1787 of yacc.c  */
#line 11375 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1650:
/* Line 1787 of yacc.c  */
#line 11376 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1651:
/* Line 1787 of yacc.c  */
#line 11377 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= strtoull((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1652:
/* Line 1787 of yacc.c  */
#line 11378 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1653:
/* Line 1787 of yacc.c  */
#line 11379 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1654:
/* Line 1787 of yacc.c  */
#line 11384 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1657:
/* Line 1787 of yacc.c  */
#line 11393 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.choice)= (yyvsp[(1) - (1)].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
    break;

  case 1658:
/* Line 1787 of yacc.c  */
#line 11394 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.choice)= HA_CHOICE_UNDEF; }
    break;

  case 1660:
/* Line 1787 of yacc.c  */
#line 11400 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1662:
/* Line 1787 of yacc.c  */
#line 11430 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1663:
/* Line 1787 of yacc.c  */
#line 11431 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1666:
/* Line 1787 of yacc.c  */
#line 11441 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1667:
/* Line 1787 of yacc.c  */
#line 11452 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1668:
/* Line 1787 of yacc.c  */
#line 11458 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1670:
/* Line 1787 of yacc.c  */
#line 11463 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1671:
/* Line 1787 of yacc.c  */
#line 11468 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1672:
/* Line 1787 of yacc.c  */
#line 11487 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1673:
/* Line 1787 of yacc.c  */
#line 11519 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1675:
/* Line 1787 of yacc.c  */
#line 11531 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1676:
/* Line 1787 of yacc.c  */
#line 11539 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1678:
/* Line 1787 of yacc.c  */
#line 11542 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1679:
/* Line 1787 of yacc.c  */
#line 11554 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1680:
/* Line 1787 of yacc.c  */
#line 11565 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1681:
/* Line 1787 of yacc.c  */
#line 11571 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1682:
/* Line 1787 of yacc.c  */
#line 11582 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->check_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1683:
/* Line 1787 of yacc.c  */
#line 11591 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1684:
/* Line 1787 of yacc.c  */
#line 11592 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1685:
/* Line 1787 of yacc.c  */
#line 11593 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(4) - (7)].lex_str).str, (yyvsp[(3) - (7)].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(6) - (7)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
    break;

  case 1686:
/* Line 1787 of yacc.c  */
#line 11609 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1687:
/* Line 1787 of yacc.c  */
#line 11616 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1688:
/* Line 1787 of yacc.c  */
#line 11639 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1689:
/* Line 1787 of yacc.c  */
#line 11660 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1690:
/* Line 1787 of yacc.c  */
#line 11672 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1691:
/* Line 1787 of yacc.c  */
#line 11676 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1692:
/* Line 1787 of yacc.c  */
#line 11684 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1693:
/* Line 1787 of yacc.c  */
#line 11686 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1694:
/* Line 1787 of yacc.c  */
#line 11692 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1695:
/* Line 1787 of yacc.c  */
#line 11699 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1696:
/* Line 1787 of yacc.c  */
#line 11704 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1697:
/* Line 1787 of yacc.c  */
#line 11709 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1700:
/* Line 1787 of yacc.c  */
#line 11724 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1701:
/* Line 1787 of yacc.c  */
#line 11735 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(2) - (2)].string_list)))
              MYSQL_YYABORT;
          }
    break;

  case 1704:
/* Line 1787 of yacc.c  */
#line 11753 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1705:
/* Line 1787 of yacc.c  */
#line 11764 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
    break;

  case 1706:
/* Line 1787 of yacc.c  */
#line 11769 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
    break;

  case 1707:
/* Line 1787 of yacc.c  */
#line 11776 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1708:
/* Line 1787 of yacc.c  */
#line 11777 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1709:
/* Line 1787 of yacc.c  */
#line 11785 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1710:
/* Line 1787 of yacc.c  */
#line 11793 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1711:
/* Line 1787 of yacc.c  */
#line 11798 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1712:
/* Line 1787 of yacc.c  */
#line 11803 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1713:
/* Line 1787 of yacc.c  */
#line 11810 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1714:
/* Line 1787 of yacc.c  */
#line 11815 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1715:
/* Line 1787 of yacc.c  */
#line 11820 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1716:
/* Line 1787 of yacc.c  */
#line 11828 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1717:
/* Line 1787 of yacc.c  */
#line 11830 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1718:
/* Line 1787 of yacc.c  */
#line 11837 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1719:
/* Line 1787 of yacc.c  */
#line 11841 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1720:
/* Line 1787 of yacc.c  */
#line 11843 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1721:
/* Line 1787 of yacc.c  */
#line 11853 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1722:
/* Line 1787 of yacc.c  */
#line 11854 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1723:
/* Line 1787 of yacc.c  */
#line 11859 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1724:
/* Line 1787 of yacc.c  */
#line 11867 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1725:
/* Line 1787 of yacc.c  */
#line 11868 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1726:
/* Line 1787 of yacc.c  */
#line 11869 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1727:
/* Line 1787 of yacc.c  */
#line 11871 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1729:
/* Line 1787 of yacc.c  */
#line 11881 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1730:
/* Line 1787 of yacc.c  */
#line 11882 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1731:
/* Line 1787 of yacc.c  */
#line 11886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1732:
/* Line 1787 of yacc.c  */
#line 11887 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1733:
/* Line 1787 of yacc.c  */
#line 11889 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1734:
/* Line 1787 of yacc.c  */
#line 11890 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1735:
/* Line 1787 of yacc.c  */
#line 11892 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1736:
/* Line 1787 of yacc.c  */
#line 11893 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1741:
/* Line 1787 of yacc.c  */
#line 11908 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1742:
/* Line 1787 of yacc.c  */
#line 11917 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1743:
/* Line 1787 of yacc.c  */
#line 11918 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1744:
/* Line 1787 of yacc.c  */
#line 11922 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1745:
/* Line 1787 of yacc.c  */
#line 11923 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1746:
/* Line 1787 of yacc.c  */
#line 11928 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1747:
/* Line 1787 of yacc.c  */
#line 11933 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1748:
/* Line 1787 of yacc.c  */
#line 11941 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1750:
/* Line 1787 of yacc.c  */
#line 11947 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1751:
/* Line 1787 of yacc.c  */
#line 11952 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1752:
/* Line 1787 of yacc.c  */
#line 11959 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1753:
/* Line 1787 of yacc.c  */
#line 11961 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1755:
/* Line 1787 of yacc.c  */
#line 11970 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1757:
/* Line 1787 of yacc.c  */
#line 11978 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1758:
/* Line 1787 of yacc.c  */
#line 11986 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1759:
/* Line 1787 of yacc.c  */
#line 12004 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1762:
/* Line 1787 of yacc.c  */
#line 12014 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1765:
/* Line 1787 of yacc.c  */
#line 12027 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1766:
/* Line 1787 of yacc.c  */
#line 12036 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1767:
/* Line 1787 of yacc.c  */
#line 12037 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1768:
/* Line 1787 of yacc.c  */
#line 12044 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1770:
/* Line 1787 of yacc.c  */
#line 12059 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (3)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[(3) - (3)].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1771:
/* Line 1787 of yacc.c  */
#line 12070 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1772:
/* Line 1787 of yacc.c  */
#line 12072 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1773:
/* Line 1787 of yacc.c  */
#line 12078 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1774:
/* Line 1787 of yacc.c  */
#line 12083 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1775:
/* Line 1787 of yacc.c  */
#line 12089 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1778:
/* Line 1787 of yacc.c  */
#line 12102 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1779:
/* Line 1787 of yacc.c  */
#line 12115 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1780:
/* Line 1787 of yacc.c  */
#line 12130 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1781:
/* Line 1787 of yacc.c  */
#line 12131 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1782:
/* Line 1787 of yacc.c  */
#line 12135 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1783:
/* Line 1787 of yacc.c  */
#line 12136 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1784:
/* Line 1787 of yacc.c  */
#line 12140 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1785:
/* Line 1787 of yacc.c  */
#line 12141 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1786:
/* Line 1787 of yacc.c  */
#line 12142 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1787:
/* Line 1787 of yacc.c  */
#line 12147 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1788:
/* Line 1787 of yacc.c  */
#line 12158 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1795:
/* Line 1787 of yacc.c  */
#line 12183 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1796:
/* Line 1787 of yacc.c  */
#line 12187 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1797:
/* Line 1787 of yacc.c  */
#line 12191 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1798:
/* Line 1787 of yacc.c  */
#line 12195 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1799:
/* Line 1787 of yacc.c  */
#line 12199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1800:
/* Line 1787 of yacc.c  */
#line 12203 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1801:
/* Line 1787 of yacc.c  */
#line 12207 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1802:
/* Line 1787 of yacc.c  */
#line 12211 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1803:
/* Line 1787 of yacc.c  */
#line 12215 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1804:
/* Line 1787 of yacc.c  */
#line 12222 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1805:
/* Line 1787 of yacc.c  */
#line 12226 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1806:
/* Line 1787 of yacc.c  */
#line 12237 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
                LEX *lex=Lex;
                lex->sql_command= SQLCOM_CCDB_SHOW_CCTABLES;
          }
    break;

  case 1807:
/* Line 1787 of yacc.c  */
#line 12244 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
                LEX *lex=Lex;
                lex->sql_command= SQLCOM_CCDB_SHOW_STATUS;
          }
    break;

  case 1808:
/* Line 1787 of yacc.c  */
#line 12255 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1809:
/* Line 1787 of yacc.c  */
#line 12264 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1810:
/* Line 1787 of yacc.c  */
#line 12271 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1811:
/* Line 1787 of yacc.c  */
#line 12278 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1812:
/* Line 1787 of yacc.c  */
#line 12286 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1813:
/* Line 1787 of yacc.c  */
#line 12294 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1814:
/* Line 1787 of yacc.c  */
#line 12302 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1815:
/* Line 1787 of yacc.c  */
#line 12310 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1816:
/* Line 1787 of yacc.c  */
#line 12318 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1817:
/* Line 1787 of yacc.c  */
#line 12325 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->ident= (yyvsp[(3) - (3)].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1818:
/* Line 1787 of yacc.c  */
#line 12332 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1819:
/* Line 1787 of yacc.c  */
#line 12338 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1820:
/* Line 1787 of yacc.c  */
#line 12340 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1821:
/* Line 1787 of yacc.c  */
#line 12342 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1822:
/* Line 1787 of yacc.c  */
#line 12351 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1823:
/* Line 1787 of yacc.c  */
#line 12355 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1824:
/* Line 1787 of yacc.c  */
#line 12359 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1826:
/* Line 1787 of yacc.c  */
#line 12364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1828:
/* Line 1787 of yacc.c  */
#line 12369 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1829:
/* Line 1787 of yacc.c  */
#line 12378 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1830:
/* Line 1787 of yacc.c  */
#line 12385 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW AUTHORS");
          }
    break;

  case 1831:
/* Line 1787 of yacc.c  */
#line 12394 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
            push_warning_printf(YYTHD, Sql_condition::WARN_LEVEL_WARN,
                                ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT,
                                ER(ER_WARN_DEPRECATED_SYNTAX_NO_REPLACEMENT),
                                "SHOW CONTRIBUTORS");
          }
    break;

  case 1832:
/* Line 1787 of yacc.c  */
#line 12403 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1833:
/* Line 1787 of yacc.c  */
#line 12408 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1834:
/* Line 1787 of yacc.c  */
#line 12410 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1835:
/* Line 1787 of yacc.c  */
#line 12412 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1836:
/* Line 1787 of yacc.c  */
#line 12414 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1837:
/* Line 1787 of yacc.c  */
#line 12416 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1838:
/* Line 1787 of yacc.c  */
#line 12418 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1839:
/* Line 1787 of yacc.c  */
#line 12425 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1840:
/* Line 1787 of yacc.c  */
#line 12433 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1841:
/* Line 1787 of yacc.c  */
#line 12435 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1842:
/* Line 1787 of yacc.c  */
#line 12443 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1843:
/* Line 1787 of yacc.c  */
#line 12450 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1844:
/* Line 1787 of yacc.c  */
#line 12457 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1845:
/* Line 1787 of yacc.c  */
#line 12467 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1846:
/* Line 1787 of yacc.c  */
#line 12474 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1847:
/* Line 1787 of yacc.c  */
#line 12480 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1848:
/* Line 1787 of yacc.c  */
#line 12489 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1849:
/* Line 1787 of yacc.c  */
#line 12497 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1850:
/* Line 1787 of yacc.c  */
#line 12501 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
    break;

  case 1851:
/* Line 1787 of yacc.c  */
#line 12506 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
    break;

  case 1852:
/* Line 1787 of yacc.c  */
#line 12514 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
    break;

  case 1853:
/* Line 1787 of yacc.c  */
#line 12519 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(YYTHD, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
    break;

  case 1854:
/* Line 1787 of yacc.c  */
#line 12526 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1855:
/* Line 1787 of yacc.c  */
#line 12533 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1856:
/* Line 1787 of yacc.c  */
#line 12540 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
    break;

  case 1857:
/* Line 1787 of yacc.c  */
#line 12547 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1858:
/* Line 1787 of yacc.c  */
#line 12554 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1859:
/* Line 1787 of yacc.c  */
#line 12561 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1860:
/* Line 1787 of yacc.c  */
#line 12567 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1861:
/* Line 1787 of yacc.c  */
#line 12574 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1862:
/* Line 1787 of yacc.c  */
#line 12581 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1863:
/* Line 1787 of yacc.c  */
#line 12586 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1864:
/* Line 1787 of yacc.c  */
#line 12591 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1865:
/* Line 1787 of yacc.c  */
#line 12596 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[(3) - (3)].item));
          }
    break;

  case 1866:
/* Line 1787 of yacc.c  */
#line 12607 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1867:
/* Line 1787 of yacc.c  */
#line 12609 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1868:
/* Line 1787 of yacc.c  */
#line 12611 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1873:
/* Line 1787 of yacc.c  */
#line 12625 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1874:
/* Line 1787 of yacc.c  */
#line 12626 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1875:
/* Line 1787 of yacc.c  */
#line 12630 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1876:
/* Line 1787 of yacc.c  */
#line 12631 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1879:
/* Line 1787 of yacc.c  */
#line 12640 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1880:
/* Line 1787 of yacc.c  */
#line 12641 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1881:
/* Line 1787 of yacc.c  */
#line 12645 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1882:
/* Line 1787 of yacc.c  */
#line 12646 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1884:
/* Line 1787 of yacc.c  */
#line 12652 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1885:
/* Line 1787 of yacc.c  */
#line 12659 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->where= normalize_cond((yyvsp[(2) - (2)].item));
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1886:
/* Line 1787 of yacc.c  */
#line 12669 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1887:
/* Line 1787 of yacc.c  */
#line 12680 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1888:
/* Line 1787 of yacc.c  */
#line 12684 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1889:
/* Line 1787 of yacc.c  */
#line 12686 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1892:
/* Line 1787 of yacc.c  */
#line 12698 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1893:
/* Line 1787 of yacc.c  */
#line 12699 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1894:
/* Line 1787 of yacc.c  */
#line 12700 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1895:
/* Line 1787 of yacc.c  */
#line 12704 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1896:
/* Line 1787 of yacc.c  */
#line 12705 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1897:
/* Line 1787 of yacc.c  */
#line 12707 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1898:
/* Line 1787 of yacc.c  */
#line 12720 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
                LEX *lex=Lex;
                lex->sql_command= SQLCOM_CCDB_LOCK_CCTABLE;
                lex->name.str= (yyvsp[(2) - (2)].lex_str).str; 
          }
    break;

  case 1899:
/* Line 1787 of yacc.c  */
#line 12729 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
                LEX *lex=Lex;
                lex->sql_command= SQLCOM_CCDB_UNLOCK_CCTABLE;
                lex->name.str= (yyvsp[(2) - (2)].lex_str).str; 
          }
    break;

  case 1900:
/* Line 1787 of yacc.c  */
#line 12739 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CCDB_OPENTABLE;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;

          }
    break;

  case 1901:
/* Line 1787 of yacc.c  */
#line 12749 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CCDB_CLOSEDB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1902:
/* Line 1787 of yacc.c  */
#line 12758 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CCDB_OPENDB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1903:
/* Line 1787 of yacc.c  */
#line 12767 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
                LEX *lex=Lex;
                lex->sql_command= SQLCOM_CCDB_PUBLISH_STATUS;
		lex->name.str= (yyvsp[(2) - (2)].lex_str).str;

  
          }
    break;

  case 1904:
/* Line 1787 of yacc.c  */
#line 12778 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
                LEX *lex=Lex;
                lex->sql_command= SQLCOM_CCDB_PUBLISH;
		lex->name.str= (yyvsp[(2) - (2)].lex_str).str;

  
          }
    break;

  case 1905:
/* Line 1787 of yacc.c  */
#line 12791 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1906:
/* Line 1787 of yacc.c  */
#line 12798 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1907:
/* Line 1787 of yacc.c  */
#line 12803 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1908:
/* Line 1787 of yacc.c  */
#line 12812 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1909:
/* Line 1787 of yacc.c  */
#line 12813 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1911:
/* Line 1787 of yacc.c  */
#line 12818 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1912:
/* Line 1787 of yacc.c  */
#line 12820 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK | (yyvsp[(4) - (4)].num);
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1914:
/* Line 1787 of yacc.c  */
#line 12835 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1915:
/* Line 1787 of yacc.c  */
#line 12840 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1916:
/* Line 1787 of yacc.c  */
#line 12842 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1917:
/* Line 1787 of yacc.c  */
#line 12844 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1918:
/* Line 1787 of yacc.c  */
#line 12846 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1919:
/* Line 1787 of yacc.c  */
#line 12848 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1920:
/* Line 1787 of yacc.c  */
#line 12850 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
    break;

  case 1921:
/* Line 1787 of yacc.c  */
#line 12861 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1922:
/* Line 1787 of yacc.c  */
#line 12863 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1923:
/* Line 1787 of yacc.c  */
#line 12865 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1924:
/* Line 1787 of yacc.c  */
#line 12867 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
    break;

  case 1925:
/* Line 1787 of yacc.c  */
#line 12873 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1926:
/* Line 1787 of yacc.c  */
#line 12875 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
    break;

  case 1927:
/* Line 1787 of yacc.c  */
#line 12886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_CLIENT_STATS; }
    break;

  case 1928:
/* Line 1787 of yacc.c  */
#line 12888 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_STATS; }
    break;

  case 1929:
/* Line 1787 of yacc.c  */
#line 12890 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_TABLE_STATS; }
    break;

  case 1930:
/* Line 1787 of yacc.c  */
#line 12892 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_INDEX_STATS; }
    break;

  case 1931:
/* Line 1787 of yacc.c  */
#line 12894 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1932:
/* Line 1787 of yacc.c  */
#line 12896 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1933:
/* Line 1787 of yacc.c  */
#line 12898 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1934:
/* Line 1787 of yacc.c  */
#line 12902 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1935:
/* Line 1787 of yacc.c  */
#line 12903 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1936:
/* Line 1787 of yacc.c  */
#line 12907 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.num)= 0;}
    break;

  case 1937:
/* Line 1787 of yacc.c  */
#line 12908 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.num)= REFRESH_CHECKPOINT; }
    break;

  case 1938:
/* Line 1787 of yacc.c  */
#line 12912 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1939:
/* Line 1787 of yacc.c  */
#line 12917 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1942:
/* Line 1787 of yacc.c  */
#line 12926 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1943:
/* Line 1787 of yacc.c  */
#line 12928 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 1944:
/* Line 1787 of yacc.c  */
#line 12929 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1945:
/* Line 1787 of yacc.c  */
#line 12930 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1946:
/* Line 1787 of yacc.c  */
#line 12934 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= false; }
    break;

  case 1947:
/* Line 1787 of yacc.c  */
#line 12935 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->reset_slave_info.all= true; }
    break;

  case 1948:
/* Line 1787 of yacc.c  */
#line 12940 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1949:
/* Line 1787 of yacc.c  */
#line 12946 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1951:
/* Line 1787 of yacc.c  */
#line 12955 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1952:
/* Line 1787 of yacc.c  */
#line 12959 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1953:
/* Line 1787 of yacc.c  */
#line 12971 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1954:
/* Line 1787 of yacc.c  */
#line 12978 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->kill_signal= (killed_state) ((yyvsp[(3) - (5)].num) | (yyvsp[(4) - (5)].num));
          }
    break;

  case 1955:
/* Line 1787 of yacc.c  */
#line 12984 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1956:
/* Line 1787 of yacc.c  */
#line 12985 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_HARD_BIT; }
    break;

  case 1957:
/* Line 1787 of yacc.c  */
#line 12986 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1958:
/* Line 1787 of yacc.c  */
#line 12989 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1959:
/* Line 1787 of yacc.c  */
#line 12990 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_CONNECTION; }
    break;

  case 1960:
/* Line 1787 of yacc.c  */
#line 12991 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= (int) KILL_QUERY; }
    break;

  case 1961:
/* Line 1787 of yacc.c  */
#line 12996 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
          Lex->value_list.push_front((yyval.item));
          Lex->kill_type= KILL_TYPE_ID;
         }
    break;

  case 1962:
/* Line 1787 of yacc.c  */
#line 13001 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->users_list.push_back((yyvsp[(2) - (2)].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
    break;

  case 1963:
/* Line 1787 of yacc.c  */
#line 13009 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
    break;

  case 1964:
/* Line 1787 of yacc.c  */
#line 13016 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1965:
/* Line 1787 of yacc.c  */
#line 13028 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1966:
/* Line 1787 of yacc.c  */
#line 13040 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1967:
/* Line 1787 of yacc.c  */
#line 13050 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (13)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (13)].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[(13) - (13)].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1968:
/* Line 1787 of yacc.c  */
#line 13060 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(15) - (15)].charset); }
    break;

  case 1969:
/* Line 1787 of yacc.c  */
#line 13064 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 1970:
/* Line 1787 of yacc.c  */
#line 13068 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1971:
/* Line 1787 of yacc.c  */
#line 13069 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1972:
/* Line 1787 of yacc.c  */
#line 13073 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1973:
/* Line 1787 of yacc.c  */
#line 13074 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1974:
/* Line 1787 of yacc.c  */
#line 13078 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1975:
/* Line 1787 of yacc.c  */
#line 13080 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 1976:
/* Line 1787 of yacc.c  */
#line 13087 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1977:
/* Line 1787 of yacc.c  */
#line 13091 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1978:
/* Line 1787 of yacc.c  */
#line 13092 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1979:
/* Line 1787 of yacc.c  */
#line 13093 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1984:
/* Line 1787 of yacc.c  */
#line 13108 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1985:
/* Line 1787 of yacc.c  */
#line 13113 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1986:
/* Line 1787 of yacc.c  */
#line 13120 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1987:
/* Line 1787 of yacc.c  */
#line 13125 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1992:
/* Line 1787 of yacc.c  */
#line 13143 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1993:
/* Line 1787 of yacc.c  */
#line 13148 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1994:
/* Line 1787 of yacc.c  */
#line 13155 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 1995:
/* Line 1787 of yacc.c  */
#line 13157 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1997:
/* Line 1787 of yacc.c  */
#line 13162 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1998:
/* Line 1787 of yacc.c  */
#line 13169 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 1999:
/* Line 1787 of yacc.c  */
#line 13171 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { }
    break;

  case 2000:
/* Line 1787 of yacc.c  */
#line 13175 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2001:
/* Line 1787 of yacc.c  */
#line 13176 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2002:
/* Line 1787 of yacc.c  */
#line 13177 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2003:
/* Line 1787 of yacc.c  */
#line 13182 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 2004:
/* Line 1787 of yacc.c  */
#line 13184 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 2005:
/* Line 1787 of yacc.c  */
#line 13188 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 2006:
/* Line 1787 of yacc.c  */
#line 13190 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2007:
/* Line 1787 of yacc.c  */
#line 13198 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2008:
/* Line 1787 of yacc.c  */
#line 13199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2011:
/* Line 1787 of yacc.c  */
#line 13209 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name_no_truncate((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 2012:
/* Line 1787 of yacc.c  */
#line 13222 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2013:
/* Line 1787 of yacc.c  */
#line 13246 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2014:
/* Line 1787 of yacc.c  */
#line 13258 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 2015:
/* Line 1787 of yacc.c  */
#line 13269 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 2016:
/* Line 1787 of yacc.c  */
#line 13288 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2017:
/* Line 1787 of yacc.c  */
#line 13296 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2018:
/* Line 1787 of yacc.c  */
#line 13308 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2019:
/* Line 1787 of yacc.c  */
#line 13316 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 2020:
/* Line 1787 of yacc.c  */
#line 13331 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2021:
/* Line 1787 of yacc.c  */
#line 13351 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2022:
/* Line 1787 of yacc.c  */
#line 13352 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 2023:
/* Line 1787 of yacc.c  */
#line 13354 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 2024:
/* Line 1787 of yacc.c  */
#line 13361 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 2025:
/* Line 1787 of yacc.c  */
#line 13362 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 2026:
/* Line 1787 of yacc.c  */
#line 13363 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2027:
/* Line 1787 of yacc.c  */
#line 13365 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 2028:
/* Line 1787 of yacc.c  */
#line 13372 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2029:
/* Line 1787 of yacc.c  */
#line 13378 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2030:
/* Line 1787 of yacc.c  */
#line 13384 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_hybrid((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2031:
/* Line 1787 of yacc.c  */
#line 13390 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2032:
/* Line 1787 of yacc.c  */
#line 13396 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2033:
/* Line 1787 of yacc.c  */
#line 13402 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2034:
/* Line 1787 of yacc.c  */
#line 13431 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 2035:
/* Line 1787 of yacc.c  */
#line 13462 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2036:
/* Line 1787 of yacc.c  */
#line 13472 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2037:
/* Line 1787 of yacc.c  */
#line 13482 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2038:
/* Line 1787 of yacc.c  */
#line 13488 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2039:
/* Line 1787 of yacc.c  */
#line 13497 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 2040:
/* Line 1787 of yacc.c  */
#line 13509 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2041:
/* Line 1787 of yacc.c  */
#line 13515 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2042:
/* Line 1787 of yacc.c  */
#line 13521 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.item)= create_temporal_literal(YYTHD, (yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
    break;

  case 2043:
/* Line 1787 of yacc.c  */
#line 13536 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2044:
/* Line 1787 of yacc.c  */
#line 13537 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2045:
/* Line 1787 of yacc.c  */
#line 13542 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2046:
/* Line 1787 of yacc.c  */
#line 13551 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 2047:
/* Line 1787 of yacc.c  */
#line 13566 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2048:
/* Line 1787 of yacc.c  */
#line 13571 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2049:
/* Line 1787 of yacc.c  */
#line 13617 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2050:
/* Line 1787 of yacc.c  */
#line 13622 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2051:
/* Line 1787 of yacc.c  */
#line 13639 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 2052:
/* Line 1787 of yacc.c  */
#line 13644 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 2053:
/* Line 1787 of yacc.c  */
#line 13723 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2054:
/* Line 1787 of yacc.c  */
#line 13748 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2055:
/* Line 1787 of yacc.c  */
#line 13778 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2056:
/* Line 1787 of yacc.c  */
#line 13780 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2057:
/* Line 1787 of yacc.c  */
#line 13796 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2058:
/* Line 1787 of yacc.c  */
#line 13805 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 2059:
/* Line 1787 of yacc.c  */
#line 13810 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2060:
/* Line 1787 of yacc.c  */
#line 13816 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2061:
/* Line 1787 of yacc.c  */
#line 13822 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2062:
/* Line 1787 of yacc.c  */
#line 13832 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2063:
/* Line 1787 of yacc.c  */
#line 13838 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2064:
/* Line 1787 of yacc.c  */
#line 13847 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2065:
/* Line 1787 of yacc.c  */
#line 13856 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 2066:
/* Line 1787 of yacc.c  */
#line 13858 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2067:
/* Line 1787 of yacc.c  */
#line 13888 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2068:
/* Line 1787 of yacc.c  */
#line 13904 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 2069:
/* Line 1787 of yacc.c  */
#line 13920 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2070:
/* Line 1787 of yacc.c  */
#line 13936 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2071:
/* Line 1787 of yacc.c  */
#line 13938 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2072:
/* Line 1787 of yacc.c  */
#line 13948 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 2073:
/* Line 1787 of yacc.c  */
#line 13950 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 2074:
/* Line 1787 of yacc.c  */
#line 13960 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2075:
/* Line 1787 of yacc.c  */
#line 13961 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2076:
/* Line 1787 of yacc.c  */
#line 13962 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 2077:
/* Line 1787 of yacc.c  */
#line 13967 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2078:
/* Line 1787 of yacc.c  */
#line 13984 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 2079:
/* Line 1787 of yacc.c  */
#line 14006 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 2080:
/* Line 1787 of yacc.c  */
#line 14020 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2081:
/* Line 1787 of yacc.c  */
#line 14021 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2082:
/* Line 1787 of yacc.c  */
#line 14022 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2083:
/* Line 1787 of yacc.c  */
#line 14023 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2084:
/* Line 1787 of yacc.c  */
#line 14024 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2085:
/* Line 1787 of yacc.c  */
#line 14025 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2086:
/* Line 1787 of yacc.c  */
#line 14026 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2087:
/* Line 1787 of yacc.c  */
#line 14027 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2088:
/* Line 1787 of yacc.c  */
#line 14028 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2089:
/* Line 1787 of yacc.c  */
#line 14029 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2090:
/* Line 1787 of yacc.c  */
#line 14030 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2091:
/* Line 1787 of yacc.c  */
#line 14031 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2092:
/* Line 1787 of yacc.c  */
#line 14032 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2093:
/* Line 1787 of yacc.c  */
#line 14033 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2094:
/* Line 1787 of yacc.c  */
#line 14034 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2095:
/* Line 1787 of yacc.c  */
#line 14035 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2096:
/* Line 1787 of yacc.c  */
#line 14036 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2097:
/* Line 1787 of yacc.c  */
#line 14037 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2098:
/* Line 1787 of yacc.c  */
#line 14038 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2099:
/* Line 1787 of yacc.c  */
#line 14039 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2100:
/* Line 1787 of yacc.c  */
#line 14040 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2101:
/* Line 1787 of yacc.c  */
#line 14041 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2102:
/* Line 1787 of yacc.c  */
#line 14042 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2103:
/* Line 1787 of yacc.c  */
#line 14043 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2104:
/* Line 1787 of yacc.c  */
#line 14044 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2105:
/* Line 1787 of yacc.c  */
#line 14045 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2106:
/* Line 1787 of yacc.c  */
#line 14046 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2107:
/* Line 1787 of yacc.c  */
#line 14047 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2108:
/* Line 1787 of yacc.c  */
#line 14048 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2109:
/* Line 1787 of yacc.c  */
#line 14049 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2110:
/* Line 1787 of yacc.c  */
#line 14050 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2111:
/* Line 1787 of yacc.c  */
#line 14051 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2112:
/* Line 1787 of yacc.c  */
#line 14052 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2113:
/* Line 1787 of yacc.c  */
#line 14053 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2114:
/* Line 1787 of yacc.c  */
#line 14054 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2115:
/* Line 1787 of yacc.c  */
#line 14055 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2116:
/* Line 1787 of yacc.c  */
#line 14056 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2117:
/* Line 1787 of yacc.c  */
#line 14057 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2118:
/* Line 1787 of yacc.c  */
#line 14058 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2119:
/* Line 1787 of yacc.c  */
#line 14059 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2120:
/* Line 1787 of yacc.c  */
#line 14060 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2121:
/* Line 1787 of yacc.c  */
#line 14061 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2122:
/* Line 1787 of yacc.c  */
#line 14062 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2123:
/* Line 1787 of yacc.c  */
#line 14063 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2124:
/* Line 1787 of yacc.c  */
#line 14064 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2125:
/* Line 1787 of yacc.c  */
#line 14065 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2126:
/* Line 1787 of yacc.c  */
#line 14066 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2127:
/* Line 1787 of yacc.c  */
#line 14067 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2128:
/* Line 1787 of yacc.c  */
#line 14068 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2129:
/* Line 1787 of yacc.c  */
#line 14069 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2130:
/* Line 1787 of yacc.c  */
#line 14070 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2131:
/* Line 1787 of yacc.c  */
#line 14071 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2132:
/* Line 1787 of yacc.c  */
#line 14072 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2133:
/* Line 1787 of yacc.c  */
#line 14073 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2134:
/* Line 1787 of yacc.c  */
#line 14074 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2135:
/* Line 1787 of yacc.c  */
#line 14075 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2136:
/* Line 1787 of yacc.c  */
#line 14076 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2137:
/* Line 1787 of yacc.c  */
#line 14077 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2138:
/* Line 1787 of yacc.c  */
#line 14087 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2139:
/* Line 1787 of yacc.c  */
#line 14088 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2140:
/* Line 1787 of yacc.c  */
#line 14089 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2141:
/* Line 1787 of yacc.c  */
#line 14090 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2142:
/* Line 1787 of yacc.c  */
#line 14091 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2143:
/* Line 1787 of yacc.c  */
#line 14092 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2144:
/* Line 1787 of yacc.c  */
#line 14093 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2145:
/* Line 1787 of yacc.c  */
#line 14094 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2146:
/* Line 1787 of yacc.c  */
#line 14095 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2147:
/* Line 1787 of yacc.c  */
#line 14096 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2148:
/* Line 1787 of yacc.c  */
#line 14097 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2149:
/* Line 1787 of yacc.c  */
#line 14098 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2150:
/* Line 1787 of yacc.c  */
#line 14099 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2151:
/* Line 1787 of yacc.c  */
#line 14100 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2152:
/* Line 1787 of yacc.c  */
#line 14101 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2153:
/* Line 1787 of yacc.c  */
#line 14102 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2154:
/* Line 1787 of yacc.c  */
#line 14103 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2155:
/* Line 1787 of yacc.c  */
#line 14104 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2156:
/* Line 1787 of yacc.c  */
#line 14105 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2157:
/* Line 1787 of yacc.c  */
#line 14106 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2158:
/* Line 1787 of yacc.c  */
#line 14107 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2159:
/* Line 1787 of yacc.c  */
#line 14108 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2160:
/* Line 1787 of yacc.c  */
#line 14109 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2161:
/* Line 1787 of yacc.c  */
#line 14110 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2162:
/* Line 1787 of yacc.c  */
#line 14111 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2163:
/* Line 1787 of yacc.c  */
#line 14112 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2164:
/* Line 1787 of yacc.c  */
#line 14113 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2165:
/* Line 1787 of yacc.c  */
#line 14114 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2166:
/* Line 1787 of yacc.c  */
#line 14115 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2167:
/* Line 1787 of yacc.c  */
#line 14116 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2168:
/* Line 1787 of yacc.c  */
#line 14117 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2169:
/* Line 1787 of yacc.c  */
#line 14118 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2170:
/* Line 1787 of yacc.c  */
#line 14119 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2171:
/* Line 1787 of yacc.c  */
#line 14120 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2172:
/* Line 1787 of yacc.c  */
#line 14121 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2173:
/* Line 1787 of yacc.c  */
#line 14122 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2174:
/* Line 1787 of yacc.c  */
#line 14123 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2175:
/* Line 1787 of yacc.c  */
#line 14124 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2176:
/* Line 1787 of yacc.c  */
#line 14125 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2177:
/* Line 1787 of yacc.c  */
#line 14126 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2178:
/* Line 1787 of yacc.c  */
#line 14127 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2179:
/* Line 1787 of yacc.c  */
#line 14128 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2180:
/* Line 1787 of yacc.c  */
#line 14129 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2181:
/* Line 1787 of yacc.c  */
#line 14130 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2182:
/* Line 1787 of yacc.c  */
#line 14131 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2183:
/* Line 1787 of yacc.c  */
#line 14132 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2184:
/* Line 1787 of yacc.c  */
#line 14133 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2185:
/* Line 1787 of yacc.c  */
#line 14134 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2186:
/* Line 1787 of yacc.c  */
#line 14135 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2187:
/* Line 1787 of yacc.c  */
#line 14140 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2188:
/* Line 1787 of yacc.c  */
#line 14141 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2189:
/* Line 1787 of yacc.c  */
#line 14142 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2190:
/* Line 1787 of yacc.c  */
#line 14143 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2191:
/* Line 1787 of yacc.c  */
#line 14144 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2192:
/* Line 1787 of yacc.c  */
#line 14145 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2193:
/* Line 1787 of yacc.c  */
#line 14146 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2194:
/* Line 1787 of yacc.c  */
#line 14147 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2195:
/* Line 1787 of yacc.c  */
#line 14148 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2196:
/* Line 1787 of yacc.c  */
#line 14149 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2197:
/* Line 1787 of yacc.c  */
#line 14150 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2198:
/* Line 1787 of yacc.c  */
#line 14151 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2199:
/* Line 1787 of yacc.c  */
#line 14152 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2200:
/* Line 1787 of yacc.c  */
#line 14153 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2201:
/* Line 1787 of yacc.c  */
#line 14154 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2202:
/* Line 1787 of yacc.c  */
#line 14155 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2203:
/* Line 1787 of yacc.c  */
#line 14156 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2204:
/* Line 1787 of yacc.c  */
#line 14157 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2205:
/* Line 1787 of yacc.c  */
#line 14158 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2206:
/* Line 1787 of yacc.c  */
#line 14159 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2207:
/* Line 1787 of yacc.c  */
#line 14160 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2208:
/* Line 1787 of yacc.c  */
#line 14161 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2209:
/* Line 1787 of yacc.c  */
#line 14162 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2210:
/* Line 1787 of yacc.c  */
#line 14163 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2211:
/* Line 1787 of yacc.c  */
#line 14164 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2212:
/* Line 1787 of yacc.c  */
#line 14165 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2213:
/* Line 1787 of yacc.c  */
#line 14166 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2214:
/* Line 1787 of yacc.c  */
#line 14167 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2215:
/* Line 1787 of yacc.c  */
#line 14168 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2216:
/* Line 1787 of yacc.c  */
#line 14169 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2217:
/* Line 1787 of yacc.c  */
#line 14170 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2218:
/* Line 1787 of yacc.c  */
#line 14171 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2219:
/* Line 1787 of yacc.c  */
#line 14172 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2220:
/* Line 1787 of yacc.c  */
#line 14173 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2221:
/* Line 1787 of yacc.c  */
#line 14174 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2222:
/* Line 1787 of yacc.c  */
#line 14175 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2223:
/* Line 1787 of yacc.c  */
#line 14176 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2224:
/* Line 1787 of yacc.c  */
#line 14177 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2225:
/* Line 1787 of yacc.c  */
#line 14178 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2226:
/* Line 1787 of yacc.c  */
#line 14179 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2227:
/* Line 1787 of yacc.c  */
#line 14180 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2228:
/* Line 1787 of yacc.c  */
#line 14181 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2229:
/* Line 1787 of yacc.c  */
#line 14182 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2230:
/* Line 1787 of yacc.c  */
#line 14183 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2231:
/* Line 1787 of yacc.c  */
#line 14184 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2232:
/* Line 1787 of yacc.c  */
#line 14185 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2233:
/* Line 1787 of yacc.c  */
#line 14186 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2234:
/* Line 1787 of yacc.c  */
#line 14187 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2235:
/* Line 1787 of yacc.c  */
#line 14188 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2236:
/* Line 1787 of yacc.c  */
#line 14189 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2237:
/* Line 1787 of yacc.c  */
#line 14190 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2238:
/* Line 1787 of yacc.c  */
#line 14191 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2239:
/* Line 1787 of yacc.c  */
#line 14192 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2240:
/* Line 1787 of yacc.c  */
#line 14193 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2241:
/* Line 1787 of yacc.c  */
#line 14194 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2242:
/* Line 1787 of yacc.c  */
#line 14195 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2243:
/* Line 1787 of yacc.c  */
#line 14196 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2244:
/* Line 1787 of yacc.c  */
#line 14197 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2245:
/* Line 1787 of yacc.c  */
#line 14198 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2246:
/* Line 1787 of yacc.c  */
#line 14199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2247:
/* Line 1787 of yacc.c  */
#line 14200 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2248:
/* Line 1787 of yacc.c  */
#line 14201 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2249:
/* Line 1787 of yacc.c  */
#line 14202 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2250:
/* Line 1787 of yacc.c  */
#line 14203 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2251:
/* Line 1787 of yacc.c  */
#line 14204 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2252:
/* Line 1787 of yacc.c  */
#line 14205 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2253:
/* Line 1787 of yacc.c  */
#line 14206 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2254:
/* Line 1787 of yacc.c  */
#line 14207 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2255:
/* Line 1787 of yacc.c  */
#line 14208 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2256:
/* Line 1787 of yacc.c  */
#line 14209 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2257:
/* Line 1787 of yacc.c  */
#line 14210 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2258:
/* Line 1787 of yacc.c  */
#line 14211 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2259:
/* Line 1787 of yacc.c  */
#line 14212 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2260:
/* Line 1787 of yacc.c  */
#line 14213 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2261:
/* Line 1787 of yacc.c  */
#line 14214 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2262:
/* Line 1787 of yacc.c  */
#line 14215 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2263:
/* Line 1787 of yacc.c  */
#line 14216 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2264:
/* Line 1787 of yacc.c  */
#line 14217 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2265:
/* Line 1787 of yacc.c  */
#line 14218 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2266:
/* Line 1787 of yacc.c  */
#line 14219 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2267:
/* Line 1787 of yacc.c  */
#line 14220 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2268:
/* Line 1787 of yacc.c  */
#line 14221 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2269:
/* Line 1787 of yacc.c  */
#line 14222 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2270:
/* Line 1787 of yacc.c  */
#line 14223 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2271:
/* Line 1787 of yacc.c  */
#line 14224 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2272:
/* Line 1787 of yacc.c  */
#line 14225 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2273:
/* Line 1787 of yacc.c  */
#line 14226 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2274:
/* Line 1787 of yacc.c  */
#line 14227 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2275:
/* Line 1787 of yacc.c  */
#line 14228 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2276:
/* Line 1787 of yacc.c  */
#line 14229 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2277:
/* Line 1787 of yacc.c  */
#line 14230 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2278:
/* Line 1787 of yacc.c  */
#line 14231 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2279:
/* Line 1787 of yacc.c  */
#line 14232 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2280:
/* Line 1787 of yacc.c  */
#line 14233 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2281:
/* Line 1787 of yacc.c  */
#line 14234 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2282:
/* Line 1787 of yacc.c  */
#line 14235 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2283:
/* Line 1787 of yacc.c  */
#line 14236 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2284:
/* Line 1787 of yacc.c  */
#line 14237 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2285:
/* Line 1787 of yacc.c  */
#line 14238 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2286:
/* Line 1787 of yacc.c  */
#line 14239 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2287:
/* Line 1787 of yacc.c  */
#line 14240 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2288:
/* Line 1787 of yacc.c  */
#line 14241 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2289:
/* Line 1787 of yacc.c  */
#line 14242 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2290:
/* Line 1787 of yacc.c  */
#line 14243 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2291:
/* Line 1787 of yacc.c  */
#line 14244 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2292:
/* Line 1787 of yacc.c  */
#line 14245 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2293:
/* Line 1787 of yacc.c  */
#line 14246 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2294:
/* Line 1787 of yacc.c  */
#line 14247 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2295:
/* Line 1787 of yacc.c  */
#line 14248 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2296:
/* Line 1787 of yacc.c  */
#line 14249 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2297:
/* Line 1787 of yacc.c  */
#line 14250 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2298:
/* Line 1787 of yacc.c  */
#line 14251 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2299:
/* Line 1787 of yacc.c  */
#line 14252 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2300:
/* Line 1787 of yacc.c  */
#line 14253 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2301:
/* Line 1787 of yacc.c  */
#line 14254 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2302:
/* Line 1787 of yacc.c  */
#line 14255 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2303:
/* Line 1787 of yacc.c  */
#line 14256 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2304:
/* Line 1787 of yacc.c  */
#line 14257 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2305:
/* Line 1787 of yacc.c  */
#line 14258 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2306:
/* Line 1787 of yacc.c  */
#line 14259 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2307:
/* Line 1787 of yacc.c  */
#line 14260 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2308:
/* Line 1787 of yacc.c  */
#line 14261 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2309:
/* Line 1787 of yacc.c  */
#line 14262 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2310:
/* Line 1787 of yacc.c  */
#line 14263 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2311:
/* Line 1787 of yacc.c  */
#line 14264 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2312:
/* Line 1787 of yacc.c  */
#line 14265 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2313:
/* Line 1787 of yacc.c  */
#line 14266 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2314:
/* Line 1787 of yacc.c  */
#line 14267 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2315:
/* Line 1787 of yacc.c  */
#line 14268 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2316:
/* Line 1787 of yacc.c  */
#line 14269 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2317:
/* Line 1787 of yacc.c  */
#line 14270 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2318:
/* Line 1787 of yacc.c  */
#line 14271 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2319:
/* Line 1787 of yacc.c  */
#line 14272 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2320:
/* Line 1787 of yacc.c  */
#line 14273 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2321:
/* Line 1787 of yacc.c  */
#line 14274 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2322:
/* Line 1787 of yacc.c  */
#line 14275 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2323:
/* Line 1787 of yacc.c  */
#line 14276 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2324:
/* Line 1787 of yacc.c  */
#line 14277 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2325:
/* Line 1787 of yacc.c  */
#line 14278 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2326:
/* Line 1787 of yacc.c  */
#line 14279 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2327:
/* Line 1787 of yacc.c  */
#line 14280 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2328:
/* Line 1787 of yacc.c  */
#line 14281 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2329:
/* Line 1787 of yacc.c  */
#line 14282 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2330:
/* Line 1787 of yacc.c  */
#line 14283 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2331:
/* Line 1787 of yacc.c  */
#line 14284 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2332:
/* Line 1787 of yacc.c  */
#line 14285 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2333:
/* Line 1787 of yacc.c  */
#line 14286 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2334:
/* Line 1787 of yacc.c  */
#line 14287 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2335:
/* Line 1787 of yacc.c  */
#line 14288 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2336:
/* Line 1787 of yacc.c  */
#line 14289 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2337:
/* Line 1787 of yacc.c  */
#line 14290 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2338:
/* Line 1787 of yacc.c  */
#line 14291 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2339:
/* Line 1787 of yacc.c  */
#line 14292 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2340:
/* Line 1787 of yacc.c  */
#line 14293 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2341:
/* Line 1787 of yacc.c  */
#line 14294 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2342:
/* Line 1787 of yacc.c  */
#line 14295 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2343:
/* Line 1787 of yacc.c  */
#line 14296 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2344:
/* Line 1787 of yacc.c  */
#line 14297 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2345:
/* Line 1787 of yacc.c  */
#line 14298 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2346:
/* Line 1787 of yacc.c  */
#line 14299 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2347:
/* Line 1787 of yacc.c  */
#line 14300 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2348:
/* Line 1787 of yacc.c  */
#line 14301 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2349:
/* Line 1787 of yacc.c  */
#line 14302 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2350:
/* Line 1787 of yacc.c  */
#line 14303 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2351:
/* Line 1787 of yacc.c  */
#line 14304 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2352:
/* Line 1787 of yacc.c  */
#line 14305 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2353:
/* Line 1787 of yacc.c  */
#line 14306 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2354:
/* Line 1787 of yacc.c  */
#line 14307 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2355:
/* Line 1787 of yacc.c  */
#line 14308 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2356:
/* Line 1787 of yacc.c  */
#line 14309 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2357:
/* Line 1787 of yacc.c  */
#line 14310 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2358:
/* Line 1787 of yacc.c  */
#line 14311 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2359:
/* Line 1787 of yacc.c  */
#line 14312 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2360:
/* Line 1787 of yacc.c  */
#line 14313 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2361:
/* Line 1787 of yacc.c  */
#line 14314 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2362:
/* Line 1787 of yacc.c  */
#line 14315 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2363:
/* Line 1787 of yacc.c  */
#line 14316 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2364:
/* Line 1787 of yacc.c  */
#line 14317 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2365:
/* Line 1787 of yacc.c  */
#line 14318 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2366:
/* Line 1787 of yacc.c  */
#line 14319 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2367:
/* Line 1787 of yacc.c  */
#line 14320 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2368:
/* Line 1787 of yacc.c  */
#line 14321 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2369:
/* Line 1787 of yacc.c  */
#line 14322 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2370:
/* Line 1787 of yacc.c  */
#line 14323 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2371:
/* Line 1787 of yacc.c  */
#line 14324 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2372:
/* Line 1787 of yacc.c  */
#line 14325 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2373:
/* Line 1787 of yacc.c  */
#line 14326 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2374:
/* Line 1787 of yacc.c  */
#line 14327 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2375:
/* Line 1787 of yacc.c  */
#line 14328 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2376:
/* Line 1787 of yacc.c  */
#line 14329 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2377:
/* Line 1787 of yacc.c  */
#line 14330 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2378:
/* Line 1787 of yacc.c  */
#line 14331 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2379:
/* Line 1787 of yacc.c  */
#line 14332 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2380:
/* Line 1787 of yacc.c  */
#line 14333 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2381:
/* Line 1787 of yacc.c  */
#line 14334 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2382:
/* Line 1787 of yacc.c  */
#line 14335 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2383:
/* Line 1787 of yacc.c  */
#line 14336 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2384:
/* Line 1787 of yacc.c  */
#line 14337 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2385:
/* Line 1787 of yacc.c  */
#line 14338 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2386:
/* Line 1787 of yacc.c  */
#line 14339 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2387:
/* Line 1787 of yacc.c  */
#line 14340 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2388:
/* Line 1787 of yacc.c  */
#line 14341 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2389:
/* Line 1787 of yacc.c  */
#line 14342 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2390:
/* Line 1787 of yacc.c  */
#line 14343 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2391:
/* Line 1787 of yacc.c  */
#line 14344 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2392:
/* Line 1787 of yacc.c  */
#line 14345 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2393:
/* Line 1787 of yacc.c  */
#line 14346 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2394:
/* Line 1787 of yacc.c  */
#line 14347 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2395:
/* Line 1787 of yacc.c  */
#line 14348 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2396:
/* Line 1787 of yacc.c  */
#line 14349 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2397:
/* Line 1787 of yacc.c  */
#line 14350 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2398:
/* Line 1787 of yacc.c  */
#line 14351 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2399:
/* Line 1787 of yacc.c  */
#line 14352 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2400:
/* Line 1787 of yacc.c  */
#line 14353 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2401:
/* Line 1787 of yacc.c  */
#line 14354 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2402:
/* Line 1787 of yacc.c  */
#line 14355 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2403:
/* Line 1787 of yacc.c  */
#line 14356 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2404:
/* Line 1787 of yacc.c  */
#line 14357 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2405:
/* Line 1787 of yacc.c  */
#line 14358 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2406:
/* Line 1787 of yacc.c  */
#line 14359 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2407:
/* Line 1787 of yacc.c  */
#line 14360 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2408:
/* Line 1787 of yacc.c  */
#line 14361 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2409:
/* Line 1787 of yacc.c  */
#line 14362 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2410:
/* Line 1787 of yacc.c  */
#line 14363 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2411:
/* Line 1787 of yacc.c  */
#line 14364 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2412:
/* Line 1787 of yacc.c  */
#line 14365 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2413:
/* Line 1787 of yacc.c  */
#line 14366 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2414:
/* Line 1787 of yacc.c  */
#line 14367 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2415:
/* Line 1787 of yacc.c  */
#line 14368 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2416:
/* Line 1787 of yacc.c  */
#line 14369 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2417:
/* Line 1787 of yacc.c  */
#line 14370 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2418:
/* Line 1787 of yacc.c  */
#line 14371 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2419:
/* Line 1787 of yacc.c  */
#line 14372 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2420:
/* Line 1787 of yacc.c  */
#line 14373 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2421:
/* Line 1787 of yacc.c  */
#line 14374 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2422:
/* Line 1787 of yacc.c  */
#line 14375 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2423:
/* Line 1787 of yacc.c  */
#line 14376 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2424:
/* Line 1787 of yacc.c  */
#line 14377 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2425:
/* Line 1787 of yacc.c  */
#line 14378 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2426:
/* Line 1787 of yacc.c  */
#line 14379 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2427:
/* Line 1787 of yacc.c  */
#line 14380 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2428:
/* Line 1787 of yacc.c  */
#line 14381 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2429:
/* Line 1787 of yacc.c  */
#line 14382 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2430:
/* Line 1787 of yacc.c  */
#line 14383 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2431:
/* Line 1787 of yacc.c  */
#line 14384 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2432:
/* Line 1787 of yacc.c  */
#line 14385 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2433:
/* Line 1787 of yacc.c  */
#line 14386 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2434:
/* Line 1787 of yacc.c  */
#line 14387 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2435:
/* Line 1787 of yacc.c  */
#line 14388 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2436:
/* Line 1787 of yacc.c  */
#line 14389 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2437:
/* Line 1787 of yacc.c  */
#line 14390 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2438:
/* Line 1787 of yacc.c  */
#line 14391 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2439:
/* Line 1787 of yacc.c  */
#line 14392 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2440:
/* Line 1787 of yacc.c  */
#line 14393 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2441:
/* Line 1787 of yacc.c  */
#line 14394 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2442:
/* Line 1787 of yacc.c  */
#line 14395 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2443:
/* Line 1787 of yacc.c  */
#line 14407 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2444:
/* Line 1787 of yacc.c  */
#line 14418 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2445:
/* Line 1787 of yacc.c  */
#line 14425 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2447:
/* Line 1787 of yacc.c  */
#line 14431 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->option_type= OPT_DEFAULT;
          }
    break;

  case 2448:
/* Line 1787 of yacc.c  */
#line 14435 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
    break;

  case 2449:
/* Line 1787 of yacc.c  */
#line 14440 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2451:
/* Line 1787 of yacc.c  */
#line 14450 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2453:
/* Line 1787 of yacc.c  */
#line 14456 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2456:
/* Line 1787 of yacc.c  */
#line 14470 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2457:
/* Line 1787 of yacc.c  */
#line 14474 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2458:
/* Line 1787 of yacc.c  */
#line 14479 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            sp_create_assignment_lex(YYTHD, yychar == YYEMPTY);
          }
    break;

  case 2459:
/* Line 1787 of yacc.c  */
#line 14483 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (sp_create_assignment_instr(YYTHD, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
    break;

  case 2460:
/* Line 1787 of yacc.c  */
#line 14492 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->option_type= (yyvsp[(1) - (1)].var_type);
          }
    break;

  case 2463:
/* Line 1787 of yacc.c  */
#line 14500 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2464:
/* Line 1787 of yacc.c  */
#line 14501 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2465:
/* Line 1787 of yacc.c  */
#line 14502 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2466:
/* Line 1787 of yacc.c  */
#line 14506 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2467:
/* Line 1787 of yacc.c  */
#line 14507 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2468:
/* Line 1787 of yacc.c  */
#line 14508 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2469:
/* Line 1787 of yacc.c  */
#line 14509 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2470:
/* Line 1787 of yacc.c  */
#line 14513 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2471:
/* Line 1787 of yacc.c  */
#line 14514 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2472:
/* Line 1787 of yacc.c  */
#line 14515 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2473:
/* Line 1787 of yacc.c  */
#line 14516 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2474:
/* Line 1787 of yacc.c  */
#line 14522 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var && (yyvsp[(1) - (3)].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceeding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2475:
/* Line 1787 of yacc.c  */
#line 14547 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;

            if ((yyvsp[(1) - (3)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(YYTHD, &(yyvsp[(1) - (3)].variable).base_name, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(1) - (3)].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(1) - (3)].variable), lex->option_type, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[(1) - (3)].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(3) - (3)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2476:
/* Line 1787 of yacc.c  */
#line 14574 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2477:
/* Line 1787 of yacc.c  */
#line 14585 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2478:
/* Line 1787 of yacc.c  */
#line 14598 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2479:
/* Line 1787 of yacc.c  */
#line 14612 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2480:
/* Line 1787 of yacc.c  */
#line 14627 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2481:
/* Line 1787 of yacc.c  */
#line 14646 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            user->user.length= strlen(thd->security_ctx->user);
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2482:
/* Line 1787 of yacc.c  */
#line 14674 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2483:
/* Line 1787 of yacc.c  */
#line 14687 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[(1) - (1)].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2484:
/* Line 1787 of yacc.c  */
#line 14714 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2485:
/* Line 1787 of yacc.c  */
#line 14757 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2490:
/* Line 1787 of yacc.c  */
#line 14778 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(1) - (1)].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2491:
/* Line 1787 of yacc.c  */
#line 14796 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(3) - (3)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2492:
/* Line 1787 of yacc.c  */
#line 14813 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= true; }
    break;

  case 2493:
/* Line 1787 of yacc.c  */
#line 14814 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= false; }
    break;

  case 2494:
/* Line 1787 of yacc.c  */
#line 14818 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2495:
/* Line 1787 of yacc.c  */
#line 14819 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2496:
/* Line 1787 of yacc.c  */
#line 14820 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2497:
/* Line 1787 of yacc.c  */
#line 14821 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2498:
/* Line 1787 of yacc.c  */
#line 14825 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2499:
/* Line 1787 of yacc.c  */
#line 14827 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].lex_str).length == 0)
             (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).str;
            else
            switch (YYTHD->variables.old_passwords) {
              case 1: (yyval.simple_string)= Item_func_old_password::
                alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
              case 0:
              case 2: (yyval.simple_string)= Item_func_password::
                create_password_hash_buffer(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length);
                break;
            }
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2500:
/* Line 1787 of yacc.c  */
#line 14845 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::
              alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
            Lex->contains_plaintext_password= true;
          }
    break;

  case 2501:
/* Line 1787 of yacc.c  */
#line 14856 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2502:
/* Line 1787 of yacc.c  */
#line 14857 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2503:
/* Line 1787 of yacc.c  */
#line 14859 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2504:
/* Line 1787 of yacc.c  */
#line 14865 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2505:
/* Line 1787 of yacc.c  */
#line 14871 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2506:
/* Line 1787 of yacc.c  */
#line 14882 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2507:
/* Line 1787 of yacc.c  */
#line 14893 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2512:
/* Line 1787 of yacc.c  */
#line 14908 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2513:
/* Line 1787 of yacc.c  */
#line 14922 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2514:
/* Line 1787 of yacc.c  */
#line 14923 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2515:
/* Line 1787 of yacc.c  */
#line 14925 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
    break;

  case 2516:
/* Line 1787 of yacc.c  */
#line 14929 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2517:
/* Line 1787 of yacc.c  */
#line 14930 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2518:
/* Line 1787 of yacc.c  */
#line 14935 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2519:
/* Line 1787 of yacc.c  */
#line 14946 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2520:
/* Line 1787 of yacc.c  */
#line 14955 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2521:
/* Line 1787 of yacc.c  */
#line 14967 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2522:
/* Line 1787 of yacc.c  */
#line 14979 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2523:
/* Line 1787 of yacc.c  */
#line 14999 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2524:
/* Line 1787 of yacc.c  */
#line 15012 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2525:
/* Line 1787 of yacc.c  */
#line 15013 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2526:
/* Line 1787 of yacc.c  */
#line 15017 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2527:
/* Line 1787 of yacc.c  */
#line 15018 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2528:
/* Line 1787 of yacc.c  */
#line 15022 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2529:
/* Line 1787 of yacc.c  */
#line 15023 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2530:
/* Line 1787 of yacc.c  */
#line 15024 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2531:
/* Line 1787 of yacc.c  */
#line 15025 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2532:
/* Line 1787 of yacc.c  */
#line 15027 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2533:
/* Line 1787 of yacc.c  */
#line 15035 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2534:
/* Line 1787 of yacc.c  */
#line 15039 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2535:
/* Line 1787 of yacc.c  */
#line 15040 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2536:
/* Line 1787 of yacc.c  */
#line 15041 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2537:
/* Line 1787 of yacc.c  */
#line 15042 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2538:
/* Line 1787 of yacc.c  */
#line 15043 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2539:
/* Line 1787 of yacc.c  */
#line 15050 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2540:
/* Line 1787 of yacc.c  */
#line 15055 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2541:
/* Line 1787 of yacc.c  */
#line 15061 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2542:
/* Line 1787 of yacc.c  */
#line 15072 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2543:
/* Line 1787 of yacc.c  */
#line 15083 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2544:
/* Line 1787 of yacc.c  */
#line 15087 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2545:
/* Line 1787 of yacc.c  */
#line 15097 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2546:
/* Line 1787 of yacc.c  */
#line 15103 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2547:
/* Line 1787 of yacc.c  */
#line 15110 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2548:
/* Line 1787 of yacc.c  */
#line 15122 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2549:
/* Line 1787 of yacc.c  */
#line 15133 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2552:
/* Line 1787 of yacc.c  */
#line 15147 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2553:
/* Line 1787 of yacc.c  */
#line 15149 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2558:
/* Line 1787 of yacc.c  */
#line 15167 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2559:
/* Line 1787 of yacc.c  */
#line 15168 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2560:
/* Line 1787 of yacc.c  */
#line 15170 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2561:
/* Line 1787 of yacc.c  */
#line 15171 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2562:
/* Line 1787 of yacc.c  */
#line 15173 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2563:
/* Line 1787 of yacc.c  */
#line 15174 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2564:
/* Line 1787 of yacc.c  */
#line 15176 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2565:
/* Line 1787 of yacc.c  */
#line 15177 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2566:
/* Line 1787 of yacc.c  */
#line 15178 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2567:
/* Line 1787 of yacc.c  */
#line 15179 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2568:
/* Line 1787 of yacc.c  */
#line 15180 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2569:
/* Line 1787 of yacc.c  */
#line 15181 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2570:
/* Line 1787 of yacc.c  */
#line 15182 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2571:
/* Line 1787 of yacc.c  */
#line 15183 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2572:
/* Line 1787 of yacc.c  */
#line 15184 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2573:
/* Line 1787 of yacc.c  */
#line 15185 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2574:
/* Line 1787 of yacc.c  */
#line 15186 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2575:
/* Line 1787 of yacc.c  */
#line 15187 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2576:
/* Line 1787 of yacc.c  */
#line 15188 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2577:
/* Line 1787 of yacc.c  */
#line 15189 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2578:
/* Line 1787 of yacc.c  */
#line 15190 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2579:
/* Line 1787 of yacc.c  */
#line 15191 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2580:
/* Line 1787 of yacc.c  */
#line 15192 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2581:
/* Line 1787 of yacc.c  */
#line 15193 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2582:
/* Line 1787 of yacc.c  */
#line 15194 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2583:
/* Line 1787 of yacc.c  */
#line 15195 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2584:
/* Line 1787 of yacc.c  */
#line 15196 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2585:
/* Line 1787 of yacc.c  */
#line 15197 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2586:
/* Line 1787 of yacc.c  */
#line 15198 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2587:
/* Line 1787 of yacc.c  */
#line 15199 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2588:
/* Line 1787 of yacc.c  */
#line 15200 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2589:
/* Line 1787 of yacc.c  */
#line 15201 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2590:
/* Line 1787 of yacc.c  */
#line 15202 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2591:
/* Line 1787 of yacc.c  */
#line 15203 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2592:
/* Line 1787 of yacc.c  */
#line 15207 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2593:
/* Line 1787 of yacc.c  */
#line 15208 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2596:
/* Line 1787 of yacc.c  */
#line 15218 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2597:
/* Line 1787 of yacc.c  */
#line 15228 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2598:
/* Line 1787 of yacc.c  */
#line 15238 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2599:
/* Line 1787 of yacc.c  */
#line 15251 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2600:
/* Line 1787 of yacc.c  */
#line 15266 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2601:
/* Line 1787 of yacc.c  */
#line 15279 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2602:
/* Line 1787 of yacc.c  */
#line 15292 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2603:
/* Line 1787 of yacc.c  */
#line 15304 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2604:
/* Line 1787 of yacc.c  */
#line 15309 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2605:
/* Line 1787 of yacc.c  */
#line 15317 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2606:
/* Line 1787 of yacc.c  */
#line 15322 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2611:
/* Line 1787 of yacc.c  */
#line 15333 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_sha1(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2612:
/* Line 1787 of yacc.c  */
#line 15362 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2613:
/* Line 1787 of yacc.c  */
#line 15367 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2614:
/* Line 1787 of yacc.c  */
#line 15373 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2615:
/* Line 1787 of yacc.c  */
#line 15379 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2616:
/* Line 1787 of yacc.c  */
#line 15384 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2620:
/* Line 1787 of yacc.c  */
#line 15398 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2622:
/* Line 1787 of yacc.c  */
#line 15427 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2623:
/* Line 1787 of yacc.c  */
#line 15431 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2624:
/* Line 1787 of yacc.c  */
#line 15435 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2625:
/* Line 1787 of yacc.c  */
#line 15439 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2626:
/* Line 1787 of yacc.c  */
#line 15445 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2628:
/* Line 1787 of yacc.c  */
#line 15450 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2629:
/* Line 1787 of yacc.c  */
#line 15451 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2630:
/* Line 1787 of yacc.c  */
#line 15455 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2631:
/* Line 1787 of yacc.c  */
#line 15456 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2632:
/* Line 1787 of yacc.c  */
#line 15460 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2633:
/* Line 1787 of yacc.c  */
#line 15462 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2634:
/* Line 1787 of yacc.c  */
#line 15468 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2635:
/* Line 1787 of yacc.c  */
#line 15474 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2636:
/* Line 1787 of yacc.c  */
#line 15480 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2637:
/* Line 1787 of yacc.c  */
#line 15489 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2638:
/* Line 1787 of yacc.c  */
#line 15494 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2639:
/* Line 1787 of yacc.c  */
#line 15498 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2640:
/* Line 1787 of yacc.c  */
#line 15499 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2641:
/* Line 1787 of yacc.c  */
#line 15504 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2642:
/* Line 1787 of yacc.c  */
#line 15505 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2643:
/* Line 1787 of yacc.c  */
#line 15506 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2644:
/* Line 1787 of yacc.c  */
#line 15511 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2645:
/* Line 1787 of yacc.c  */
#line 15512 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2646:
/* Line 1787 of yacc.c  */
#line 15513 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2647:
/* Line 1787 of yacc.c  */
#line 15517 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2648:
/* Line 1787 of yacc.c  */
#line 15518 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2649:
/* Line 1787 of yacc.c  */
#line 15523 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2650:
/* Line 1787 of yacc.c  */
#line 15535 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2651:
/* Line 1787 of yacc.c  */
#line 15545 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2652:
/* Line 1787 of yacc.c  */
#line 15554 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2653:
/* Line 1787 of yacc.c  */
#line 15563 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2654:
/* Line 1787 of yacc.c  */
#line 15576 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2656:
/* Line 1787 of yacc.c  */
#line 15582 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2657:
/* Line 1787 of yacc.c  */
#line 15587 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2658:
/* Line 1787 of yacc.c  */
#line 15597 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2659:
/* Line 1787 of yacc.c  */
#line 15598 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2660:
/* Line 1787 of yacc.c  */
#line 15599 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2661:
/* Line 1787 of yacc.c  */
#line 15603 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= false; }
    break;

  case 2662:
/* Line 1787 of yacc.c  */
#line 15604 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.is_not_empty)= true; }
    break;

  case 2663:
/* Line 1787 of yacc.c  */
#line 15608 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2664:
/* Line 1787 of yacc.c  */
#line 15624 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2667:
/* Line 1787 of yacc.c  */
#line 15637 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2668:
/* Line 1787 of yacc.c  */
#line 15638 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2669:
/* Line 1787 of yacc.c  */
#line 15639 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2670:
/* Line 1787 of yacc.c  */
#line 15644 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2671:
/* Line 1787 of yacc.c  */
#line 15648 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2673:
/* Line 1787 of yacc.c  */
#line 15657 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2674:
/* Line 1787 of yacc.c  */
#line 15663 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2675:
/* Line 1787 of yacc.c  */
#line 15672 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2676:
/* Line 1787 of yacc.c  */
#line 15678 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2677:
/* Line 1787 of yacc.c  */
#line 15699 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2682:
/* Line 1787 of yacc.c  */
#line 15727 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2683:
/* Line 1787 of yacc.c  */
#line 15729 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2684:
/* Line 1787 of yacc.c  */
#line 15736 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2685:
/* Line 1787 of yacc.c  */
#line 15737 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2686:
/* Line 1787 of yacc.c  */
#line 15738 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2687:
/* Line 1787 of yacc.c  */
#line 15740 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2688:
/* Line 1787 of yacc.c  */
#line 15746 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2689:
/* Line 1787 of yacc.c  */
#line 15751 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2690:
/* Line 1787 of yacc.c  */
#line 15762 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2691:
/* Line 1787 of yacc.c  */
#line 15764 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2692:
/* Line 1787 of yacc.c  */
#line 15766 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2706:
/* Line 1787 of yacc.c  */
#line 15799 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2707:
/* Line 1787 of yacc.c  */
#line 15813 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2708:
/* Line 1787 of yacc.c  */
#line 15826 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2709:
/* Line 1787 of yacc.c  */
#line 15828 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2710:
/* Line 1787 of yacc.c  */
#line 15830 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2711:
/* Line 1787 of yacc.c  */
#line 15835 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2712:
/* Line 1787 of yacc.c  */
#line 15840 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
    break;

  case 2713:
/* Line 1787 of yacc.c  */
#line 15842 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2714:
/* Line 1787 of yacc.c  */
#line 15844 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2715:
/* Line 1787 of yacc.c  */
#line 15849 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2716:
/* Line 1787 of yacc.c  */
#line 15851 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2717:
/* Line 1787 of yacc.c  */
#line 15853 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2718:
/* Line 1787 of yacc.c  */
#line 15858 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2720:
/* Line 1787 of yacc.c  */
#line 15875 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2722:
/* Line 1787 of yacc.c  */
#line 15881 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2723:
/* Line 1787 of yacc.c  */
#line 15886 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2724:
/* Line 1787 of yacc.c  */
#line 15893 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2725:
/* Line 1787 of yacc.c  */
#line 15902 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2728:
/* Line 1787 of yacc.c  */
#line 15924 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2729:
/* Line 1787 of yacc.c  */
#line 15926 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2730:
/* Line 1787 of yacc.c  */
#line 15928 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2731:
/* Line 1787 of yacc.c  */
#line 15930 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2732:
/* Line 1787 of yacc.c  */
#line 15947 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2733:
/* Line 1787 of yacc.c  */
#line 15953 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2734:
/* Line 1787 of yacc.c  */
#line 15958 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2735:
/* Line 1787 of yacc.c  */
#line 15988 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2736:
/* Line 1787 of yacc.c  */
#line 16022 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2737:
/* Line 1787 of yacc.c  */
#line 16040 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2738:
/* Line 1787 of yacc.c  */
#line 16063 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2739:
/* Line 1787 of yacc.c  */
#line 16095 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2740:
/* Line 1787 of yacc.c  */
#line 16099 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
    break;

  case 2741:
/* Line 1787 of yacc.c  */
#line 16108 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2742:
/* Line 1787 of yacc.c  */
#line 16131 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2743:
/* Line 1787 of yacc.c  */
#line 16140 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2744:
/* Line 1787 of yacc.c  */
#line 16196 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2745:
/* Line 1787 of yacc.c  */
#line 16220 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2746:
/* Line 1787 of yacc.c  */
#line 16229 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2747:
/* Line 1787 of yacc.c  */
#line 16237 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2748:
/* Line 1787 of yacc.c  */
#line 16245 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2749:
/* Line 1787 of yacc.c  */
#line 16259 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2750:
/* Line 1787 of yacc.c  */
#line 16263 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2751:
/* Line 1787 of yacc.c  */
#line 16267 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2752:
/* Line 1787 of yacc.c  */
#line 16271 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2753:
/* Line 1787 of yacc.c  */
#line 16275 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2754:
/* Line 1787 of yacc.c  */
#line 16279 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2755:
/* Line 1787 of yacc.c  */
#line 16286 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2756:
/* Line 1787 of yacc.c  */
#line 16293 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2757:
/* Line 1787 of yacc.c  */
#line 16300 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2758:
/* Line 1787 of yacc.c  */
#line 16309 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2759:
/* Line 1787 of yacc.c  */
#line 16310 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2760:
/* Line 1787 of yacc.c  */
#line 16314 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2761:
/* Line 1787 of yacc.c  */
#line 16315 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2762:
/* Line 1787 of yacc.c  */
#line 16316 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2763:
/* Line 1787 of yacc.c  */
#line 16320 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2764:
/* Line 1787 of yacc.c  */
#line 16321 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2765:
/* Line 1787 of yacc.c  */
#line 16326 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2766:
/* Line 1787 of yacc.c  */
#line 16328 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2768:
/* Line 1787 of yacc.c  */
#line 16333 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {}
    break;

  case 2769:
/* Line 1787 of yacc.c  */
#line 16334 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2770:
/* Line 1787 of yacc.c  */
#line 16339 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2771:
/* Line 1787 of yacc.c  */
#line 16346 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2772:
/* Line 1787 of yacc.c  */
#line 16356 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2773:
/* Line 1787 of yacc.c  */
#line 16362 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2774:
/* Line 1787 of yacc.c  */
#line 16373 "/opt/mariadb.git/trunk/sql/sql_yacc.yy"
    {
	  YYERROR;
	}
    break;


/* Line 1787 of yacc.c  */
#line 41408 "/opt/mariadb.git/trunk/sql/sql_yacc.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


